======================================================
WARNING: possible circular locking dependency detected
6.3.0-rc6-syzkaller-00168-g95abc817ab3a #0 Not tainted
------------------------------------------------------
syz-executor.3/22576 is trying to acquire lock:
ffff8880342c34a0 (&ni->ni_lock/4){+.+.}-{3:3}, at: ni_lock fs/ntfs3/ntfs_fs.h:1124 [inline]
ffff8880342c34a0 (&ni->ni_lock/4){+.+.}-{3:3}, at: ntfs_fallocate+0xa03/0x1190 fs/ntfs3/file.c:568

but task is already holding lock:
ffff8880342c38e0 (mapping.invalidate_lock#13){++++}-{3:3}, at: filemap_invalidate_lock include/linux/fs.h:803 [inline]
ffff8880342c38e0 (mapping.invalidate_lock#13){++++}-{3:3}, at: ntfs_fallocate+0x3c8/0x1190 fs/ntfs3/file.c:488

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #2 (mapping.invalidate_lock#13){++++}-{3:3}:
       lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
       down_read+0x3d/0x50 kernel/locking/rwsem.c:1520
       filemap_invalidate_lock_shared include/linux/fs.h:813 [inline]
       filemap_fault+0x644/0x1800 mm/filemap.c:3274
       __do_fault+0x136/0x500 mm/memory.c:4155
       do_read_fault mm/memory.c:4506 [inline]
       do_fault mm/memory.c:4635 [inline]
       handle_pte_fault mm/memory.c:4923 [inline]
       __handle_mm_fault mm/memory.c:5065 [inline]
       handle_mm_fault+0x3357/0x51c0 mm/memory.c:5211
       faultin_page mm/gup.c:925 [inline]
       __get_user_pages+0x512/0x1180 mm/gup.c:1147
       populate_vma_page_range+0x2c7/0x3b0 mm/gup.c:1543
       __mm_populate+0x279/0x450 mm/gup.c:1652
       mm_populate include/linux/mm.h:3026 [inline]
       vm_mmap_pgoff+0x22f/0x2e0 mm/util.c:547
       ksys_mmap_pgoff+0x4f9/0x6d0 mm/mmap.c:1410
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

-> #1 (&mm->mmap_lock){++++}-{3:3}:
       lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
       __might_fault+0xba/0x120 mm/memory.c:5639
       _copy_to_user+0x2a/0x130 lib/usercopy.c:36
       copy_to_user include/linux/uaccess.h:169 [inline]
       fiemap_fill_next_extent+0x235/0x410 fs/ioctl.c:144
       ni_fiemap+0x100b/0x1230 fs/ntfs3/frecord.c:1944
       ntfs_fiemap+0x132/0x180 fs/ntfs3/file.c:1150
       ioctl_fiemap fs/ioctl.c:219 [inline]
       do_vfs_ioctl+0x19ba/0x2b10 fs/ioctl.c:810
       __do_sys_ioctl fs/ioctl.c:868 [inline]
       __se_sys_ioctl+0x81/0x160 fs/ioctl.c:856
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

-> #0 (&ni->ni_lock/4){+.+.}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:3098 [inline]
       check_prevs_add kernel/locking/lockdep.c:3217 [inline]
       validate_chain+0x166b/0x58e0 kernel/locking/lockdep.c:3832
       __lock_acquire+0x125b/0x1f80 kernel/locking/lockdep.c:5056
       lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
       __mutex_lock_common+0x1d8/0x2530 kernel/locking/mutex.c:603
       __mutex_lock kernel/locking/mutex.c:747 [inline]
       mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799
       ni_lock fs/ntfs3/ntfs_fs.h:1124 [inline]
       ntfs_fallocate+0xa03/0x1190 fs/ntfs3/file.c:568
       vfs_fallocate+0x54b/0x6b0 fs/open.c:324
       ksys_fallocate fs/open.c:347 [inline]
       __do_sys_fallocate fs/open.c:355 [inline]
       __se_sys_fallocate fs/open.c:353 [inline]
       __x64_sys_fallocate+0xbd/0x100 fs/open.c:353
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

other info that might help us debug this:

Chain exists of:
  &ni->ni_lock/4 --> &mm->mmap_lock --> mapping.invalidate_lock#13

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(mapping.invalidate_lock#13);
                               lock(&mm->mmap_lock);
                               lock(mapping.invalidate_lock#13);
  lock(&ni->ni_lock/4);

 *** DEADLOCK ***

3 locks held by syz-executor.3/22576:
 #0: ffff88802c0f8460 (sb_writers#17){.+.+}-{0:0}, at: file_start_write include/linux/fs.h:2505 [inline]
 #0: ffff88802c0f8460 (sb_writers#17){.+.+}-{0:0}, at: vfs_fallocate+0x4be/0x6b0 fs/open.c:323
 #1: ffff8880342c3740 (&sb->s_type->i_mutex_key#27){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:758 [inline]
 #1: ffff8880342c3740 (&sb->s_type->i_mutex_key#27){+.+.}-{3:3}, at: ntfs_fallocate+0x2fb/0x1190 fs/ntfs3/file.c:474
 #2: ffff8880342c38e0 (mapping.invalidate_lock#13){++++}-{3:3}, at: filemap_invalidate_lock include/linux/fs.h:803 [inline]
 #2: ffff8880342c38e0 (mapping.invalidate_lock#13){++++}-{3:3}, at: ntfs_fallocate+0x3c8/0x1190 fs/ntfs3/file.c:488

stack backtrace:
CPU: 0 PID: 22576 Comm: syz-executor.3 Not tainted 6.3.0-rc6-syzkaller-00168-g95abc817ab3a #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/30/2023
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x1e7/0x2d0 lib/dump_stack.c:106
 check_noncircular+0x2fe/0x3b0 kernel/locking/lockdep.c:2178
 check_prev_add kernel/locking/lockdep.c:3098 [inline]
 check_prevs_add kernel/locking/lockdep.c:3217 [inline]
 validate_chain+0x166b/0x58e0 kernel/locking/lockdep.c:3832
 __lock_acquire+0x125b/0x1f80 kernel/locking/lockdep.c:5056
 lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
 __mutex_lock_common+0x1d8/0x2530 kernel/locking/mutex.c:603
 __mutex_lock kernel/locking/mutex.c:747 [inline]
 mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799
 ni_lock fs/ntfs3/ntfs_fs.h:1124 [inline]
 ntfs_fallocate+0xa03/0x1190 fs/ntfs3/file.c:568
 vfs_fallocate+0x54b/0x6b0 fs/open.c:324
 ksys_fallocate fs/open.c:347 [inline]
 __do_sys_fallocate fs/open.c:355 [inline]
 __se_sys_fallocate fs/open.c:353 [inline]
 __x64_sys_fallocate+0xbd/0x100 fs/open.c:353
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x63/0xcd
RIP: 0033:0x7f361188c169
Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 f1 19 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007f3612616168 EFLAGS: 00000246 ORIG_RAX: 000000000000011d
RAX: ffffffffffffffda RBX: 00007f36119abf80 RCX: 00007f361188c169
RDX: 0000000000000000 RSI: 0000000000000020 RDI: 0000000000000005
RBP: 00007f36118e7ca1 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000010000 R11: 0000000000000246 R12: 0000000000000000
R13: 00007ffd084e4bcf R14: 00007f3612616300 R15: 0000000000022000
 </TASK>
ntfs3: loop3: ino=18, "bus" attr_insert_range
