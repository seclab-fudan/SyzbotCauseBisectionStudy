REISERFS (device loop0): checking transaction log (loop0)
REISERFS (device loop0): Using rupasov hash to sort names
REISERFS (device loop0): Created .reiserfs_priv - reserved for xattr storage.
======================================================
WARNING: possible circular locking dependency detected
6.1.0-rc4-next-20221111-syzkaller #0 Not tainted
------------------------------------------------------
syz-executor405/5247 is trying to acquire lock:
ffff888072c302e0 (&type->i_mutex_dir_key#6){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:756 [inline]
ffff888072c302e0 (&type->i_mutex_dir_key#6){+.+.}-{3:3}, at: vfs_fileattr_set+0x148/0xbe0 fs/ioctl.c:681

but task is already holding lock:
ffff88802ac5a460 (sb_writers#9){.+.+}-{0:0}, at: ioctl_setflags fs/ioctl.c:725 [inline]
ffff88802ac5a460 (sb_writers#9){.+.+}-{0:0}, at: do_vfs_ioctl+0xe0b/0x1580 fs/ioctl.c:839

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #2 (sb_writers#9){.+.+}-{0:0}:
       percpu_down_read include/linux/percpu-rwsem.h:51 [inline]
       __sb_start_write include/linux/fs.h:1792 [inline]
       sb_start_write include/linux/fs.h:1867 [inline]
       mnt_want_write_file+0x8e/0x590 fs/namespace.c:552
       reiserfs_ioctl+0x19e/0x320 fs/reiserfs/ioctl.c:103
       vfs_ioctl fs/ioctl.c:51 [inline]
       __do_sys_ioctl fs/ioctl.c:870 [inline]
       __se_sys_ioctl fs/ioctl.c:856 [inline]
       __x64_sys_ioctl+0x193/0x200 fs/ioctl.c:856
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

-> #1 (&sbi->lock){+.+.}-{3:3}:
       __mutex_lock_common kernel/locking/mutex.c:603 [inline]
       __mutex_lock+0x12f/0x1350 kernel/locking/mutex.c:747
       reiserfs_write_lock+0x75/0xf0 fs/reiserfs/lock.c:27
       reiserfs_lookup+0x171/0x490 fs/reiserfs/namei.c:364
       __lookup_slow+0x24c/0x460 fs/namei.c:1685
       lookup_one_len+0x16a/0x1a0 fs/namei.c:2711
       reiserfs_lookup_privroot+0x92/0x280 fs/reiserfs/xattr.c:973
       reiserfs_fill_super+0x20e5/0x2e90 fs/reiserfs/super.c:2174
       mount_bdev+0x34d/0x410 fs/super.c:1401
       legacy_get_tree+0x105/0x220 fs/fs_context.c:610
       vfs_get_tree+0x89/0x2f0 fs/super.c:1531
       do_new_mount fs/namespace.c:3145 [inline]
       path_mount+0x1326/0x1e20 fs/namespace.c:3475
       do_mount fs/namespace.c:3488 [inline]
       __do_sys_mount fs/namespace.c:3696 [inline]
       __se_sys_mount fs/namespace.c:3673 [inline]
       __x64_sys_mount+0x27f/0x300 fs/namespace.c:3673
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

-> #0 (&type->i_mutex_dir_key#6){+.+.}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:3097 [inline]
       check_prevs_add kernel/locking/lockdep.c:3216 [inline]
       validate_chain kernel/locking/lockdep.c:3831 [inline]
       __lock_acquire+0x2a43/0x56d0 kernel/locking/lockdep.c:5055
       lock_acquire kernel/locking/lockdep.c:5668 [inline]
       lock_acquire+0x1df/0x630 kernel/locking/lockdep.c:5633
       down_write+0x90/0x220 kernel/locking/rwsem.c:1562
       inode_lock include/linux/fs.h:756 [inline]
       vfs_fileattr_set+0x148/0xbe0 fs/ioctl.c:681
       ioctl_fssetxattr fs/ioctl.c:758 [inline]
       do_vfs_ioctl+0xe46/0x1580 fs/ioctl.c:845
       __do_sys_ioctl fs/ioctl.c:868 [inline]
       __se_sys_ioctl fs/ioctl.c:856 [inline]
       __x64_sys_ioctl+0x108/0x200 fs/ioctl.c:856
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

other info that might help us debug this:

Chain exists of:
  &type->i_mutex_dir_key#6 --> &sbi->lock --> sb_writers#9

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(sb_writers#9);
                               lock(&sbi->lock);
                               lock(sb_writers#9);
  lock(&type->i_mutex_dir_key#6);

 *** DEADLOCK ***

1 lock held by syz-executor405/5247:
 #0: ffff88802ac5a460 (sb_writers#9){.+.+}-{0:0}, at: ioctl_setflags fs/ioctl.c:725 [inline]
 #0: ffff88802ac5a460 (sb_writers#9){.+.+}-{0:0}, at: do_vfs_ioctl+0xe0b/0x1580 fs/ioctl.c:839

stack backtrace:
CPU: 0 PID: 5247 Comm: syz-executor405 Not tainted 6.1.0-rc4-next-20221111-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
 check_noncircular+0x25f/0x2e0 kernel/locking/lockdep.c:2177
 check_prev_add kernel/locking/lockdep.c:3097 [inline]
 check_prevs_add kernel/locking/lockdep.c:3216 [inline]
 validate_chain kernel/locking/lockdep.c:3831 [inline]
 __lock_acquire+0x2a43/0x56d0 kernel/locking/lockdep.c:5055
 lock_acquire kernel/locking/lockdep.c:5668 [inline]
 lock_acquire+0x1df/0x630 kernel/locking/lockdep.c:5633
 down_write+0x90/0x220 kernel/locking/rwsem.c:1562
 inode_lock include/linux/fs.h:756 [inline]
 vfs_fileattr_set+0x148/0xbe0 fs/ioctl.c:681
 ioctl_fssetxattr fs/ioctl.c:758 [inline]
 do_vfs_ioctl+0xe46/0x1580 fs/ioctl.c:845
 __do_sys_ioctl fs/ioctl.c:868 [inline]
 __se_sys_ioctl fs/ioctl.c:856 [inline]
 __x64_sys_ioctl+0x108/0x200 fs/ioctl.c:856
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x63/0xcd
RIP: 0033:0x7fceb6e16899
Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007ffcd70f3258 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fceb6e16899
RDX: 0000000020000600 RSI: 0000000040086602 RDI: 0000000000000005
RBP: 0000000000000000 R08: 00007fceb6e84ec0 R09: 00007fceb6e84ec0
R10: 0000000000000000 R11: 0000000000000246 R12: 00007ffcd70f3280
R13: 0000000000000000 R14: 431bde82d7b634db R15: 0000000000000000
 </TASK>
