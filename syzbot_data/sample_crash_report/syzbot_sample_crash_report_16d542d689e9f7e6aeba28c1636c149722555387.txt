general protection fault, probably for non-canonical address 0xdffffc0000000002: 0000 [#1] PREEMPT SMP KASAN
KASAN: null-ptr-deref in range [0x0000000000000010-0x0000000000000017]
CPU: 1 PID: 5094 Comm: syz-executor205 Not tainted 6.2.0-rc4-next-20230117-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/12/2023
RIP: 0010:s_show+0x6d/0xa90 mm/vmalloc.c:4243
Code: 74 24 08 49 8b 5e 10 48 85 db 0f 84 1b 05 00 00 e8 48 98 bf ff 48 8d 7b 10 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 35 09 00 00 48 8d 7b 08 4c 8b 43 10 48 b8 00 00
RSP: 0018:ffffc90003d1f9d8 EFLAGS: 00010202
RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
RDX: 0000000000000002 RSI: ffffffff81c23c18 RDI: 0000000000000010
RBP: ffff888021a736f0 R08: 0000000000000007 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
R13: 0000000000007c07 R14: ffff888028ca8980 R15: ffffffff8a589ba0
FS:  0000555555e67300(0000) GS:ffff8880b9900000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00007f609a0d8130 CR3: 000000007779b000 CR4: 00000000003506e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 <TASK>
 traverse.part.0+0xcf/0x5f0 fs/seq_file.c:111
 traverse fs/seq_file.c:101 [inline]
 seq_read_iter+0x913/0x1280 fs/seq_file.c:195
 proc_reg_read_iter+0x1ff/0x2d0 fs/proc/inode.c:305
 call_read_iter include/linux/fs.h:1846 [inline]
 do_iter_readv_writev+0x2e0/0x3b0 fs/read_write.c:733
 do_iter_read+0x2f2/0x750 fs/read_write.c:796
 vfs_readv+0xe5/0x150 fs/read_write.c:916
 do_preadv fs/read_write.c:1008 [inline]
 __do_sys_preadv fs/read_write.c:1058 [inline]
 __se_sys_preadv fs/read_write.c:1053 [inline]
 __x64_sys_preadv+0x22f/0x310 fs/read_write.c:1053
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x63/0xcd
RIP: 0033:0x7f609a067e19
Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 b1 14 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007ffe66bc5d68 EFLAGS: 00000246 ORIG_RAX: 0000000000000127
RAX: ffffffffffffffda RBX: 00000000000f4240 RCX: 00007f609a067e19
RDX: 0000000000000001 RSI: 00000000200020c0 RDI: 0000000000000003
RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000001
R10: 00000000ffff7fff R11: 0000000000000246 R12: 000000000000f33b
R13: 00007ffe66bc5d7c R14: 00007ffe66bc5d90 R15: 00007ffe66bc5d80
 </TASK>
Modules linked in:
---[ end trace 0000000000000000 ]---
RIP: 0010:s_show+0x6d/0xa90 mm/vmalloc.c:4243
Code: 74 24 08 49 8b 5e 10 48 85 db 0f 84 1b 05 00 00 e8 48 98 bf ff 48 8d 7b 10 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 35 09 00 00 48 8d 7b 08 4c 8b 43 10 48 b8 00 00
RSP: 0018:ffffc90003d1f9d8 EFLAGS: 00010202
RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
RDX: 0000000000000002 RSI: ffffffff81c23c18 RDI: 0000000000000010
RBP: ffff888021a736f0 R08: 0000000000000007 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
R13: 0000000000007c07 R14: ffff888028ca8980 R15: ffffffff8a589ba0
FS:  0000555555e67300(0000) GS:ffff8880b9900000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00007f609a0d8130 CR3: 000000007779b000 CR4: 00000000003506e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
----------------
Code disassembly (best guess), 1 bytes skipped:
   0:	24 08                	and    $0x8,%al
   2:	49 8b 5e 10          	mov    0x10(%r14),%rbx
   6:	48 85 db             	test   %rbx,%rbx
   9:	0f 84 1b 05 00 00    	je     0x52a
   f:	e8 48 98 bf ff       	callq  0xffbf985c
  14:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
  18:	48 b8 00 00 00 00 00 	movabs $0xdffffc0000000000,%rax
  1f:	fc ff df
  22:	48 89 fa             	mov    %rdi,%rdx
  25:	48 c1 ea 03          	shr    $0x3,%rdx
* 29:	80 3c 02 00          	cmpb   $0x0,(%rdx,%rax,1) <-- trapping instruction
  2d:	0f 85 35 09 00 00    	jne    0x968
  33:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
  37:	4c 8b 43 10          	mov    0x10(%rbx),%r8
  3b:	48                   	rex.W
  3c:	b8                   	.byte 0xb8
