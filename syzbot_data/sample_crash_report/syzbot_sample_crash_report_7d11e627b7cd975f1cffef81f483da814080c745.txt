======================================================
WARNING: possible circular locking dependency detected
6.2.0-rc7-syzkaller-00208-gd12aca5c0cee #0 Not tainted
------------------------------------------------------
syz-executor132/5083 is trying to acquire lock:
ffff8880761c2080 (&iint->mutex){+.+.}-{3:3}, at: process_measurement+0x7a3/0x1c30 security/integrity/ima/ima_main.c:260

but task is already holding lock:
ffff88802adc6460 (sb_writers#4){.+.+}-{0:0}, at: mnt_want_write+0x3f/0x90 fs/namespace.c:508

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #1 (sb_writers#4){.+.+}-{0:0}:
       lock_acquire+0x235/0x630 kernel/locking/lockdep.c:5668
       percpu_down_read include/linux/percpu-rwsem.h:51 [inline]
       __sb_start_write include/linux/fs.h:1814 [inline]
       sb_start_write+0x4d/0x1a0 include/linux/fs.h:1889
       mnt_want_write+0x3f/0x90 fs/namespace.c:508
       ovl_maybe_copy_up+0x115/0x180 fs/overlayfs/copy_up.c:1125
       ovl_open+0x10c/0x2b0 fs/overlayfs/file.c:153
       do_dentry_open+0x7f9/0x10f0 fs/open.c:882
       vfs_open fs/open.c:1013 [inline]
       dentry_open+0xc5/0x120 fs/open.c:1029
       ima_calc_file_hash+0x15d/0x1c00 security/integrity/ima/ima_crypto.c:558
       ima_collect_measurement+0x4cd/0x930 security/integrity/ima/ima_api.c:292
       process_measurement+0xf83/0x1c30 security/integrity/ima/ima_main.c:339
       ima_file_check+0xec/0x170 security/integrity/ima/ima_main.c:519
       do_open fs/namei.c:3559 [inline]
       path_openat+0x265d/0x2e40 fs/namei.c:3714
       do_filp_open+0x234/0x490 fs/namei.c:3741
       do_sys_openat2+0x13f/0x500 fs/open.c:1310
       do_sys_open fs/open.c:1326 [inline]
       __do_sys_open fs/open.c:1334 [inline]
       __se_sys_open fs/open.c:1330 [inline]
       __x64_sys_open+0x225/0x270 fs/open.c:1330
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

-> #0 (&iint->mutex){+.+.}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:3097 [inline]
       check_prevs_add kernel/locking/lockdep.c:3216 [inline]
       validate_chain+0x166b/0x58e0 kernel/locking/lockdep.c:3831
       __lock_acquire+0x125b/0x1f80 kernel/locking/lockdep.c:5055
       lock_acquire+0x235/0x630 kernel/locking/lockdep.c:5668
       __mutex_lock_common+0x1d8/0x2530 kernel/locking/mutex.c:603
       __mutex_lock kernel/locking/mutex.c:747 [inline]
       mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799
       process_measurement+0x7a3/0x1c30 security/integrity/ima/ima_main.c:260
       ima_file_check+0xec/0x170 security/integrity/ima/ima_main.c:519
       do_open fs/namei.c:3559 [inline]
       path_openat+0x265d/0x2e40 fs/namei.c:3714
       do_filp_open+0x234/0x490 fs/namei.c:3741
       do_sys_openat2+0x13f/0x500 fs/open.c:1310
       do_sys_open fs/open.c:1326 [inline]
       __do_sys_open fs/open.c:1334 [inline]
       __se_sys_open fs/open.c:1330 [inline]
       __x64_sys_open+0x225/0x270 fs/open.c:1330
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

other info that might help us debug this:

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(sb_writers#4);
                               lock(&iint->mutex);
                               lock(sb_writers#4);
  lock(&iint->mutex);

 *** DEADLOCK ***

1 lock held by syz-executor132/5083:
 #0: ffff88802adc6460 (sb_writers#4){.+.+}-{0:0}, at: mnt_want_write+0x3f/0x90 fs/namespace.c:508

stack backtrace:
CPU: 0 PID: 5083 Comm: syz-executor132 Not tainted 6.2.0-rc7-syzkaller-00208-gd12aca5c0cee #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/21/2023
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x1e7/0x2d0 lib/dump_stack.c:106
 check_noncircular+0x2fe/0x3b0 kernel/locking/lockdep.c:2177
 check_prev_add kernel/locking/lockdep.c:3097 [inline]
 check_prevs_add kernel/locking/lockdep.c:3216 [inline]
 validate_chain+0x166b/0x58e0 kernel/locking/lockdep.c:3831
 __lock_acquire+0x125b/0x1f80 kernel/locking/lockdep.c:5055
 lock_acquire+0x235/0x630 kernel/locking/lockdep.c:5668
 __mutex_lock_common+0x1d8/0x2530 kernel/locking/mutex.c:603
 __mutex_lock kernel/locking/mutex.c:747 [inline]
 mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799
 process_measurement+0x7a3/0x1c30 security/integrity/ima/ima_main.c:260
 ima_file_check+0xec/0x170 security/integrity/ima/ima_main.c:519
 do_open fs/namei.c:3559 [inline]
 path_openat+0x265d/0x2e40 fs/namei.c:3714
 do_filp_open+0x234/0x490 fs/namei.c:3741
 do_sys_openat2+0x13f/0x500 fs/open.c:1310
 do_sys_open fs/open.c:1326 [inline]
 __do_sys_open fs/open.c:1334 [inline]
 __se_sys_open fs/open.c:1330 [inline]
 __x64_sys_open+0x225/0x270 fs/open.c:1330
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x63/0xcd
RIP: 0033:0x7f36c6aaab59
Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 11 15 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fffed771878 EFLAGS: 00000246 ORIG_RAX: 0000000000000002
RAX: ffffffffffffffda RBX: 0031656c69662f2e RCX: 00007f36c6aaab59
RDX: 0000000000000000 RSI: 000000000014d27e RDI: 0000000020000180
RBP: 0000000000000000 R08: 00007fffed7718a0 R09: 00007fffed7718a0
R10: 00007fffed7718a0 R11: 0000000000000246 R12: 00007fffed77189c
R13: 00007fffed7718d0 R14: 00007fffed7718b0 R15: 0000000000000001
 </TASK>
