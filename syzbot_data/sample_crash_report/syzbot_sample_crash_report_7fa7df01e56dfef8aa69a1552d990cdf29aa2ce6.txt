general protection fault, probably for non-canonical address 0xffff000000000020: 0000 [#1] PREEMPT SMP KASAN
KASAN: maybe wild-memory-access in range [0xfff8200000000100-0xfff8200000000107]
CPU: 1 PID: 55 Comm: kworker/u4:4 Not tainted 6.0.0-rc1-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/22/2022
Workqueue: events_unbound call_usermodehelper_exec_work

RIP: 0010:kmem_cache_alloc_node_trace+0x15b/0x360 mm/slub.c:3307
Code: 02 00 00 48 c1 e8 3a 3b 04 24 0f 85 23 01 00 00 49 8b 3e 40 f6 c7 0f 0f 85 01 02 00 00 45 84 c0 0f 84 fa 01 00 00 41 8b 46 28 <49> 8b 5c 05 00 48 8d 4a 08 4c 89 e8 65 48 0f c7 0f 0f 94 c0 a8 01
RSP: 0000:ffffc900015674c0 EFLAGS: 00010202

RAX: 0000000000000020 RBX: 0000000000000dc0 RCX: 0000000000000000
RDX: 0000000000004509 RSI: 0000000000000dc0 RDI: 000000000003d6e0
RBP: ffffffff81cf3b8f R08: dffffc0000000001 R09: fffffbfff1c4ade6
R10: fffffbfff1c4ade6 R11: 1ffffffff1c4ade5 R12: 0000000000000040
R13: ffff000000000000 R14: ffff888012041640 R15: 0000000000000dc0
FS:  0000000000000000(0000) GS:ffff8880b9b00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000000000000000 CR3: 000000000ca8e000 CR4: 00000000003506e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 <TASK>
 kmalloc_node include/linux/slab.h:618 [inline]
 kzalloc_node include/linux/slab.h:744 [inline]
 __get_vm_area_node+0x13f/0x380 mm/vmalloc.c:2477
 __vmalloc_node_range+0x369/0x1290 mm/vmalloc.c:3156
 alloc_thread_stack_node+0x307/0x500 kernel/fork.c:312
 dup_task_struct+0x8b/0x490 kernel/fork.c:977
 copy_process+0x65b/0x4010 kernel/fork.c:2087
 kernel_clone+0x22f/0x7a0 kernel/fork.c:2673
 user_mode_thread+0x12d/0x190 kernel/fork.c:2742
 call_usermodehelper_exec_work+0x57/0x220 kernel/umh.c:174
 process_one_work+0x81c/0xd10 kernel/workqueue.c:2289
 worker_thread+0xb14/0x1330 kernel/workqueue.c:2436
 kthread+0x266/0x300 kernel/kthread.c:376
 ret_from_fork+0x1f/0x30
 </TASK>
Modules linked in:
----------------
Code disassembly (best guess):
   0:	02 00                	add    (%rax),%al
   2:	00 48 c1             	add    %cl,-0x3f(%rax)
   5:	e8 3a 3b 04 24       	callq  0x24043b44
   a:	0f 85 23 01 00 00    	jne    0x133
  10:	49 8b 3e             	mov    (%r14),%rdi
  13:	40 f6 c7 0f          	test   $0xf,%dil
  17:	0f 85 01 02 00 00    	jne    0x21e
  1d:	45 84 c0             	test   %r8b,%r8b
  20:	0f 84 fa 01 00 00    	je     0x220
  26:	41 8b 46 28          	mov    0x28(%r14),%eax
* 2a:	49 8b 5c 05 00       	mov    0x0(%r13,%rax,1),%rbx <-- trapping instruction
  2f:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  33:	4c 89 e8             	mov    %r13,%rax
  36:	65 48 0f c7 0f       	cmpxchg16b %gs:(%rdi)
  3b:	0f 94 c0             	sete   %al
  3e:	a8 01                	test   $0x1,%al
