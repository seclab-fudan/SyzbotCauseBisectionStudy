======================================================
WARNING: possible circular locking dependency detected
6.3.0-rc7-syzkaller-00136-g6a66fdd29ea1 #0 Not tainted
------------------------------------------------------
syz-executor.3/885 is trying to acquire lock:
ffff88807e0f40f8 (&sbi->alloc_mutex){+.+.}-{3:3}, at: hfsplus_block_allocate+0x9e/0x8b0 fs/hfsplus/bitmap.c:35

but task is already holding lock:
ffff88807d3d8108 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}, at: hfsplus_file_extend+0x1d6/0x1b10 fs/hfsplus/extents.c:457

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #1 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}:
       lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
       __mutex_lock_common+0x1d8/0x2530 kernel/locking/mutex.c:603
       __mutex_lock kernel/locking/mutex.c:747 [inline]
       mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799
       hfsplus_get_block+0x383/0x14e0 fs/hfsplus/extents.c:260
       block_read_full_folio+0x47b/0x1000 fs/buffer.c:2319
       filemap_read_folio+0x19d/0x7a0 mm/filemap.c:2424
       do_read_cache_folio+0x2ee/0x820 mm/filemap.c:3683
       do_read_cache_page+0x32/0x230 mm/filemap.c:3749
       read_mapping_page include/linux/pagemap.h:769 [inline]
       hfsplus_block_allocate+0xee/0x8b0 fs/hfsplus/bitmap.c:37
       hfsplus_file_extend+0xa50/0x1b10 fs/hfsplus/extents.c:468
       hfsplus_get_block+0x406/0x14e0 fs/hfsplus/extents.c:245
       __block_write_begin_int+0x548/0x1a50 fs/buffer.c:2034
       __block_write_begin fs/buffer.c:2084 [inline]
       block_write_begin+0x9c/0x1f0 fs/buffer.c:2145
       cont_write_begin+0x643/0x880 fs/buffer.c:2504
       hfsplus_write_begin+0x8a/0xd0 fs/hfsplus/inode.c:52
       generic_perform_write+0x300/0x5e0 mm/filemap.c:3926
       __generic_file_write_iter+0x17a/0x400 mm/filemap.c:4054
       generic_file_write_iter+0xaf/0x310 mm/filemap.c:4086
       call_write_iter include/linux/fs.h:1851 [inline]
       new_sync_write fs/read_write.c:491 [inline]
       vfs_write+0x7b2/0xbb0 fs/read_write.c:584
       ksys_write+0x1a0/0x2c0 fs/read_write.c:637
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

-> #0 (&sbi->alloc_mutex){+.+.}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:3098 [inline]
       check_prevs_add kernel/locking/lockdep.c:3217 [inline]
       validate_chain+0x166b/0x58e0 kernel/locking/lockdep.c:3832
       __lock_acquire+0x125b/0x1f80 kernel/locking/lockdep.c:5056
       lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
       __mutex_lock_common+0x1d8/0x2530 kernel/locking/mutex.c:603
       __mutex_lock kernel/locking/mutex.c:747 [inline]
       mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799
       hfsplus_block_allocate+0x9e/0x8b0 fs/hfsplus/bitmap.c:35
       hfsplus_file_extend+0xa50/0x1b10 fs/hfsplus/extents.c:468
       hfsplus_bmap_reserve+0x105/0x4e0 fs/hfsplus/btree.c:358
       hfsplus_create_cat+0x1ad/0x1bb0 fs/hfsplus/catalog.c:272
       hfsplus_fill_super+0x13ea/0x1c90 fs/hfsplus/super.c:560
       mount_bdev+0x271/0x3a0 fs/super.c:1380
       legacy_get_tree+0xef/0x190 fs/fs_context.c:610
       vfs_get_tree+0x8c/0x270 fs/super.c:1510
       do_new_mount+0x28f/0xae0 fs/namespace.c:3042
       do_mount fs/namespace.c:3385 [inline]
       __do_sys_mount fs/namespace.c:3594 [inline]
       __se_sys_mount+0x2d9/0x3c0 fs/namespace.c:3571
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

other info that might help us debug this:

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(&HFSPLUS_I(inode)->extents_lock);
                               lock(&sbi->alloc_mutex);
                               lock(&HFSPLUS_I(inode)->extents_lock);
  lock(&sbi->alloc_mutex);

 *** DEADLOCK ***

4 locks held by syz-executor.3/885:
 #0: ffff88807e4500e0 (&type->s_umount_key#52/1){+.+.}-{3:3}, at: alloc_super+0x217/0x930 fs/super.c:228
 #1: ffff88807e0f4198 (&sbi->vh_mutex){+.+.}-{3:3}, at: hfsplus_fill_super+0x137c/0x1c90 fs/hfsplus/super.c:553
 #2: ffff88801c9180b0 (&tree->tree_lock){+.+.}-{3:3}, at: hfsplus_find_init+0x14a/0x1c0
 #3: ffff88807d3d8108 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}, at: hfsplus_file_extend+0x1d6/0x1b10 fs/hfsplus/extents.c:457

stack backtrace:
CPU: 1 PID: 885 Comm: syz-executor.3 Not tainted 6.3.0-rc7-syzkaller-00136-g6a66fdd29ea1 #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/30/2023
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x1e7/0x2d0 lib/dump_stack.c:106
 check_noncircular+0x2fe/0x3b0 kernel/locking/lockdep.c:2178
 check_prev_add kernel/locking/lockdep.c:3098 [inline]
 check_prevs_add kernel/locking/lockdep.c:3217 [inline]
 validate_chain+0x166b/0x58e0 kernel/locking/lockdep.c:3832
 __lock_acquire+0x125b/0x1f80 kernel/locking/lockdep.c:5056
 lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
 __mutex_lock_common+0x1d8/0x2530 kernel/locking/mutex.c:603
 __mutex_lock kernel/locking/mutex.c:747 [inline]
 mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799
 hfsplus_block_allocate+0x9e/0x8b0 fs/hfsplus/bitmap.c:35
 hfsplus_file_extend+0xa50/0x1b10 fs/hfsplus/extents.c:468
 hfsplus_bmap_reserve+0x105/0x4e0 fs/hfsplus/btree.c:358
 hfsplus_create_cat+0x1ad/0x1bb0 fs/hfsplus/catalog.c:272
 hfsplus_fill_super+0x13ea/0x1c90 fs/hfsplus/super.c:560
 mount_bdev+0x271/0x3a0 fs/super.c:1380
 legacy_get_tree+0xef/0x190 fs/fs_context.c:610
 vfs_get_tree+0x8c/0x270 fs/super.c:1510
 do_new_mount+0x28f/0xae0 fs/namespace.c:3042
 do_mount fs/namespace.c:3385 [inline]
 __do_sys_mount fs/namespace.c:3594 [inline]
 __se_sys_mount+0x2d9/0x3c0 fs/namespace.c:3571
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x63/0xcd
RIP: 0033:0x7fbe82a8d69a
Code: 48 c7 c2 b8 ff ff ff f7 d8 64 89 02 b8 ff ff ff ff eb d2 e8 b8 04 00 00 0f 1f 84 00 00 00 00 00 49 89 ca b8 a5 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fbe83805f88 EFLAGS: 00000202 ORIG_RAX: 00000000000000a5
RAX: ffffffffffffffda RBX: 0000000000000673 RCX: 00007fbe82a8d69a
RDX: 0000000020000600 RSI: 00000000200000c0 RDI: 00007fbe83805fe0
RBP: 00007fbe83806020 R08: 00007fbe83806020 R09: 0000000002200016
R10: 0000000002200016 R11: 0000000000000202 R12: 0000000020000600
R13: 00000000200000c0 R14: 00007fbe83805fe0 R15: 0000000020000180
 </TASK>
