======================================================
WARNING: possible circular locking dependency detected
6.3.0-rc7-syzkaller-00043-gaf67688dca57 #0 Not tainted
------------------------------------------------------
syz-executor.5/11840 is trying to acquire lock:
ffff888080516520 (mapping.invalidate_lock#8){++++}-{3:3}, at: filemap_invalidate_lock_shared include/linux/fs.h:813 [inline]
ffff888080516520 (mapping.invalidate_lock#8){++++}-{3:3}, at: page_cache_ra_unbounded+0xf1/0x7c0 mm/readahead.c:226

but task is already holding lock:
ffff88807d88b798 (&mm->mmap_lock){++++}-{3:3}, at: mmap_read_lock include/linux/mmap_lock.h:117 [inline]
ffff88807d88b798 (&mm->mmap_lock){++++}-{3:3}, at: do_user_addr_fault arch/x86/mm/fault.c:1358 [inline]
ffff88807d88b798 (&mm->mmap_lock){++++}-{3:3}, at: handle_page_fault arch/x86/mm/fault.c:1498 [inline]
ffff88807d88b798 (&mm->mmap_lock){++++}-{3:3}, at: exc_page_fault+0x486/0x7c0 arch/x86/mm/fault.c:1554

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #2 (&mm->mmap_lock){++++}-{3:3}:
       lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
       __might_fault+0xba/0x120 mm/memory.c:5639
       _copy_to_user+0x2a/0x130 lib/usercopy.c:36
       copy_to_user include/linux/uaccess.h:169 [inline]
       fiemap_fill_next_extent+0x235/0x410 fs/ioctl.c:144
       ni_fiemap+0x9b2/0x1230 fs/ntfs3/frecord.c:2040
       ntfs_fiemap+0x132/0x180 fs/ntfs3/file.c:1150
       ioctl_fiemap fs/ioctl.c:219 [inline]
       do_vfs_ioctl+0x19ba/0x2b10 fs/ioctl.c:810
       __do_sys_ioctl fs/ioctl.c:868 [inline]
       __se_sys_ioctl+0x81/0x160 fs/ioctl.c:856
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

-> #1 (&ni->file.run_lock#3){++++}-{3:3}:
       lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
       down_read+0x3d/0x50 kernel/locking/rwsem.c:1520
       attr_data_get_block+0x2e7/0x2da0 fs/ntfs3/attrib.c:903
       ntfs_get_block_vbo+0x36a/0xd00 fs/ntfs3/inode.c:573
       do_mpage_readpage+0x911/0x1fa0 fs/mpage.c:208
       mpage_read_folio+0x108/0x1d0 fs/mpage.c:374
       filemap_read_folio+0x19d/0x7a0 mm/filemap.c:2424
       filemap_create_folio mm/filemap.c:2552 [inline]
       filemap_get_pages+0xdf7/0x20c0 mm/filemap.c:2605
       filemap_read+0x45a/0x1170 mm/filemap.c:2693
       call_read_iter include/linux/fs.h:1845 [inline]
       generic_file_splice_read+0x240/0x640 fs/splice.c:402
       do_splice_to fs/splice.c:885 [inline]
       splice_direct_to_actor+0x40c/0xbd0 fs/splice.c:956
       do_splice_direct+0x283/0x3d0 fs/splice.c:1065
       do_sendfile+0x620/0xff0 fs/read_write.c:1255
       __do_sys_sendfile64 fs/read_write.c:1323 [inline]
       __se_sys_sendfile64+0x17c/0x1e0 fs/read_write.c:1309
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

-> #0 (mapping.invalidate_lock#8){++++}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:3098 [inline]
       check_prevs_add kernel/locking/lockdep.c:3217 [inline]
       validate_chain+0x166b/0x58e0 kernel/locking/lockdep.c:3832
       __lock_acquire+0x125b/0x1f80 kernel/locking/lockdep.c:5056
       lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
       down_read+0x3d/0x50 kernel/locking/rwsem.c:1520
       filemap_invalidate_lock_shared include/linux/fs.h:813 [inline]
       page_cache_ra_unbounded+0xf1/0x7c0 mm/readahead.c:226
       do_sync_mmap_readahead+0x7b2/0x990 mm/filemap.c:3190
       filemap_fault+0x817/0x1800 mm/filemap.c:3282
       __do_fault+0x136/0x500 mm/memory.c:4155
       do_read_fault mm/memory.c:4506 [inline]
       do_fault mm/memory.c:4635 [inline]
       handle_pte_fault mm/memory.c:4923 [inline]
       __handle_mm_fault mm/memory.c:5065 [inline]
       handle_mm_fault+0x3357/0x51c0 mm/memory.c:5211
       do_user_addr_fault arch/x86/mm/fault.c:1407 [inline]
       handle_page_fault arch/x86/mm/fault.c:1498 [inline]
       exc_page_fault+0x5b1/0x7c0 arch/x86/mm/fault.c:1554
       asm_exc_page_fault+0x26/0x30 arch/x86/include/asm/idtentry.h:570
       strncpy_from_user+0x15d/0x370 lib/strncpy_from_user.c:139
       getname_flags+0xf9/0x4e0 fs/namei.c:151
       do_sys_openat2+0xd6/0x500 fs/open.c:1342
       do_sys_open fs/open.c:1364 [inline]
       __do_sys_creat fs/open.c:1440 [inline]
       __se_sys_creat fs/open.c:1434 [inline]
       __x64_sys_creat+0x123/0x160 fs/open.c:1434
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd

other info that might help us debug this:

Chain exists of:
  mapping.invalidate_lock#8 --> &ni->file.run_lock#3 --> &mm->mmap_lock

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(&mm->mmap_lock);
                               lock(&ni->file.run_lock#3);
                               lock(&mm->mmap_lock);
  lock(mapping.invalidate_lock#8);

 *** DEADLOCK ***

1 lock held by syz-executor.5/11840:
 #0: ffff88807d88b798 (&mm->mmap_lock){++++}-{3:3}, at: mmap_read_lock include/linux/mmap_lock.h:117 [inline]
 #0: ffff88807d88b798 (&mm->mmap_lock){++++}-{3:3}, at: do_user_addr_fault arch/x86/mm/fault.c:1358 [inline]
 #0: ffff88807d88b798 (&mm->mmap_lock){++++}-{3:3}, at: handle_page_fault arch/x86/mm/fault.c:1498 [inline]
 #0: ffff88807d88b798 (&mm->mmap_lock){++++}-{3:3}, at: exc_page_fault+0x486/0x7c0 arch/x86/mm/fault.c:1554

stack backtrace:
CPU: 0 PID: 11840 Comm: syz-executor.5 Not tainted 6.3.0-rc7-syzkaller-00043-gaf67688dca57 #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/30/2023
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x1e7/0x2d0 lib/dump_stack.c:106
 check_noncircular+0x2fe/0x3b0 kernel/locking/lockdep.c:2178
 check_prev_add kernel/locking/lockdep.c:3098 [inline]
 check_prevs_add kernel/locking/lockdep.c:3217 [inline]
 validate_chain+0x166b/0x58e0 kernel/locking/lockdep.c:3832
 __lock_acquire+0x125b/0x1f80 kernel/locking/lockdep.c:5056
 lock_acquire+0x1e1/0x520 kernel/locking/lockdep.c:5669
 down_read+0x3d/0x50 kernel/locking/rwsem.c:1520
 filemap_invalidate_lock_shared include/linux/fs.h:813 [inline]
 page_cache_ra_unbounded+0xf1/0x7c0 mm/readahead.c:226
 do_sync_mmap_readahead+0x7b2/0x990 mm/filemap.c:3190
 filemap_fault+0x817/0x1800 mm/filemap.c:3282
 __do_fault+0x136/0x500 mm/memory.c:4155
 do_read_fault mm/memory.c:4506 [inline]
 do_fault mm/memory.c:4635 [inline]
 handle_pte_fault mm/memory.c:4923 [inline]
 __handle_mm_fault mm/memory.c:5065 [inline]
 handle_mm_fault+0x3357/0x51c0 mm/memory.c:5211
 do_user_addr_fault arch/x86/mm/fault.c:1407 [inline]
 handle_page_fault arch/x86/mm/fault.c:1498 [inline]
 exc_page_fault+0x5b1/0x7c0 arch/x86/mm/fault.c:1554
 asm_exc_page_fault+0x26/0x30 arch/x86/include/asm/idtentry.h:570
RIP: 0010:do_strncpy_from_user lib/strncpy_from_user.c:41 [inline]
RIP: 0010:strncpy_from_user+0x15d/0x370 lib/strncpy_from_user.c:139
Code: 21 fd 48 83 fd 07 0f 86 af 00 00 00 4c 89 64 24 08 4c 89 7c 24 10 48 c7 44 24 18 f8 ff ff ff 45 31 ed 4d 89 f4 48 8b 44 24 08 <4e> 8b 3c 28 48 b8 ff fe fe fe fe fe fe fe 49 8d 1c 07 4d 89 fe 49
RSP: 0018:ffffc90005cffcb0 EFLAGS: 00050246
RAX: 0000000020000040 RBX: 00007fffffffe020 RCX: ffff8880765f57c0
RDX: ffffc900051f9000 RSI: 0000000000000fe0 RDI: 0000000000000007
RBP: 0000000000000fe0 R08: ffffffff8468cb75 R09: fffff940002aacc1
R10: 0000000000000000 R11: dffffc0000000001 R12: ffff88805559e620
R13: 0000000000000000 R14: ffff88805559e620 R15: 0000000000000fe0
 getname_flags+0xf9/0x4e0 fs/namei.c:151
 do_sys_openat2+0xd6/0x500 fs/open.c:1342
 do_sys_open fs/open.c:1364 [inline]
 __do_sys_creat fs/open.c:1440 [inline]
 __se_sys_creat fs/open.c:1434 [inline]
 __x64_sys_creat+0x123/0x160 fs/open.c:1434
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x63/0xcd
RIP: 0033:0x7f7c8148c169
Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 f1 19 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007f7c82215168 EFLAGS: 00000246 ORIG_RAX: 0000000000000055
RAX: ffffffffffffffda RBX: 00007f7c815ac050 RCX: 00007f7c8148c169
RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000040
RBP: 00007f7c814e7ca1 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
R13: 00007ffcf1455b2f R14: 00007f7c82215300 R15: 0000000000022000
 </TASK>
----------------
Code disassembly (best guess):
   0:	21 fd                	and    %edi,%ebp
   2:	48 83 fd 07          	cmp    $0x7,%rbp
   6:	0f 86 af 00 00 00    	jbe    0xbb
   c:	4c 89 64 24 08       	mov    %r12,0x8(%rsp)
  11:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
  16:	48 c7 44 24 18 f8 ff 	movq   $0xfffffffffffffff8,0x18(%rsp)
  1d:	ff ff
  1f:	45 31 ed             	xor    %r13d,%r13d
  22:	4d 89 f4             	mov    %r14,%r12
  25:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
* 2a:	4e 8b 3c 28          	mov    (%rax,%r13,1),%r15 <-- trapping instruction
  2e:	48 b8 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%rax
  35:	fe fe fe
  38:	49 8d 1c 07          	lea    (%r15,%rax,1),%rbx
  3c:	4d 89 fe             	mov    %r15,%r14
  3f:	49                   	rex.WB
