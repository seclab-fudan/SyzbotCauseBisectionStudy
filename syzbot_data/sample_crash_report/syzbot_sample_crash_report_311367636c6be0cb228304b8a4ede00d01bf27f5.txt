======================================================
WARNING: possible circular locking dependency detected
5.8.0-rc2-syzkaller #0 Not tainted
------------------------------------------------------
syz-executor388/6810 is trying to acquire lock:
ffff88809f4b12c0 (&iint->mutex){+.+.}-{3:3}, at: process_measurement+0x363/0x1760 security/integrity/ima/ima_main.c:247

but task is already holding lock:
ffff888214b78450 (sb_writers#4){.+.+}-{0:0}, at: sb_start_write include/linux/fs.h:1664 [inline]
ffff888214b78450 (sb_writers#4){.+.+}-{0:0}, at: mnt_want_write+0x3a/0xb0 fs/namespace.c:354

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #1 (sb_writers#4){.+.+}-{0:0}:
       percpu_down_read include/linux/percpu-rwsem.h:51 [inline]
       __sb_start_write+0x234/0x470 fs/super.c:1672
       sb_start_write include/linux/fs.h:1664 [inline]
       mnt_want_write+0x3a/0xb0 fs/namespace.c:354
       ovl_maybe_copy_up+0x11f/0x190 fs/overlayfs/copy_up.c:961
       ovl_open+0xba/0x270 fs/overlayfs/file.c:145
       do_dentry_open+0x501/0x1290 fs/open.c:828
       vfs_open fs/open.c:942 [inline]
       dentry_open+0x132/0x1d0 fs/open.c:958
       ima_calc_file_hash+0x32b/0x570 security/integrity/ima/ima_crypto.c:557
       ima_collect_measurement+0x4ca/0x570 security/integrity/ima/ima_api.c:250
       process_measurement+0xca6/0x1760 security/integrity/ima/ima_main.c:324
       ima_file_check+0xb9/0x100 security/integrity/ima/ima_main.c:492
       do_open fs/namei.c:3245 [inline]
       path_openat+0x156c/0x2750 fs/namei.c:3360
       do_filp_open+0x17e/0x3c0 fs/namei.c:3387
       do_sys_openat2+0x16f/0x3b0 fs/open.c:1179
       do_sys_open fs/open.c:1195 [inline]
       ksys_open include/linux/syscalls.h:1388 [inline]
       __do_sys_open fs/open.c:1201 [inline]
       __se_sys_open fs/open.c:1199 [inline]
       __x64_sys_open+0x119/0x1c0 fs/open.c:1199
       do_syscall_64+0x60/0xe0 arch/x86/entry/common.c:359
       entry_SYSCALL_64_after_hwframe+0x44/0xa9

-> #0 (&iint->mutex){+.+.}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:2496 [inline]
       check_prevs_add kernel/locking/lockdep.c:2601 [inline]
       validate_chain kernel/locking/lockdep.c:3218 [inline]
       __lock_acquire+0x2acb/0x56e0 kernel/locking/lockdep.c:4380
       lock_acquire+0x1f1/0xad0 kernel/locking/lockdep.c:4959
       __mutex_lock_common kernel/locking/mutex.c:956 [inline]
       __mutex_lock+0x134/0x10d0 kernel/locking/mutex.c:1103
       process_measurement+0x363/0x1760 security/integrity/ima/ima_main.c:247
       ima_file_check+0xb9/0x100 security/integrity/ima/ima_main.c:492
       do_open fs/namei.c:3245 [inline]
       path_openat+0x156c/0x2750 fs/namei.c:3360
       do_filp_open+0x17e/0x3c0 fs/namei.c:3387
       do_sys_openat2+0x16f/0x3b0 fs/open.c:1179
       do_sys_open fs/open.c:1195 [inline]
       __do_sys_openat fs/open.c:1209 [inline]
       __se_sys_openat fs/open.c:1204 [inline]
       __x64_sys_openat+0x13f/0x1f0 fs/open.c:1204
       do_syscall_64+0x60/0xe0 arch/x86/entry/common.c:359
       entry_SYSCALL_64_after_hwframe+0x44/0xa9

other info that might help us debug this:

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(sb_writers#4);
                               lock(&iint->mutex);
                               lock(sb_writers#4);
  lock(&iint->mutex);

 *** DEADLOCK ***

1 lock held by syz-executor388/6810:
 #0: ffff888214b78450 (sb_writers#4){.+.+}-{0:0}, at: sb_start_write include/linux/fs.h:1664 [inline]
 #0: ffff888214b78450 (sb_writers#4){.+.+}-{0:0}, at: mnt_want_write+0x3a/0xb0 fs/namespace.c:354

stack backtrace:
CPU: 0 PID: 6810 Comm: syz-executor388 Not tainted 5.8.0-rc2-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x18f/0x20d lib/dump_stack.c:118
 check_noncircular+0x324/0x3e0 kernel/locking/lockdep.c:1827
 check_prev_add kernel/locking/lockdep.c:2496 [inline]
 check_prevs_add kernel/locking/lockdep.c:2601 [inline]
 validate_chain kernel/locking/lockdep.c:3218 [inline]
 __lock_acquire+0x2acb/0x56e0 kernel/locking/lockdep.c:4380
 lock_acquire+0x1f1/0xad0 kernel/locking/lockdep.c:4959
 __mutex_lock_common kernel/locking/mutex.c:956 [inline]
 __mutex_lock+0x134/0x10d0 kernel/locking/mutex.c:1103
 process_measurement+0x363/0x1760 security/integrity/ima/ima_main.c:247
 ima_file_check+0xb9/0x100 security/integrity/ima/ima_main.c:492
 do_open fs/namei.c:3245 [inline]
 path_openat+0x156c/0x2750 fs/namei.c:3360
 do_filp_open+0x17e/0x3c0 fs/namei.c:3387
 do_sys_openat2+0x16f/0x3b0 fs/open.c:1179
 do_sys_open fs/open.c:1195 [inline]
 __do_sys_openat fs/open.c:1209 [inline]
 __se_sys_openat fs/open.c:1204 [inline]
 __x64_sys_openat+0x13f/0x1f0 fs/open.c:1204
 do_syscall_64+0x60/0xe0 arch/x86/entry/common.c:359
 entry_SYSCALL_64_after_hwframe+0x44/0xa9
RIP: 0033:0x445a99
Code: Bad RIP value.
RSP: 002b:00007f1417523db8 EFLAGS: 00000246 ORIG_RAX: 0000000000000101
RAX: ffffffffffffffda RBX: 00000000006dac48 RCX: 0000000000445a99
RDX: 000000000000275a RSI: 00000000200001c0 RDI: 00000000ffffff9c
RBP: 00000000006dac40 R08: 00007f1417524700 R09: 0000000000000000
R10: 0
