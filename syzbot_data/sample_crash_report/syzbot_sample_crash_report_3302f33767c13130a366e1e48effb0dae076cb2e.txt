================================
WARNING: inconsistent lock state
6.0.0-syzkaller-00188-gf3dfe925f954 #0 Not tainted
--------------------------------
inconsistent {HARDIRQ-ON-W} -> {IN-HARDIRQ-W} usage.
kworker/u16:1/12 [HC1[1]:SC0[0]:HE0:SE1] takes:
ffff88800f293418 (&clnt->lock){?.+.}-{2:2}, at: p9_tag_remove net/9p/client.c:367 [inline]
ffff88800f293418 (&clnt->lock){?.+.}-{2:2}, at: p9_req_put net/9p/client.c:375 [inline]
ffff88800f293418 (&clnt->lock){?.+.}-{2:2}, at: p9_req_put+0xc6/0x250 net/9p/client.c:372
{HARDIRQ-ON-W} state was registered at:
  lock_acquire kernel/locking/lockdep.c:5666 [inline]
  lock_acquire+0x1ab/0x570 kernel/locking/lockdep.c:5631
  __raw_spin_lock include/linux/spinlock_api_smp.h:133 [inline]
  _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:154
  spin_lock include/linux/spinlock.h:349 [inline]
  p9_fd_request+0x85/0x330 net/9p/trans_fd.c:672
  p9_client_rpc+0x2f0/0xce0 net/9p/client.c:660
  p9_client_version net/9p/client.c:880 [inline]
  p9_client_create+0xaec/0x1070 net/9p/client.c:985
  v9fs_session_init+0x1e2/0x1810 fs/9p/v9fs.c:408
  v9fs_mount+0xba/0xc90 fs/9p/vfs_super.c:126
  legacy_get_tree+0x105/0x220 fs/fs_context.c:610
  vfs_get_tree+0x89/0x2f0 fs/super.c:1530
  do_new_mount fs/namespace.c:3040 [inline]
  path_mount+0x1326/0x1e20 fs/namespace.c:3370
  do_mount fs/namespace.c:3383 [inline]
  __do_sys_mount fs/namespace.c:3591 [inline]
  __se_sys_mount fs/namespace.c:3568 [inline]
  __x64_sys_mount+0x27f/0x300 fs/namespace.c:3568
  do_syscall_x64 arch/x86/entry/common.c:50 [inline]
  do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
  entry_SYSCALL_64_after_hwframe+0x63/0xcd
irq event stamp: 60024596
hardirqs last  enabled at (60024595): [<ffffffff81484250>] __local_bh_enable_ip+0xa0/0x120 kernel/softirq.c:401
hardirqs last disabled at (60024596): [<ffffffff897fd631>] common_interrupt+0x11/0xc0 arch/x86/kernel/irq.c:240
softirqs last  enabled at (60024594): [<ffffffff89198595>] spin_unlock_bh include/linux/spinlock.h:394 [inline]
softirqs last  enabled at (60024594): [<ffffffff89198595>] batadv_nc_purge_paths+0x2a5/0x3a0 net/batman-adv/network-coding.c:471
softirqs last disabled at (60024592): [<ffffffff891983cf>] spin_lock_bh include/linux/spinlock.h:354 [inline]
softirqs last disabled at (60024592): [<ffffffff891983cf>] batadv_nc_purge_paths+0xdf/0x3a0 net/batman-adv/network-coding.c:442

other info that might help us debug this:
 Possible unsafe locking scenario:

       CPU0
       ----
  lock(&clnt->lock);
  <Interrupt>
    lock(&clnt->lock);

 *** DEADLOCK ***

3 locks held by kworker/u16:1/12:
 #0: ffff888048733938 ((wq_completion)bat_events){+.+.}-{0:0}, at: arch_atomic64_set arch/x86/include/asm/atomic64_64.h:34 [inline]
 #0: ffff888048733938 ((wq_completion)bat_events){+.+.}-{0:0}, at: arch_atomic_long_set include/linux/atomic/atomic-long.h:41 [inline]
 #0: ffff888048733938 ((wq_completion)bat_events){+.+.}-{0:0}, at: atomic_long_set include/linux/atomic/atomic-instrumented.h:1280 [inline]
 #0: ffff888048733938 ((wq_completion)bat_events){+.+.}-{0:0}, at: set_work_data kernel/workqueue.c:636 [inline]
 #0: ffff888048733938 ((wq_completion)bat_events){+.+.}-{0:0}, at: set_work_pool_and_clear_pending kernel/workqueue.c:663 [inline]
 #0: ffff888048733938 ((wq_completion)bat_events){+.+.}-{0:0}, at: process_one_work+0x87a/0x1610 kernel/workqueue.c:2260
 #1: ffffc900005ffda8 ((work_completion)(&(&bat_priv->nc.work)->work)){+.+.}-{0:0}, at: process_one_work+0x8ae/0x1610 kernel/workqueue.c:2264
 #2: ffff888045228020 (&chan->lock#2){-...}-{2:2}, at: req_done+0xcf/0x2e0 net/9p/trans_virtio.c:139

stack backtrace:
CPU: 0 PID: 12 Comm: kworker/u16:1 Not tainted 6.0.0-syzkaller-00188-gf3dfe925f954 #0
Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
Workqueue: bat_events batadv_nc_worker
Call Trace:
 <IRQ>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
 print_usage_bug kernel/locking/lockdep.c:3961 [inline]
 valid_state kernel/locking/lockdep.c:3973 [inline]
 mark_lock_irq kernel/locking/lockdep.c:4176 [inline]
 mark_lock.part.0.cold+0x18/0xd8 kernel/locking/lockdep.c:4632
 mark_lock kernel/locking/lockdep.c:4596 [inline]
 mark_usage kernel/locking/lockdep.c:4524 [inline]
 __lock_acquire+0x14a2/0x56d0 kernel/locking/lockdep.c:5007
 lock_acquire kernel/locking/lockdep.c:5666 [inline]
 lock_acquire+0x1ab/0x570 kernel/locking/lockdep.c:5631
 __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
 _raw_spin_lock_irqsave+0x39/0x50 kernel/locking/spinlock.c:162
 p9_tag_remove net/9p/client.c:367 [inline]
 p9_req_put net/9p/client.c:375 [inline]
 p9_req_put+0xc6/0x250 net/9p/client.c:372
 req_done+0x1de/0x2e0 net/9p/trans_virtio.c:148
 vring_interrupt drivers/virtio/virtio_ring.c:2462 [inline]
 vring_interrupt+0x29d/0x3d0 drivers/virtio/virtio_ring.c:2437
 __handle_irq_event_percpu+0x227/0x870 kernel/irq/handle.c:158
 handle_irq_event_percpu kernel/irq/handle.c:193 [inline]
 handle_irq_event+0xa7/0x1e0 kernel/irq/handle.c:210
 handle_edge_irq+0x25f/0xd00 kernel/irq/chip.c:819
 generic_handle_irq_desc include/linux/irqdesc.h:158 [inline]
 handle_irq arch/x86/kernel/irq.c:231 [inline]
 __common_interrupt+0x9d/0x210 arch/x86/kernel/irq.c:250
 common_interrupt+0xa4/0xc0 arch/x86/kernel/irq.c:240
 </IRQ>
 <TASK>
 asm_common_interrupt+0x22/0x40 arch/x86/include/asm/idtentry.h:640
RIP: 0010:__local_bh_enable_ip+0xa8/0x120 kernel/softirq.c:403
Code: 1d 0d 2d ba 7e 65 8b 05 06 2d ba 7e a9 00 ff ff 00 74 45 bf 01 00 00 00 e8 65 9f 09 00 e8 80 78 39 00 fb 65 8b 05 e8 2c ba 7e <85> c0 74 58 5b 5d c3 65 8b 05 d6 33 ba 7e 85 c0 75 a2 0f 0b eb 9e
RSP: 0018:ffffc900005ffc00 EFLAGS: 00000202
RAX: 0000000080000000 RBX: 00000000fffffe00 RCX: 1ffffffff2127d26
RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
RBP: ffffffff89198595 R08: 0000000000000001 R09: ffffffff908e1a37
R10: 0000000000000001 R11: 0000000000000000 R12: ffff88806e9fd7a8
R13: ffff88806e9fcc80 R14: dffffc0000000000 R15: ffffffff891987f0
 spin_unlock_bh include/linux/spinlock.h:394 [inline]
 batadv_nc_purge_paths+0x2a5/0x3a0 net/batman-adv/network-coding.c:471
 batadv_nc_worker+0x8f9/0xfa0 net/batman-adv/network-coding.c:720
 process_one_work+0x991/0x1610 kernel/workqueue.c:2289
 worker_thread+0x665/0x1080 kernel/workqueue.c:2436
 kthread+0x2e4/0x3a0 kernel/kthread.c:376
 ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
 </TASK>
----------------
Code disassembly (best guess):
   0:	1d 0d 2d ba 7e       	sbb    $0x7eba2d0d,%eax
   5:	65 8b 05 06 2d ba 7e 	mov    %gs:0x7eba2d06(%rip),%eax        # 0x7eba2d12
   c:	a9 00 ff ff 00       	test   $0xffff00,%eax
  11:	74 45                	je     0x58
  13:	bf 01 00 00 00       	mov    $0x1,%edi
  18:	e8 65 9f 09 00       	callq  0x99f82
  1d:	e8 80 78 39 00       	callq  0x3978a2
  22:	fb                   	sti
  23:	65 8b 05 e8 2c ba 7e 	mov    %gs:0x7eba2ce8(%rip),%eax        # 0x7eba2d12
* 2a:	85 c0                	test   %eax,%eax <-- trapping instruction
  2c:	74 58                	je     0x86
  2e:	5b                   	pop    %rbx
  2f:	5d                   	pop    %rbp
  30:	c3                   	retq
  31:	65 8b 05 d6 33 ba 7e 	mov    %gs:0x7eba33d6(%rip),%eax        # 0x7eba340e
  38:	85 c0                	test   %eax,%eax
  3a:	75 a2                	jne    0xffffffde
  3c:	0f 0b                	ud2
  3e:	eb 9e                	jmp    0xffffffde
