bisecting cause commit starting from ed14fc7a79ab43e9f2cb1fa9c1733fdc133bba30
building syzkaller on e13a05ed99be3112220ed09062bd52e1c0a2ffb6
testing commit ed14fc7a79ab43e9f2cb1fa9c1733fdc133bba30
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 643a9e96619849f871eb6b513f2c46bb403fde926890c438fb2ccecbe7902bdd
all runs: crashed: BUG: MAX_LOCK_DEPTH too low!
testing release v5.16
testing commit df0cc57e057f18e44dac8e6c18aba47ab53202f9
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 6392e7dc90e0a4647080a5029d93ca58348fb8a5852ea8aba24fe1cfc2cb5f6d
all runs: OK
# git bisect start ed14fc7a79ab43e9f2cb1fa9c1733fdc133bba30 df0cc57e057f18e44dac8e6c18aba47ab53202f9
Bisecting: 6256 revisions left to test after this (roughly 13 steps)
[9149fe8ba7ff798ea1c6b1fa05eeb59f95f9a94a] Merge tag 'erofs-for-5.17-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs

testing commit 9149fe8ba7ff798ea1c6b1fa05eeb59f95f9a94a
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 7f134a67b45cea8ba8f85ca9afab33d3d0f37a6b940dff276cc15dba9b187b11
all runs: OK
# git bisect good 9149fe8ba7ff798ea1c6b1fa05eeb59f95f9a94a
Bisecting: 3238 revisions left to test after this (roughly 12 steps)
[aee101d7b95a03078945681dd7f7ea5e4a1e7686] powerpc/64s: Mask SRR0 before checking against the masked NIP

testing commit aee101d7b95a03078945681dd7f7ea5e4a1e7686
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: a68128aec9313dc64378d8a41d882039aeb0479f21fcf07352cd83677a6505f7
all runs: OK
# git bisect good aee101d7b95a03078945681dd7f7ea5e4a1e7686
Bisecting: 1611 revisions left to test after this (roughly 11 steps)
[6a8d7fbf1c65034b85e7676b42449a56e4206bd3] Merge tag 'acpi-5.17-rc1-2' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm

testing commit 6a8d7fbf1c65034b85e7676b42449a56e4206bd3
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 8caa6b82df1755ef1d2052bb842bc3b2c35032746f69a31601baa6d1c8276d94
all runs: OK
# git bisect good 6a8d7fbf1c65034b85e7676b42449a56e4206bd3
Bisecting: 810 revisions left to test after this (roughly 10 steps)
[636b5284d8fa12cadbaa09bb7efa48473aa804f5] Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm

testing commit 636b5284d8fa12cadbaa09bb7efa48473aa804f5
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: b7397527ea136e4b4c67e3f5b52d9d01e0df689075b4da0f095ba0f8ce37398f
all runs: OK
# git bisect good 636b5284d8fa12cadbaa09bb7efa48473aa804f5
Bisecting: 405 revisions left to test after this (roughly 9 steps)
[9cef24c8b76c1f6effe499d2f131807c90f7ce9a] net: macsec: Fix offload support for NETDEV_UNREGISTER event

testing commit 9cef24c8b76c1f6effe499d2f131807c90f7ce9a
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: fc2d96641b113f452ae6c239dce3dcc84bb76d08654f6155e089e3c34a372b3c
all runs: crashed: BUG: MAX_LOCK_DEPTH too low!
# git bisect bad 9cef24c8b76c1f6effe499d2f131807c90f7ce9a
Bisecting: 203 revisions left to test after this (roughly 8 steps)
[e783362eb54cd99b2cac8b3a9aeac942e6f6ac07] Linux 5.17-rc1

testing commit e783362eb54cd99b2cac8b3a9aeac942e6f6ac07
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 8f23b525980fbfc505f724cd221a5dc1b3532057bdcbe49165926e4beebddc1a
all runs: OK
# git bisect good e783362eb54cd99b2cac8b3a9aeac942e6f6ac07
Bisecting: 105 revisions left to test after this (roughly 7 steps)
[fd20d9738395cf8e27d0a17eba34169699fccdff] net: bridge: vlan: fix memory leak in __allowed_ingress

testing commit fd20d9738395cf8e27d0a17eba34169699fccdff
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: ba1e3448e529f3c29a213965a643b8b9ec408f97401a852d36b33fa70200c54b
all runs: OK
# git bisect good fd20d9738395cf8e27d0a17eba34169699fccdff
Bisecting: 70 revisions left to test after this (roughly 6 steps)
[aed28b7a2d620cb5cd0c554cb889075c02e25e8e] SUNRPC: Don't dereference xprt->snd_task if it's a cookie

testing commit aed28b7a2d620cb5cd0c554cb889075c02e25e8e
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 37cf0e196388a2a85881c36eac4749bf3c37209a6af2021c32f5541ce9ddb698
all runs: OK
# git bisect good aed28b7a2d620cb5cd0c554cb889075c02e25e8e
Bisecting: 35 revisions left to test after this (roughly 5 steps)
[7938d61591d33394a21bdd7797a245b65428f44c] drm/i915: Flush TLBs before releasing backing store

testing commit 7938d61591d33394a21bdd7797a245b65428f44c
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 1b72110a51c45d5447257494f7f0d7688da60cf4a848eb4aded4a7cc4d1db31a
run #0: basic kernel testing failed: BUG: program execution failed: executor NUM: exit status NUM
run #1: OK
run #2: OK
run #3: OK
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
# git bisect good 7938d61591d33394a21bdd7797a245b65428f44c
Bisecting: 17 revisions left to test after this (roughly 4 steps)
[33d12dc91bc41183003913b888cc492420ae6ef8] Merge git://git.kernel.org/pub/scm/linux/kernel/git/pablo/nf

testing commit 33d12dc91bc41183003913b888cc492420ae6ef8
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 17c11101272a598dc4efa1dddf53aa8c82a5c60f05ccc216bfc8fc60f1662e65
all runs: OK
# git bisect good 33d12dc91bc41183003913b888cc492420ae6ef8
Bisecting: 11 revisions left to test after this (roughly 3 steps)
[5d8a8b324ff48c9d9fe4f1634e33dc647d2481b4] MAINTAINERS: Remove Harry Morris bouncing address

testing commit 5d8a8b324ff48c9d9fe4f1634e33dc647d2481b4
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: b3a118eb42d61cb5b389aac9ed8357e6aa8672ff6c61f6b213709724df7901c3
all runs: OK
# git bisect good 5d8a8b324ff48c9d9fe4f1634e33dc647d2481b4
Bisecting: 5 revisions left to test after this (roughly 3 steps)
[1f84a9450d75e08af70d9e2f2d5e1c0ac0c881d2] gve: fix the wrong AdminQ buffer queue index check

testing commit 1f84a9450d75e08af70d9e2f2d5e1c0ac0c881d2
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 93d8a11ded7446a5a99427e0a1b9ae7f8bd0811a5fe0fd91f45f12ed166fb901
all runs: OK
# git bisect good 1f84a9450d75e08af70d9e2f2d5e1c0ac0c881d2
Bisecting: 2 revisions left to test after this (roughly 2 steps)
[341adeec9adad0874f29a0a1af35638207352a39] net/smc: Forward wakeup to smc socket waitqueue after fallback

testing commit 341adeec9adad0874f29a0a1af35638207352a39
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 4f96a8a12991cb11b0524cbf1eb882252e778ab670c69af45b02493bc5941294
all runs: crashed: BUG: MAX_LOCK_DEPTH too low!
# git bisect bad 341adeec9adad0874f29a0a1af35638207352a39
Bisecting: 0 revisions left to test after this (roughly 1 step)
[6449520391dfc3d2cef134f11a91251a054ff7d0] net: stmmac: properly handle with runtime pm in stmmac_dvr_remove()

testing commit 6449520391dfc3d2cef134f11a91251a054ff7d0
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: cfd7e0da735f209999a1961af908f41f430f1706b67f9aa27cfd1a90d648baaf
all runs: OK
# git bisect good 6449520391dfc3d2cef134f11a91251a054ff7d0
341adeec9adad0874f29a0a1af35638207352a39 is the first bad commit
commit 341adeec9adad0874f29a0a1af35638207352a39
Author: Wen Gu <guwen@linux.alibaba.com>
Date:   Wed Jan 26 23:33:04 2022 +0800

    net/smc: Forward wakeup to smc socket waitqueue after fallback
    
    When we replace TCP with SMC and a fallback occurs, there may be
    some socket waitqueue entries remaining in smc socket->wq, such
    as eppoll_entries inserted by userspace applications.
    
    After the fallback, data flows over TCP/IP and only clcsocket->wq
    will be woken up. Applications can't be notified by the entries
    which were inserted in smc socket->wq before fallback. So we need
    a mechanism to wake up smc socket->wq at the same time if some
    entries remaining in it.
    
    The current workaround is to transfer the entries from smc socket->wq
    to clcsock->wq during the fallback. But this may cause a crash
    like this:
    
     general protection fault, probably for non-canonical address 0xdead000000000100: 0000 [#1] PREEMPT SMP PTI
     CPU: 3 PID: 0 Comm: swapper/3 Kdump: loaded Tainted: G E     5.16.0+ #107
     RIP: 0010:__wake_up_common+0x65/0x170
     Call Trace:
      <IRQ>
      __wake_up_common_lock+0x7a/0xc0
      sock_def_readable+0x3c/0x70
      tcp_data_queue+0x4a7/0xc40
      tcp_rcv_established+0x32f/0x660
      ? sk_filter_trim_cap+0xcb/0x2e0
      tcp_v4_do_rcv+0x10b/0x260
      tcp_v4_rcv+0xd2a/0xde0
      ip_protocol_deliver_rcu+0x3b/0x1d0
      ip_local_deliver_finish+0x54/0x60
      ip_local_deliver+0x6a/0x110
      ? tcp_v4_early_demux+0xa2/0x140
      ? tcp_v4_early_demux+0x10d/0x140
      ip_sublist_rcv_finish+0x49/0x60
      ip_sublist_rcv+0x19d/0x230
      ip_list_rcv+0x13e/0x170
      __netif_receive_skb_list_core+0x1c2/0x240
      netif_receive_skb_list_internal+0x1e6/0x320
      napi_complete_done+0x11d/0x190
      mlx5e_napi_poll+0x163/0x6b0 [mlx5_core]
      __napi_poll+0x3c/0x1b0
      net_rx_action+0x27c/0x300
      __do_softirq+0x114/0x2d2
      irq_exit_rcu+0xb4/0xe0
      common_interrupt+0xba/0xe0
      </IRQ>
      <TASK>
    
    The crash is caused by privately transferring waitqueue entries from
    smc socket->wq to clcsock->wq. The owners of these entries, such as
    epoll, have no idea that the entries have been transferred to a
    different socket wait queue and still use original waitqueue spinlock
    (smc socket->wq.wait.lock) to make the entries operation exclusive,
    but it doesn't work. The operations to the entries, such as removing
    from the waitqueue (now is clcsock->wq after fallback), may cause a
    crash when clcsock waitqueue is being iterated over at the moment.
    
    This patch tries to fix this by no longer transferring wait queue
    entries privately, but introducing own implementations of clcsock's
    callback functions in fallback situation. The callback functions will
    forward the wakeup to smc socket->wq if clcsock->wq is actually woken
    up and smc socket->wq has remaining entries.
    
    Fixes: 2153bd1e3d3d ("net/smc: Transfer remaining wait queue entries during fallback")
    Suggested-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Wen Gu <guwen@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

 net/smc/af_smc.c | 133 ++++++++++++++++++++++++++++++++++++++++++++++++-------
 net/smc/smc.h    |  20 ++++++++-
 2 files changed, 137 insertions(+), 16 deletions(-)

culprit signature: 4f96a8a12991cb11b0524cbf1eb882252e778ab670c69af45b02493bc5941294
parent  signature: cfd7e0da735f209999a1961af908f41f430f1706b67f9aa27cfd1a90d648baaf
revisions tested: 16, total time: 3h0m34.146673919s (build: 1h42m41.593819568s, test: 1h16m5.928351172s)
first bad commit: 341adeec9adad0874f29a0a1af35638207352a39 net/smc: Forward wakeup to smc socket waitqueue after fallback
recipients (to): ["davem@davemloft.net" "guwen@linux.alibaba.com" "kgraul@linux.ibm.com"]
recipients (cc): []
crash: BUG: MAX_LOCK_DEPTH too low!
BUG: MAX_LOCK_DEPTH too low!
turning off the locking correctness validator.
depth: 48  max: 48!
48 locks held by syz-executor681/20927:
 #0: ffff88806cb0dc10 (&sb->s_type->i_mutex_key#11){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:777 [inline]
 #0: ffff88806cb0dc10 (&sb->s_type->i_mutex_key#11){+.+.}-{3:3}, at: __sock_release+0x76/0x270 net/socket.c:649
 #1: ffff88807df44a78 (&smc->clcsock_release_lock){+.+.}-{3:3}, at: smc_clcsock_release+0x54/0xb0 net/smc/smc_close.c:30
 #2: ffff88807b136130 (k-sk_lock-AF_INET){+.+.}-{0:0}, at: lock_sock include/net/sock.h:1668 [inline]
 #2: ffff88807b136130 (k-sk_lock-AF_INET){+.+.}-{0:0}, at: tcp_close+0x10/0x70 net/ipv4/tcp.c:2918
 #3: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #4: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #5: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #6: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #7: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #8: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #9: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #10: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #11: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #12: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #13: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #14: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #15: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #16: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #17: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #18: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #19: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #20: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #21: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #22: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #23: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #24: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #25: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #26: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #27: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #28: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #29: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #30: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #31: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #32: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #33: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #34: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #35: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #36: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #37: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #38: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #39: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #40: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #41: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #42: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #43: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #44: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #45: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #46: ffffffff8ab7a220 (rcu_read_lock){....}-{1:2}, at: smc_fback_forward_wakeup+0x0/0x3e0 net/smc/af_smc.c:2890
 #47: ffff88806cb0bc58 (&ei->socket.wq.wait){..-.}-{2:2}, at: add_wait_queue+0x42/0x260 kernel/sched/wait.c:23
INFO: lockdep is turned off.
CPU: 0 PID: 20927 Comm: syz-executor681 Not tainted 5.17.0-rc1-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x57/0x7d lib/dump_stack.c:106
 __lock_acquire+0x187b/0x5410 kernel/locking/lockdep.c:5045
 lock_acquire kernel/locking/lockdep.c:5639 [inline]
 lock_acquire+0x1ab/0x510 kernel/locking/lockdep.c:5604
 __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
 _raw_spin_lock_irqsave+0x39/0x50 kernel/locking/spinlock.c:162
 add_wait_queue+0x42/0x260 kernel/sched/wait.c:23
 smc_fback_forward_wakeup+0x122/0x3e0 net/smc/af_smc.c:617
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 smc_fback_forward_wakeup+0x128/0x3e0 net/smc/af_smc.c:618
 sk_error_report+0x30/0x230 net/core/sock.c:340
 tcp_disconnect+0x143c/0x1d30 net/ipv4/tcp.c:3093
 __tcp_close+0xcfc/0x1200 net/ipv4/tcp.c:2789
 tcp_close+0x1b/0x70 net/ipv4/tcp.c:2919
 inet_release+0xef/0x210 net/ipv4/af_inet.c:428
 __sock_release net/socket.c:650 [inline]
 sock_release+0x7d/0x190 net/socket.c:678
 smc_clcsock_release+0x8e/0xb0 net/smc/smc_close.c:34
 __smc_release+0x2c8/0x4c0 net/smc/af_smc.c:172
 smc_release+0x13a/0x3e0 net/smc/af_smc.c:209
 __sock_release+0xbb/0x270 net/socket.c:650
 sock_close+0xf/0x20 net/socket.c:1318
 __fput+0x204/0x8d0 fs/file_table.c:311
 task_work_run+0xc0/0x160 kernel/task_work.c:164
 exit_task_work include/linux/task_work.h:32 [inline]
 do_exit+0x9a6/0x2500 kernel/exit.c:806
 do_group_exit+0xb2/0x2a0 kernel/exit.c:935
 get_signal+0x3aa/0x2130 kernel/signal.c:2862
 arch_do_signal_or_restart+0x2a9/0x1c40 arch/x86/kernel/signal.c:868
 handle_signal_work kernel/entry/common.c:148 [inline]
 exit_to_user_mode_loop kernel/entry/common.c:172 [inline]
 exit_to_user_mode_prepare+0x17d/0x290 kernel/entry/common.c:207
 __syscall_exit_to_user_mode_work kernel/entry/common.c:289 [inline]
 syscall_exit_to_user_mode+0x19/0x60 kernel/entry/common.c:300
 do_syscall_64+0x42/0xb0 arch/x86/entry/common.c:86
 entry_SYSCALL_64_after_hwframe+0x44/0xae
RIP: 0033:0x7fed27823999
Code: Unable to access opcode bytes at RIP 0x7fed2782396f.
RSP: 002b:00007fed277d5318 EFLAGS: 00000246 ORIG_RAX: 00000000000000ca
RAX: fffffffffffffe00 RBX: 00007fed278ab3e8 RCX: 00007fed27823999
RDX: 0000000000000000 RSI: 0000000000000080 RDI: 00007fed278ab3e8
RBP: 00007fed278ab3e0 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 00007fed27879064
R13: 00007ffea6ce81df R14: 00007fed277d5400 R15: 0000000000022000
 </TASK>

