ci starts bisection 2022-08-29 15:03:06.175749471 +0000 UTC m=+7574.693312407
bisecting cause commit starting from 8379c0b31fbc5d20946f617f8e2fe4791e6f58c1
building syzkaller on 071779164d7640bc97cdb04864e59dbb91db6469
testing commit 8379c0b31fbc5d20946f617f8e2fe4791e6f58c1
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: e1e869128bd2d885596c5cfd777e5c116d0878fb49d239b5557e9023a137197b
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
testing release v5.19
testing commit 3d7cb6b04c3f3115719235cc6866b10326de34cd
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: ed081e07c815ad9e6996b1fbdd25667b3c9252bbfecdb442ce4e99c707440db3
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
testing release v5.18
testing commit 4b0986a3613c92f4ec1bdc7f60ec66fea135991f
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: f5e25b0d6ada01dc8cc90840203d6182bfdc66e26daebe1618feafb209ba78a9
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
testing release v5.17
testing commit f443e374ae131c168a065ea1748feac6b2e76613
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 9d871cc34214ef98fa73107d8725b41e178c78833dc82b08a0f3e1a26c1d20cf
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
testing release v5.16
testing commit df0cc57e057f18e44dac8e6c18aba47ab53202f9
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 92aa7b24deda42d1b0c1a7b236076cab5542b91f09189411b235c53ce6ff2fd3
all runs: OK
# git bisect start f443e374ae131c168a065ea1748feac6b2e76613 df0cc57e057f18e44dac8e6c18aba47ab53202f9
Bisecting: 6995 revisions left to test after this (roughly 13 steps)
[22ef12195e13c5ec58320dbf99ef85059a2c0820] Merge tag 'staging-5.17-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging

testing commit 22ef12195e13c5ec58320dbf99ef85059a2c0820
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 6a3769570ae6f65f4098024ca6461bc15f003d07e8cc2b7c494aa91d890c2729
all runs: OK
# git bisect good 22ef12195e13c5ec58320dbf99ef85059a2c0820
Bisecting: 3520 revisions left to test after this (roughly 12 steps)
[51620150ca2df62f8ea472ab8962be590c957288] cifs: update internal module number

testing commit 51620150ca2df62f8ea472ab8962be590c957288
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 6b02e91233074c50cd249e045d6f126612db3aee5982b3b07e9e1f3c20496c9c
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
# git bisect bad 51620150ca2df62f8ea472ab8962be590c957288
Bisecting: 1737 revisions left to test after this (roughly 11 steps)
[3fb561b1e0bf4c75bc5f4d799845b08fa5ab3853] Merge tag 'mips_5.17' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux

testing commit 3fb561b1e0bf4c75bc5f4d799845b08fa5ab3853
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 9a68c42abd35a164f8955dfe203c1b2f89d98ca3ca429267afbc7b6cfcbd895b
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
# git bisect bad 3fb561b1e0bf4c75bc5f4d799845b08fa5ab3853
Bisecting: 859 revisions left to test after this (roughly 10 steps)
[147cc5838c0f5c76e908b816e924ca378e0d4735] Merge tag 'irq-core-2022-01-13' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip

testing commit 147cc5838c0f5c76e908b816e924ca378e0d4735
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 2cbd1a72ad4ac4a92f3a7d4d1f54a6aa87b034333e8325dfe1a601efacff5bab
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
# git bisect bad 147cc5838c0f5c76e908b816e924ca378e0d4735
Bisecting: 424 revisions left to test after this (roughly 9 steps)
[3acbdbf42e943d85174401357a6b6243479d4c76] Merge tag 'libnvdimm-for-5.17' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm

testing commit 3acbdbf42e943d85174401357a6b6243479d4c76
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: dc6bf0fe8f0cc46c640e7254d7b6bc92a262e5f7b8d651d43e5a57927710a8b1
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
# git bisect bad 3acbdbf42e943d85174401357a6b6243479d4c76
Bisecting: 211 revisions left to test after this (roughly 8 steps)
[57ea81971b7296b42fc77424af44c5915d3d4ae2] Merge tag 'usb-5.17-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb

testing commit 57ea81971b7296b42fc77424af44c5915d3d4ae2
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 8275e5e2de259f5ec3dc54157a0130adf53c03a97240347281f7076072a3a087
all runs: OK
# git bisect good 57ea81971b7296b42fc77424af44c5915d3d4ae2
Bisecting: 106 revisions left to test after this (roughly 7 steps)
[8975f8974888b3cd25aa8cf9eba24edbb9230bb2] Merge tag 'fuse-update-5.17' of git://git.kernel.org/pub/scm/linux/kernel/git/mszeredi/fuse

testing commit 8975f8974888b3cd25aa8cf9eba24edbb9230bb2
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 8643915338362c356b753dee6ff86cc521afd5eac3cb2178fd89fd37ca184a39
all runs: OK
# git bisect good 8975f8974888b3cd25aa8cf9eba24edbb9230bb2
Bisecting: 53 revisions left to test after this (roughly 6 steps)
[ecd1a5f62eed35d812de8fe20703e21b551c6560] cachefiles: Allow cachefiles to actually function

testing commit ecd1a5f62eed35d812de8fe20703e21b551c6560
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 3307b72e655b03b6c53a8af5d5711d0ede5f111b26beb7860d6227c1d09e557f
all runs: OK
# git bisect good ecd1a5f62eed35d812de8fe20703e21b551c6560
Bisecting: 26 revisions left to test after this (roughly 5 steps)
[de2051147771017a61b62c02fd4e883c9b07712d] fsdax: shift partition offset handling into the file systems

testing commit de2051147771017a61b62c02fd4e883c9b07712d
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 4f930de26d5355a3c5740019edd0baa9cc4ea3bfc5316ee5bb0f4bb1811301ab
all runs: OK
# git bisect good de2051147771017a61b62c02fd4e883c9b07712d
Bisecting: 13 revisions left to test after this (roughly 4 steps)
[e6435f1e02f410e3507f02a37c0fbb17971ddc7c] fscache: Add a tracepoint for cookie use/unuse

testing commit e6435f1e02f410e3507f02a37c0fbb17971ddc7c
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 3a886fc0d1685d93acf4805bcc7b2a34538fb651466d5737ad4fc45a39acee5b
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
# git bisect bad e6435f1e02f410e3507f02a37c0fbb17971ddc7c
Bisecting: 6 revisions left to test after this (roughly 3 steps)
[24e42e32d347f0787a6f99aeb590f3aaa7221093] 9p: Use fscache indexing rewrite and reenable caching

testing commit 24e42e32d347f0787a6f99aeb590f3aaa7221093
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: d9e3329dfe38d8dc76661c8169bd5e48d168972b01f53b651f29a88b312dc65f
all runs: crashed: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
# git bisect bad 24e42e32d347f0787a6f99aeb590f3aaa7221093
Bisecting: 2 revisions left to test after this (roughly 2 steps)
[523d27cda149cfc8c99159c0f68f690e4d3b9d14] afs: Convert afs to use the new fscache API

testing commit 523d27cda149cfc8c99159c0f68f690e4d3b9d14
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 4f9824683fe4fafb5f56db88dbff51e70499cff1fc7ad492be30d6aa9539ce20
all runs: OK
# git bisect good 523d27cda149cfc8c99159c0f68f690e4d3b9d14
Bisecting: 0 revisions left to test after this (roughly 1 step)
[0770bd4187c555e6df087f7abc252eeacb0842ec] afs: Skip truncation on the server of data we haven't written yet

testing commit 0770bd4187c555e6df087f7abc252eeacb0842ec
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 0c8808e78a383716dd5522a2a72120d66f0c3e13f48f7e0680e6d1f600c34c57
all runs: OK
# git bisect good 0770bd4187c555e6df087f7abc252eeacb0842ec
24e42e32d347f0787a6f99aeb590f3aaa7221093 is the first bad commit
commit 24e42e32d347f0787a6f99aeb590f3aaa7221093
Author: David Howells <dhowells@redhat.com>
Date:   Wed Nov 18 09:06:42 2020 +0000

    9p: Use fscache indexing rewrite and reenable caching
    
    Change the 9p filesystem to take account of the changes to fscache's
    indexing rewrite and reenable caching in 9p.
    
    The following changes have been made:
    
     (1) The fscache_netfs struct is no more, and there's no need to register
         the filesystem as a whole.
    
     (2) The session cookie is now an fscache_volume cookie, allocated with
         fscache_acquire_volume().  That takes three parameters: a string
         representing the "volume" in the index, a string naming the cache to
         use (or NULL) and a u64 that conveys coherency metadata for the
         volume.
    
         For 9p, I've made it render the volume name string as:
    
            "9p,<devname>,<cachetag>"
    
         where the cachetag is replaced by the aname if it wasn't supplied.
    
         This probably needs rethinking a bit as the aname can have slashes in
         it.  It might be better to hash the cachetag and use the hash or I
         could substitute commas for the slashes or something.
    
     (3) The fscache_cookie_def is no more and needed information is passed
         directly to fscache_acquire_cookie().  The cache no longer calls back
         into the filesystem, but rather metadata changes are indicated at
         other times.
    
         fscache_acquire_cookie() is passed the same keying and coherency
         information as before.
    
     (4) The functions to set/reset/flush cookies are removed and
         fscache_use_cookie() and fscache_unuse_cookie() are used instead.
    
         fscache_use_cookie() is passed a flag to indicate if the cookie is
         opened for writing.  fscache_unuse_cookie() is passed updates for the
         metadata if we changed it (ie. if the file was opened for writing).
    
         These are called when the file is opened or closed.
    
     (5) wait_on_page_bit[_killable]() is replaced with the specific wait
         functions for the bits waited upon.
    
     (6) I've got rid of some of the 9p-specific cache helper functions and
         called things like fscache_relinquish_cookie() directly as they'll
         optimise away if v9fs_inode_cookie() returns an unconditional NULL
         (which will be the case if CONFIG_9P_FSCACHE=n).
    
     (7) v9fs_vfs_setattr() is made to call fscache_resize() to change the size
         of the cache object.
    
    Notes:
    
     (A) We should call fscache_invalidate() if we detect that the server's
         copy of a file got changed by a third party, but I don't know where to
         do that.  We don't need to do that when allocating the cookie as we
         get a check-and-invalidate when we initially bind to the cache object.
    
     (B) The copy-to-cache-on-writeback side of things will be handled in
         separate patch.
    
    Changes
    =======
    ver #3:
     - Canonicalise the cookie key and coherency data to make them
       endianness-independent.
    
    ver #2:
     - Use gfpflags_allow_blocking() rather than using flag directly.
     - fscache_acquire_volume() now returns errors.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Jeff Layton <jlayton@kernel.org>
    Tested-by: Dominique Martinet <asmadeus@codewreck.org>
    cc: Eric Van Hensbergen <ericvh@gmail.com>
    cc: Latchesar Ionkov <lucho@ionkov.net>
    cc: v9fs-developer@lists.sourceforge.net
    cc: linux-cachefs@redhat.com
    Link: https://lore.kernel.org/r/163819664645.215744.1555314582005286846.stgit@warthog.procyon.org.uk/ # v1
    Link: https://lore.kernel.org/r/163906975017.143852.3459573173204394039.stgit@warthog.procyon.org.uk/ # v2
    Link: https://lore.kernel.org/r/163967178512.1823006.17377493641569138183.stgit@warthog.procyon.org.uk/ # v3
    Link: https://lore.kernel.org/r/164021573143.640689.3977487095697717967.stgit@warthog.procyon.org.uk/ # v4

 fs/9p/Kconfig          |   2 +-
 fs/9p/cache.c          | 195 +++++++++----------------------------------------
 fs/9p/cache.h          |  25 +------
 fs/9p/v9fs.c           |  17 ++---
 fs/9p/v9fs.h           |  13 +++-
 fs/9p/vfs_addr.c       |   8 +-
 fs/9p/vfs_dir.c        |  13 ++++
 fs/9p/vfs_file.c       |   3 +-
 fs/9p/vfs_inode.c      |  22 +++---
 fs/9p/vfs_inode_dotl.c |   3 +-
 10 files changed, 91 insertions(+), 210 deletions(-)

culprit signature: d9e3329dfe38d8dc76661c8169bd5e48d168972b01f53b651f29a88b312dc65f
parent  signature: 0c8808e78a383716dd5522a2a72120d66f0c3e13f48f7e0680e6d1f600c34c57
revisions tested: 18, total time: 4h0m9.150372169s (build: 1h59m13.679292855s, test: 1h58m53.41914613s)
first bad commit: 24e42e32d347f0787a6f99aeb590f3aaa7221093 9p: Use fscache indexing rewrite and reenable caching
recipients (to): ["asmadeus@codewreck.org" "dhowells@redhat.com" "jlayton@kernel.org"]
recipients (cc): []
crash: KASAN: slab-out-of-bounds Read in __fscache_acquire_volume
==================================================================
BUG: KASAN: slab-out-of-bounds in memcmp+0x16f/0x1c0 lib/string.c:770
Read of size 8 at addr ffff8880728c2690 by task syz-executor.1/4155

CPU: 0 PID: 4155 Comm: syz-executor.1 Not tainted 5.16.0-rc4-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/22/2022
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x57/0x7d lib/dump_stack.c:106
 print_address_description.constprop.0.cold+0x8d/0x320 mm/kasan/report.c:247
 __kasan_report mm/kasan/report.c:433 [inline]
 kasan_report.cold+0x83/0xdf mm/kasan/report.c:450
 memcmp+0x16f/0x1c0 lib/string.c:770
 memcmp include/linux/fortify-string.h:269 [inline]
 fscache_volume_same fs/fscache/volume.c:133 [inline]
 fscache_hash_volume fs/fscache/volume.c:171 [inline]
 __fscache_acquire_volume+0x655/0xed0 fs/fscache/volume.c:328
 fscache_acquire_volume include/linux/fscache.h:201 [inline]
 v9fs_cache_session_get_cookie+0xf4/0x1d0 fs/9p/cache.c:34
 v9fs_session_init+0xe46/0x1450 fs/9p/v9fs.c:473
 v9fs_mount+0x69/0x8f0 fs/9p/vfs_super.c:125
 legacy_get_tree+0xfa/0x1f0 fs/fs_context.c:610
 vfs_get_tree+0x7f/0x2c0 fs/super.c:1500
 do_new_mount fs/namespace.c:2988 [inline]
 path_mount+0x7e8/0x1a40 fs/namespace.c:3318
 do_mount fs/namespace.c:3331 [inline]
 __do_sys_mount fs/namespace.c:3539 [inline]
 __se_sys_mount fs/namespace.c:3516 [inline]
 __x64_sys_mount+0x1f5/0x260 fs/namespace.c:3516
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x35/0x80 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x44/0xae
RIP: 0033:0x7f0527904279
Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007f0527079168 EFLAGS: 00000246 ORIG_RAX: 00000000000000a5
RAX: ffffffffffffffda RBX: 00007f0527a16f80 RCX: 00007f0527904279
RDX: 0000000020000040 RSI: 0000000020000000 RDI: 0000000000000000
RBP: 00007f052795e189 R08: 0000000020000200 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
R13: 00007ffe698fa90f R14: 00007f0527079300 R15: 0000000000022000
 </TASK>

Allocated by task 4155:
 kasan_save_stack+0x1e/0x50 mm/kasan/common.c:38
 kasan_set_track mm/kasan/common.c:46 [inline]
 set_alloc_info mm/kasan/common.c:434 [inline]
 ____kasan_kmalloc mm/kasan/common.c:513 [inline]
 ____kasan_kmalloc mm/kasan/common.c:472 [inline]
 __kasan_kmalloc+0xa9/0xd0 mm/kasan/common.c:522
 kmalloc include/linux/slab.h:595 [inline]
 kzalloc include/linux/slab.h:724 [inline]
 fscache_alloc_volume fs/fscache/volume.c:234 [inline]
 __fscache_acquire_volume+0x257/0xed0 fs/fscache/volume.c:323
 fscache_acquire_volume include/linux/fscache.h:201 [inline]
 v9fs_cache_session_get_cookie+0xf4/0x1d0 fs/9p/cache.c:34
 v9fs_session_init+0xe46/0x1450 fs/9p/v9fs.c:473
 v9fs_mount+0x69/0x8f0 fs/9p/vfs_super.c:125
 legacy_get_tree+0xfa/0x1f0 fs/fs_context.c:610
 vfs_get_tree+0x7f/0x2c0 fs/super.c:1500
 do_new_mount fs/namespace.c:2988 [inline]
 path_mount+0x7e8/0x1a40 fs/namespace.c:3318
 do_mount fs/namespace.c:3331 [inline]
 __do_sys_mount fs/namespace.c:3539 [inline]
 __se_sys_mount fs/namespace.c:3516 [inline]
 __x64_sys_mount+0x1f5/0x260 fs/namespace.c:3516
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x35/0x80 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x44/0xae

The buggy address belongs to the object at ffff8880728c2600
 which belongs to the cache kmalloc-192 of size 192
The buggy address is located 144 bytes inside of
 192-byte region [ffff8880728c2600, ffff8880728c26c0)
The buggy address belongs to the page:
page:ffffea0001ca3080 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x728c2
flags: 0xfff00000000200(slab|node=0|zone=1|lastcpupid=0x7ff)
raw: 00fff00000000200 0000000000000000 dead000000000122 ffff888010441a00
raw: 0000000000000000 0000000080100010 00000001ffffffff 0000000000000000
page dumped because: kasan: bad access detected
page_owner tracks the page as allocated
page last allocated via order 0, migratetype Unmovable, gfp_mask 0x112c40(GFP_NOFS|__GFP_NOWARN|__GFP_NORETRY|__GFP_HARDWALL), pid 3962, ts 59188980659, free_ts 59142090719
 prep_new_page mm/page_alloc.c:2418 [inline]
 get_page_from_freelist+0xa6f/0x2f10 mm/page_alloc.c:4149
 __alloc_pages+0x1b2/0x500 mm/page_alloc.c:5369
 __alloc_pages_node include/linux/gfp.h:570 [inline]
 alloc_slab_page mm/slub.c:1795 [inline]
 allocate_slab mm/slub.c:1930 [inline]
 new_slab+0xab/0x4a0 mm/slub.c:1993
 ___slab_alloc+0x91a/0xfd0 mm/slub.c:3022
 __slab_alloc.constprop.0+0x4d/0xa0 mm/slub.c:3109
 slab_alloc_node mm/slub.c:3200 [inline]
 __kmalloc_node+0x2cb/0x390 mm/slub.c:4467
 kmalloc_array_node include/linux/slab.h:686 [inline]
 kcalloc_node include/linux/slab.h:691 [inline]
 memcg_alloc_page_obj_cgroups+0x8b/0x140 mm/memcontrol.c:2827
 memcg_slab_post_alloc_hook+0x90/0x430 mm/slab.h:313
 slab_post_alloc_hook mm/slab.h:526 [inline]
 slab_alloc_node mm/slub.c:3234 [inline]
 slab_alloc mm/slub.c:3242 [inline]
 kmem_cache_alloc+0x15c/0x3a0 mm/slub.c:3247
 kmem_cache_zalloc include/linux/slab.h:714 [inline]
 alloc_buffer_head+0x17/0x110 fs/buffer.c:3309
 alloc_page_buffers+0x1e6/0x4d0 fs/buffer.c:832
 grow_dev_page fs/buffer.c:968 [inline]
 grow_buffers fs/buffer.c:1014 [inline]
 __getblk_slow+0x354/0x830 fs/buffer.c:1041
 sb_getblk include/linux/buffer_head.h:327 [inline]
 ext4_getblk+0x1a0/0x580 fs/ext4/inode.c:854
 ext4_bread+0x8/0x120 fs/ext4/inode.c:900
 ext4_append+0x139/0x310 fs/ext4/namei.c:67
 ext4_init_new_dir+0x2e4/0x500 fs/ext4/namei.c:2893
page last free stack trace:
 reset_page_owner include/linux/page_owner.h:24 [inline]
 free_pages_prepare mm/page_alloc.c:1338 [inline]
 free_pcp_prepare+0x374/0x870 mm/page_alloc.c:1389
 free_unref_page_prepare mm/page_alloc.c:3309 [inline]
 free_unref_page+0x19/0x690 mm/page_alloc.c:3388
 __unfreeze_partials+0x343/0x360 mm/slub.c:2527
 qlink_free mm/kasan/quarantine.c:146 [inline]
 qlist_free_all+0x5a/0xc0 mm/kasan/quarantine.c:165
 kasan_quarantine_reduce+0x180/0x200 mm/kasan/quarantine.c:272
 __kasan_slab_alloc+0xa2/0xc0 mm/kasan/common.c:444
 kasan_slab_alloc include/linux/kasan.h:259 [inline]
 slab_post_alloc_hook mm/slab.h:519 [inline]
 slab_alloc_node mm/slub.c:3234 [inline]
 slab_alloc mm/slub.c:3242 [inline]
 kmem_cache_alloc+0x202/0x3a0 mm/slub.c:3247
 getname_flags.part.0+0x4a/0x440 fs/namei.c:138
 do_sys_openat2+0xd2/0x400 fs/open.c:1206
 do_sys_open fs/open.c:1228 [inline]
 __do_sys_openat fs/open.c:1244 [inline]
 __se_sys_openat fs/open.c:1239 [inline]
 __x64_sys_openat+0x11b/0x1d0 fs/open.c:1239
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x35/0x80 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x44/0xae

Memory state around the buggy address:
 ffff8880728c2580: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
 ffff8880728c2600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>ffff8880728c2680: 00 00 04 fc fc fc fc fc fc fc fc fc fc fc fc fc
                         ^
 ffff8880728c2700: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
 ffff8880728c2780: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
==================================================================

