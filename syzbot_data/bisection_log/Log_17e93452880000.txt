ci2 starts bisection 2022-10-11 10:07:45.344991659 +0000 UTC m=+40868.945982766
bisecting cause commit starting from 493ffd6605b2d3d4dc7008ab927dba319f36671f
building syzkaller on 5bcf0c31a14edd29532df8af88f246446873fe93
ensuring issue is reproducible on original commit 493ffd6605b2d3d4dc7008ab927dba319f36671f

testing commit 493ffd6605b2d3d4dc7008ab927dba319f36671f gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: fcb0b076620b3b407251ea4712ced7d6a5e068b7dfee592c7fd83e8301a5b05f
run #0: basic kernel testing failed: BUG: program execution failed: executor NUM: failed to write control pipe: write |NUM: broken pipe
run #1: crashed: KASAN: use-after-free Read in move_expired_inodes
run #2: crashed: KASAN: use-after-free Read in move_expired_inodes
run #3: crashed: KASAN: use-after-free Read in move_expired_inodes
run #4: crashed: KASAN: use-after-free Read in move_expired_inodes
run #5: crashed: KASAN: use-after-free Read in move_expired_inodes
run #6: crashed: KASAN: use-after-free Read in move_expired_inodes
run #7: crashed: KASAN: use-after-free Read in move_expired_inodes
run #8: crashed: KASAN: use-after-free Read in move_expired_inodes
run #9: crashed: KASAN: use-after-free Read in move_expired_inodes
run #10: crashed: KASAN: use-after-free Read in move_expired_inodes
run #11: crashed: KASAN: use-after-free Read in move_expired_inodes
run #12: crashed: KASAN: use-after-free Read in move_expired_inodes
run #13: crashed: KASAN: use-after-free Read in move_expired_inodes
run #14: crashed: KASAN: use-after-free Read in move_expired_inodes
run #15: crashed: KASAN: use-after-free Read in move_expired_inodes
run #16: crashed: KASAN: use-after-free Read in move_expired_inodes
run #17: crashed: KASAN: use-after-free Read in move_expired_inodes
run #18: crashed: KASAN: use-after-free Read in move_expired_inodes
run #19: crashed: KASAN: use-after-free Read in move_expired_inodes
testing release v6.0
testing commit 4fe89d07dcc2804c8b562f6c7896a45643d34b2f gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: dd6d65b05b2e13d2cb99234924220ebc4c4d79a8a6c06efcf8aaf2ed1af4f747
all runs: OK
# git bisect start 493ffd6605b2d3d4dc7008ab927dba319f36671f 4fe89d07dcc2804c8b562f6c7896a45643d34b2f
Bisecting: 4783 revisions left to test after this (roughly 12 steps)
[7e6739b9336e61fe23ca4e2c8d1fda8f19f979bf] Merge tag 'drm-next-2022-10-05' of git://anongit.freedesktop.org/drm/drm

testing commit 7e6739b9336e61fe23ca4e2c8d1fda8f19f979bf gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 3844a02f5cfccf52efffb76beb9f59efce2b62213dfb159532fb3ed26599dd78
all runs: OK
# git bisect good 7e6739b9336e61fe23ca4e2c8d1fda8f19f979bf
Bisecting: 2396 revisions left to test after this (roughly 11 steps)
[ae9559594cb851aff774d5bea243b84c6acf761d] Merge tag 'mfd-next-6.1' of git://git.kernel.org/pub/scm/linux/kernel/git/lee/mfd

testing commit ae9559594cb851aff774d5bea243b84c6acf761d gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: a753c57a7fad04e8b41223b97bb82414cf225d45e584b3a667e730a25a6699a4
all runs: crashed: KASAN: use-after-free Read in move_expired_inodes
# git bisect bad ae9559594cb851aff774d5bea243b84c6acf761d
Bisecting: 1020 revisions left to test after this (roughly 10 steps)
[7171a8da00035e7913c3013ca5fb5beb5b8b22f0] Merge tag 'arm-dt-6.1' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc

testing commit 7171a8da00035e7913c3013ca5fb5beb5b8b22f0 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 36206b53eb97b31787574ff712714d47fef2e1edb7eac809cc6258fc8b9612f8
all runs: OK
# git bisect good 7171a8da00035e7913c3013ca5fb5beb5b8b22f0
Bisecting: 513 revisions left to test after this (roughly 9 steps)
[188943a15638ceb91f960e072ed7609b2d7f2a55] Merge tag 'fs-for_v6.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/jack/linux-fs

testing commit 188943a15638ceb91f960e072ed7609b2d7f2a55 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 3dbf39ee0f6a7e85c46d3bf0e6bd4fc9befbed1877e084e89d885038c732a713
run #0: basic kernel testing failed: BUG: program execution failed: executor NUM: failed to write control pipe: write |NUM: broken pipe
run #1: crashed: KASAN: use-after-free Read in move_expired_inodes
run #2: crashed: KASAN: use-after-free Read in move_expired_inodes
run #3: crashed: KASAN: use-after-free Read in move_expired_inodes
run #4: crashed: KASAN: use-after-free Read in move_expired_inodes
run #5: crashed: KASAN: use-after-free Read in move_expired_inodes
run #6: crashed: KASAN: use-after-free Read in move_expired_inodes
run #7: crashed: KASAN: use-after-free Read in move_expired_inodes
run #8: crashed: KASAN: use-after-free Read in move_expired_inodes
run #9: crashed: KASAN: use-after-free Read in move_expired_inodes
# git bisect bad 188943a15638ceb91f960e072ed7609b2d7f2a55
Bisecting: 273 revisions left to test after this (roughly 8 steps)
[4c0ed7d8d6e3dc013c4599a837de84794baa5b62] Merge tag 'pull-path' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs

testing commit 4c0ed7d8d6e3dc013c4599a837de84794baa5b62 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: db6fccff51022c1e63b837303e25c73108aa19a8a9561eab100c0f10de2e12de
all runs: OK
# git bisect good 4c0ed7d8d6e3dc013c4599a837de84794baa5b62
Bisecting: 136 revisions left to test after this (roughly 7 steps)
[c2e79e865b87c2920a3cd39de69c35f2bc758a51] btrfs: move btrfs_pinned_by_swapfile prototype into volumes.h

testing commit c2e79e865b87c2920a3cd39de69c35f2bc758a51 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: d1ad39f6df9fa483d7a9abfdbee154efb2733c969cdace44465725b6a9b2799e
all runs: OK
# git bisect good c2e79e865b87c2920a3cd39de69c35f2bc758a51
Bisecting: 83 revisions left to test after this (roughly 6 steps)
[1b45cc5c7b920fd8bf72e5a888ec7abeadf41e09] ext4: fix potential out of bound read in ext4_fc_replay_scan()

testing commit 1b45cc5c7b920fd8bf72e5a888ec7abeadf41e09 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 37071bac8f715f795c0fd999d8a1bca373b1981aee11b153cf872df7dee4476a
all runs: crashed: KASAN: use-after-free Read in move_expired_inodes
# git bisect bad 1b45cc5c7b920fd8bf72e5a888ec7abeadf41e09
Bisecting: 26 revisions left to test after this (roughly 5 steps)
[b7b80a35fb51319223e1fbf84128b8e5ebb91f86] ext4: factor out ext4_fc_disabled()

testing commit b7b80a35fb51319223e1fbf84128b8e5ebb91f86 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 7acac89296b2ad40827a814b48ab554e12c663e19969b9470ec4be53e837f1bd
all runs: crashed: KASAN: use-after-free Read in move_expired_inodes
# git bisect bad b7b80a35fb51319223e1fbf84128b8e5ebb91f86
Bisecting: 12 revisions left to test after this (roughly 4 steps)
[50f094a5580e6297bf10a807d16f0ee23fa576cf] ext4: don't increase iversion counter for ea_inodes

testing commit 50f094a5580e6297bf10a807d16f0ee23fa576cf gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 770041dc8f3ea0db70bffe2ee848b0becad4a95455853358e63f0640eedc4633
all runs: OK
# git bisect good 50f094a5580e6297bf10a807d16f0ee23fa576cf
Bisecting: 6 revisions left to test after this (roughly 3 steps)
[5fc4cbd9fde5d4630494fd6ffc884148fb618087] mbcache: Avoid nesting of cache->c_list_lock under bit locks

testing commit 5fc4cbd9fde5d4630494fd6ffc884148fb618087 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: db6fe52155be8a71e56274ae5ad3ffcebf66d0f583a6e9d8d2f7bdb3616b173c
all runs: crashed: KASAN: use-after-free Read in move_expired_inodes
# git bisect bad 5fc4cbd9fde5d4630494fd6ffc884148fb618087
Bisecting: 2 revisions left to test after this (roughly 2 steps)
[0b73284c564d3ae4feef4bc920292f004acf4980] ext4: ext4_read_bh_lock() should submit IO if the buffer isn't uptodate

testing commit 0b73284c564d3ae4feef4bc920292f004acf4980 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 20c02a52b97c62d9f83f998821c91447cf941e0ea125b6e6d27c755856be4584
all runs: crashed: KASAN: use-after-free Read in move_expired_inodes
# git bisect bad 0b73284c564d3ae4feef4bc920292f004acf4980
Bisecting: 0 revisions left to test after this (roughly 1 step)
[1ff20307393e17dc57fde62226df625a3a3c36e9] ext4: unconditionally enable the i_version counter

testing commit 1ff20307393e17dc57fde62226df625a3a3c36e9 gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: dab2a7bc4ca58b44cf79b1078aa2213d2f3dc1f8848f0069f3c51d095ed3d473
all runs: crashed: KASAN: use-after-free Read in move_expired_inodes
# git bisect bad 1ff20307393e17dc57fde62226df625a3a3c36e9
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[cbfecb927f429a6fa613d74b998496bd71e4438a] fs: record I_DIRTY_TIME even if inode already has I_DIRTY_INODE

testing commit cbfecb927f429a6fa613d74b998496bd71e4438a gcc
compiler: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: eeab22f9bebaf2b987b6a30223a554cc9d7ba8a2b95bf5d52b61828c872c6b03
all runs: crashed: KASAN: use-after-free Read in move_expired_inodes
# git bisect bad cbfecb927f429a6fa613d74b998496bd71e4438a
cbfecb927f429a6fa613d74b998496bd71e4438a is the first bad commit
commit cbfecb927f429a6fa613d74b998496bd71e4438a
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Thu Aug 25 12:06:57 2022 +0200

    fs: record I_DIRTY_TIME even if inode already has I_DIRTY_INODE
    
    Currently the I_DIRTY_TIME will never get set if the inode already has
    I_DIRTY_INODE with assumption that it supersedes I_DIRTY_TIME.  That's
    true, however ext4 will only update the on-disk inode in
    ->dirty_inode(), not on actual writeback. As a result if the inode
    already has I_DIRTY_INODE state by the time we get to
    __mark_inode_dirty() only with I_DIRTY_TIME, the time was already filled
    into on-disk inode and will not get updated until the next I_DIRTY_INODE
    update, which might never come if we crash or get a power failure.
    
    The problem can be reproduced on ext4 by running xfstest generic/622
    with -o iversion mount option.
    
    Fix it by allowing I_DIRTY_TIME to be set even if the inode already has
    I_DIRTY_INODE. Also make sure that the case is properly handled in
    writeback_single_inode() as well. Additionally changes in
    xfs_fs_dirty_inode() was made to accommodate for I_DIRTY_TIME in flag.
    
    Thanks Jan Kara for suggestions on how to make this work properly.
    
    Cc: Dave Chinner <david@fromorbit.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Suggested-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220825100657.44217-1-lczerner@redhat.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>

 Documentation/filesystems/vfs.rst |  3 +++
 fs/fs-writeback.c                 | 37 +++++++++++++++++++++++++------------
 fs/xfs/xfs_super.c                | 10 ++++++++--
 include/linux/fs.h                |  9 +++++----
 4 files changed, 41 insertions(+), 18 deletions(-)

culprit signature: eeab22f9bebaf2b987b6a30223a554cc9d7ba8a2b95bf5d52b61828c872c6b03
parent  signature: 770041dc8f3ea0db70bffe2ee848b0becad4a95455853358e63f0640eedc4633
revisions tested: 15, total time: 4h48m11.609555417s (build: 3h22m7.301102404s, test: 1h24m17.200407245s)
first bad commit: cbfecb927f429a6fa613d74b998496bd71e4438a fs: record I_DIRTY_TIME even if inode already has I_DIRTY_INODE
recipients (to): ["jack@suse.cz" "lczerner@redhat.com" "tytso@mit.edu"]
recipients (cc): []
crash: KASAN: use-after-free Read in move_expired_inodes
==================================================================
BUG: KASAN: use-after-free in inode_dirtied_after fs/fs-writeback.c:1335 [inline]
BUG: KASAN: use-after-free in move_expired_inodes+0x1b6/0x880 fs/fs-writeback.c:1367
Read of size 8 at addr ffff888071c815a8 by task kworker/u4:3/513

CPU: 1 PID: 513 Comm: kworker/u4:3 Not tainted 6.0.0-rc4-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/22/2022
Workqueue: writeback wb_workfn (flush-7:0)
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x12a/0x1be lib/dump_stack.c:106
 print_address_description+0x65/0x4b0 mm/kasan/report.c:317
 print_report+0x108/0x1f0 mm/kasan/report.c:433
 kasan_report+0xc3/0xf0 mm/kasan/report.c:495
 inode_dirtied_after fs/fs-writeback.c:1335 [inline]
 move_expired_inodes+0x1b6/0x880 fs/fs-writeback.c:1367
 queue_io+0x22c/0x360 fs/fs-writeback.c:1427
 wb_writeback+0x358/0x6b0 fs/fs-writeback.c:2042
 wb_do_writeback fs/fs-writeback.c:2187 [inline]
 wb_workfn+0x3aa/0xd30 fs/fs-writeback.c:2227
 process_one_work+0x7b9/0xc60 kernel/workqueue.c:2289
 worker_thread+0x8ff/0xfe0 kernel/workqueue.c:2436
 kthread+0x228/0x2a0 kernel/kthread.c:376
 ret_from_fork+0x1f/0x30
 </TASK>

Allocated by task 4169:
 kasan_save_stack mm/kasan/common.c:38 [inline]
 kasan_set_track mm/kasan/common.c:45 [inline]
 set_alloc_info mm/kasan/common.c:437 [inline]
 __kasan_slab_alloc+0xa3/0xd0 mm/kasan/common.c:470
 kasan_slab_alloc include/linux/kasan.h:224 [inline]
 slab_post_alloc_hook mm/slab.h:727 [inline]
 slab_alloc_node mm/slub.c:3243 [inline]
 slab_alloc mm/slub.c:3251 [inline]
 __kmem_cache_alloc_lru mm/slub.c:3258 [inline]
 kmem_cache_alloc_lru+0x175/0x2d0 mm/slub.c:3275
 alloc_inode_sb include/linux/fs.h:3104 [inline]
 fat_alloc_inode+0x20/0xb0 fs/fat/inode.c:750
 alloc_inode fs/inode.c:260 [inline]
 new_inode_pseudo+0x56/0x180 fs/inode.c:1019
 new_inode+0x1a/0x1b0 fs/inode.c:1047
 fat_build_inode+0xf3/0x300 fs/fat/inode.c:603
 vfat_create+0x218/0x340 fs/fat/namei_vfat.c:776
 lookup_open fs/namei.c:3413 [inline]
 open_last_lookups fs/namei.c:3481 [inline]
 path_openat+0xf05/0x27e0 fs/namei.c:3688
 do_filp_open+0x256/0x4a0 fs/namei.c:3718
 do_sys_openat2+0xfc/0x410 fs/open.c:1311
 do_sys_open fs/open.c:1327 [inline]
 __do_sys_openat fs/open.c:1343 [inline]
 __se_sys_openat fs/open.c:1338 [inline]
 __x64_sys_openat+0x209/0x250 fs/open.c:1338
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x63/0xcd

Freed by task 4185:
 kasan_save_stack mm/kasan/common.c:38 [inline]
 kasan_set_track+0x3d/0x60 mm/kasan/common.c:45
 kasan_set_free_info+0x1f/0x40 mm/kasan/generic.c:370
 ____kasan_slab_free+0xd8/0x120 mm/kasan/common.c:367
 kasan_slab_free include/linux/kasan.h:200 [inline]
 slab_free_hook mm/slub.c:1754 [inline]
 slab_free_freelist_hook+0x12e/0x1a0 mm/slub.c:1780
 slab_free mm/slub.c:3534 [inline]
 kmem_cache_free+0x95/0x1d0 mm/slub.c:3551
 rcu_do_batch kernel/rcu/tree.c:2245 [inline]
 rcu_core+0x981/0x1610 kernel/rcu/tree.c:2505
 __do_softirq+0x362/0x773 kernel/softirq.c:571

Last potentially related work creation:
 kasan_save_stack+0x2b/0x50 mm/kasan/common.c:38
 __kasan_record_aux_stack+0xaf/0xc0 mm/kasan/generic.c:348
 call_rcu+0x163/0x970 kernel/rcu/tree.c:2793
 __dentry_kill+0x334/0x4e0 fs/dcache.c:607
 dentry_kill+0xbb/0x1e0
 dput+0x16c/0x300 fs/dcache.c:913
 __fput+0x421/0x650 fs/file_table.c:333
 task_work_run+0xd6/0x160 kernel/task_work.c:177
 resume_user_mode_work include/linux/resume_user_mode.h:49 [inline]
 exit_to_user_mode_loop+0x124/0x150 kernel/entry/common.c:169
 exit_to_user_mode_prepare+0xb2/0x140 kernel/entry/common.c:201
 __syscall_exit_to_user_mode_work kernel/entry/common.c:283 [inline]
 syscall_exit_to_user_mode+0x26/0x60 kernel/entry/common.c:294
 do_syscall_64+0x49/0xb0 arch/x86/entry/common.c:86
 entry_SYSCALL_64_after_hwframe+0x63/0xcd

The buggy address belongs to the object at ffff888071c812f0
 which belongs to the cache fat_inode_cache of size 1488
The buggy address is located 696 bytes inside of
 1488-byte region [ffff888071c812f0, ffff888071c818c0)

The buggy address belongs to the physical page:
page:ffffea0001c72000 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x71c80
head:ffffea0001c72000 order:3 compound_mapcount:0 compound_pincount:0
memcg:ffff888020a89e01
flags: 0xfff00000010200(slab|head|node=0|zone=1|lastcpupid=0x7ff)
raw: 00fff00000010200 0000000000000000 dead000000000122 ffff888018a52500
raw: 0000000000000000 0000000080140014 00000001ffffffff ffff888020a89e01
page dumped because: kasan: bad access detected
page_owner tracks the page as allocated
page last allocated via order 3, migratetype Reclaimable, gfp_mask 0x1d2050(__GFP_IO|__GFP_NOWARN|__GFP_NORETRY|__GFP_COMP|__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_RECLAIMABLE), pid 4169, tgid 4168 (syz-executor.0), ts 92561040437, free_ts 74789813625
 prep_new_page mm/page_alloc.c:2532 [inline]
 get_page_from_freelist+0x742/0x7c0 mm/page_alloc.c:4283
 __alloc_pages+0x259/0x560 mm/page_alloc.c:5515
 alloc_slab_page+0x70/0xf0 mm/slub.c:1824
 allocate_slab+0x5e/0x520 mm/slub.c:1969
 new_slab mm/slub.c:2029 [inline]
 ___slab_alloc+0x3ee/0xc40 mm/slub.c:3031
 __slab_alloc mm/slub.c:3118 [inline]
 slab_alloc_node mm/slub.c:3209 [inline]
 slab_alloc mm/slub.c:3251 [inline]
 __kmem_cache_alloc_lru mm/slub.c:3258 [inline]
 kmem_cache_alloc_lru+0x225/0x2d0 mm/slub.c:3275
 alloc_inode_sb include/linux/fs.h:3104 [inline]
 fat_alloc_inode+0x20/0xb0 fs/fat/inode.c:750
 alloc_inode fs/inode.c:260 [inline]
 new_inode_pseudo+0x56/0x180 fs/inode.c:1019
 new_inode+0x1a/0x1b0 fs/inode.c:1047
 fat_fill_super+0x2d1f/0x44e0 fs/fat/inode.c:1847
 mount_bdev+0x27a/0x370 fs/super.c:1400
 legacy_get_tree+0xe4/0x170 fs/fs_context.c:610
 vfs_get_tree+0x7b/0x220 fs/super.c:1530
 do_new_mount+0x1df/0x930 fs/namespace.c:3040
 do_mount fs/namespace.c:3383 [inline]
 __do_sys_mount fs/namespace.c:3591 [inline]
 __se_sys_mount+0x20f/0x2a0 fs/namespace.c:3568
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
page last free stack trace:
 reset_page_owner include/linux/page_owner.h:24 [inline]
 free_pages_prepare mm/page_alloc.c:1449 [inline]
 free_pcp_prepare+0x812/0x900 mm/page_alloc.c:1499
 free_unref_page_prepare mm/page_alloc.c:3380 [inline]
 free_unref_page+0x7d/0x5f0 mm/page_alloc.c:3476
 qlist_free_all+0x2b/0x70 mm/kasan/quarantine.c:187
 kasan_quarantine_reduce+0x169/0x180 mm/kasan/quarantine.c:294
 __kasan_slab_alloc+0x2f/0xd0 mm/kasan/common.c:447
 kasan_slab_alloc include/linux/kasan.h:224 [inline]
 slab_post_alloc_hook mm/slab.h:727 [inline]
 slab_alloc_node mm/slub.c:3243 [inline]
 slab_alloc mm/slub.c:3251 [inline]
 kmem_cache_alloc_trace+0x1de/0x310 mm/slub.c:3282
 kmalloc include/linux/slab.h:600 [inline]
 kzalloc include/linux/slab.h:733 [inline]
 regulatory_hint_core net/wireless/reg.c:3238 [inline]
 restore_regulatory_settings+0xb6e/0x1820 net/wireless/reg.c:3572
 crda_timeout_work+0x19/0x40 net/wireless/reg.c:540
 process_one_work+0x7b9/0xc60 kernel/workqueue.c:2289
 worker_thread+0x8ff/0xfe0 kernel/workqueue.c:2436
 kthread+0x228/0x2a0 kernel/kthread.c:376
 ret_from_fork+0x1f/0x30

Memory state around the buggy address:
 ffff888071c81480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
 ffff888071c81500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>ffff888071c81580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                  ^
 ffff888071c81600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
 ffff888071c81680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
==================================================================

