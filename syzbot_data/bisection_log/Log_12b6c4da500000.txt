bisecting cause commit starting from 080b6f40763565f65ebb9540219c71ce885cf568
building syzkaller on a6e3ac3bf259067ffd6e50fe8e4a158f097c1da5
testing commit 080b6f40763565f65ebb9540219c71ce885cf568 with gcc (GCC) 8.1.0
kernel signature: 5ff10a70c53915d22e0d632a3d3697e01d42934d451d2ffbe50ee80b401eb263
run #0: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
run #1: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
run #2: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
run #3: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
run #4: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #5: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
run #7: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
run #8: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
run #9: crashed: BUG: unable to handle kernel paging request in __traceiter_sched_switch
testing release v5.9
testing commit bbf5c979011a099af5dc76498918ed7df445635b with gcc (GCC) 8.1.0
kernel signature: 934f0a134532bbbd345c7e8b605e59600f755e76ac937b8aa8fb348b839f419b
all runs: crashed: BUG: unable to handle kernel paging request in __schedule
testing release v5.8
testing commit bcf876870b95592b52519ed4aafcf9d95999bc9c with gcc (GCC) 8.1.0
kernel signature: 8730770d68f8e920985126c577ec2dcb31f1816337898b7dcb97124240c2a41c
all runs: crashed: BUG: unable to handle kernel paging request in __schedule
testing release v5.7
testing commit 3d77e6a8804abcc0504c904bd6e5cdf3a5cf8162 with gcc (GCC) 8.1.0
kernel signature: 4ae4066aac269b53531f9918b3ba0dd6fc3d87512114c76bb809662ef2dc626b
run #0: crashed: BUG: unable to handle kernel paging request in __schedule
run #1: crashed: BUG: unable to handle kernel paging request in __schedule
run #2: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #3: crashed: BUG: unable to handle kernel paging request in __schedule
run #4: crashed: BUG: unable to handle kernel paging request in __schedule
run #5: crashed: BUG: unable to handle kernel paging request in __schedule
run #6: crashed: BUG: unable to handle kernel paging request in __schedule
run #7: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #8: crashed: BUG: unable to handle kernel paging request in __schedule
run #9: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
testing release v5.6
testing commit 7111951b8d4973bda27ff663f2cf18b663d15b48 with gcc (GCC) 8.1.0
kernel signature: 45aeaceb370a64e3178f2eadba5531b17ec6fa935d31a95bc0d8d72046145e22
run #0: crashed: BUG: unable to handle kernel paging request in __schedule
run #1: crashed: BUG: unable to handle kernel paging request in __schedule
run #2: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #3: crashed: BUG: unable to handle kernel paging request in __schedule
run #4: crashed: BUG: unable to handle kernel paging request in __schedule
run #5: crashed: KASAN: vmalloc-out-of-bounds Read in bpf_trace_run3
run #6: crashed: BUG: unable to handle kernel paging request in __schedule
run #7: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #8: crashed: BUG: unable to handle kernel paging request in __schedule
run #9: crashed: BUG: unable to handle kernel paging request in __schedule
testing release v5.5
testing commit d5226fa6dbae0569ee43ecfc08bdcd6770fc4755 with gcc (GCC) 8.1.0
kernel signature: bab260d628365ed71ccc1559f08c8204e4cbdf185812bd3fc6ecb52e920a0a9a
run #0: crashed: KASAN: vmalloc-out-of-bounds Read in bpf_trace_run3
run #1: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #2: crashed: BUG: unable to handle kernel paging request in __schedule
run #3: crashed: BUG: unable to handle kernel paging request in __schedule
run #4: crashed: BUG: unable to handle kernel paging request in __schedule
run #5: crashed: BUG: unable to handle kernel paging request in __schedule
run #6: crashed: BUG: unable to handle kernel paging request in __schedule
run #7: crashed: BUG: unable to handle kernel paging request in __schedule
run #8: crashed: BUG: unable to handle kernel paging request in __schedule
run #9: crashed: BUG: unable to handle kernel paging request in __schedule
testing release v5.4
testing commit 219d54332a09e8d8741c1e1982f5eae56099de85 with gcc (GCC) 8.1.0
kernel signature: ee1d6e6cd28eb9e9ba8627ace7cdffb0124f17b2356c9ef1885647a8cb9efdd5
run #0: crashed: BUG: unable to handle kernel paging request in __schedule
run #1: crashed: BUG: unable to handle kernel paging request in __schedule
run #2: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #3: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #4: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #5: crashed: BUG: unable to handle kernel paging request in __schedule
run #6: crashed: BUG: unable to handle kernel paging request in __schedule
run #7: crashed: BUG: unable to handle kernel paging request in __schedule
run #8: crashed: BUG: unable to handle kernel paging request in __schedule
run #9: crashed: BUG: unable to handle kernel paging request in __schedule
testing release v5.3
testing commit 4d856f72c10ecb060868ed10ff1b1453943fc6c8 with gcc (GCC) 8.1.0
kernel signature: d48f5d5c0a7d9960417bedfc3c77f0e04878000f3da7c3e8df88535dc40e8299
run #0: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #1: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #2: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #3: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #4: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #5: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #7: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #8: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #9: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
testing release v5.2
testing commit 0ecfebd2b52404ae0c54a878c872bb93363ada36 with gcc (GCC) 8.1.0
kernel signature: 632d08e578bfad3ea8c408fdf9827f69a25f31371c4711f730c5a5b0e02e59d3
run #0: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #1: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #2: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #3: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #4: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #5: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #7: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #8: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #9: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
testing release v5.1
testing commit e93c9c99a629c61837d5a7fc2120cd2b6c70dbdd with gcc (GCC) 8.1.0
kernel signature: 3568fabeb7eec4ea14b5daa52192ac7757b7a8cf60d4ccce445808f592ed3e4b
all runs: OK
# git bisect start 0ecfebd2b52404ae0c54a878c872bb93363ada36 e93c9c99a629c61837d5a7fc2120cd2b6c70dbdd
Bisecting: 6966 revisions left to test after this (roughly 13 steps)
[a2d635decbfa9c1e4ae15cb05b68b2559f7f827c] Merge tag 'drm-next-2019-05-09' of git://anongit.freedesktop.org/drm/drm
testing commit a2d635decbfa9c1e4ae15cb05b68b2559f7f827c with gcc (GCC) 8.1.0
kernel signature: 17473c03e42e54e8c4b544b258f837fa2120fec1eb1f6d29a9b93af31cd1d2d2
run #0: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #1: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #2: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #3: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #4: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #5: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #7: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #8: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #9: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
# git bisect bad a2d635decbfa9c1e4ae15cb05b68b2559f7f827c
Bisecting: 4612 revisions left to test after this (roughly 12 steps)
[82efe439599439a5e1e225ce5740e6cfb777a7dd] Merge tag 'devicetree-for-5.2' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
testing commit 82efe439599439a5e1e225ce5740e6cfb777a7dd with gcc (GCC) 8.1.0
kernel signature: 70413435bc97ae3ac50213152e476289663df7ed2b72b77892ff07e20172a430
all runs: OK
# git bisect good 82efe439599439a5e1e225ce5740e6cfb777a7dd
Bisecting: 2416 revisions left to test after this (roughly 11 steps)
[b3a5e648f5917ea508ecab9a629028b186d38eae] Merge tag 'tty-5.2-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/tty
testing commit b3a5e648f5917ea508ecab9a629028b186d38eae with gcc (GCC) 8.1.0
kernel signature: 3118765f5db1618306920fad081a9c32ff9945246b884090fa518ae96d0f69bf
run #0: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #1: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #2: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #3: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #4: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #5: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #7: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #8: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #9: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
# git bisect bad b3a5e648f5917ea508ecab9a629028b186d38eae
Bisecting: 1097 revisions left to test after this (roughly 10 steps)
[0e33d334df1310d0697f2595833f723e5380359c] Merge branch 'libbpf-fixes'
testing commit 0e33d334df1310d0697f2595833f723e5380359c with gcc (GCC) 8.1.0
kernel signature: beae3ae6a88da7fae113907a79500668eff6fcd7fca428c05d7c656f6910f776
all runs: OK
# git bisect good 0e33d334df1310d0697f2595833f723e5380359c
Bisecting: 634 revisions left to test after this (roughly 9 steps)
[64439f8f0bc4e9da1c6cb31c2ee642e3139f5731] ice: Disable sniffing VF traffic on PF
testing commit 64439f8f0bc4e9da1c6cb31c2ee642e3139f5731 with gcc (GCC) 8.1.0
kernel signature: f8efd197b795ca1d1ab8ad13c102d4217fb6a0e9b1370cc762b1cdba91b1ff96
run #0: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #1: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #2: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #3: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #4: crashed: BUG: unable to handle kernel NULL pointer dereference in bpf_trace_run3
run #5: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #7: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #8: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #9: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
# git bisect bad 64439f8f0bc4e9da1c6cb31c2ee642e3139f5731
Bisecting: 228 revisions left to test after this (roughly 8 steps)
[5f0d736e7f7db586141f974821b6ca6c1d906d5b] Merge git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next
testing commit 5f0d736e7f7db586141f974821b6ca6c1d906d5b with gcc (GCC) 8.1.0
kernel signature: 95a263b504f35fa0625a3ebbed7549cfc5f2cfdd9617c1117683194b0fc62d05
run #0: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #1: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #2: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #3: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #4: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #5: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #7: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #8: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #9: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
# git bisect bad 5f0d736e7f7db586141f974821b6ca6c1d906d5b
Bisecting: 116 revisions left to test after this (roughly 7 steps)
[b7048d324b5ebcb99022e2e7296f03918e5f38c4] net: hns3: use a reserved byte to identify need_resp flag
testing commit b7048d324b5ebcb99022e2e7296f03918e5f38c4 with gcc (GCC) 8.1.0
kernel signature: b6e0c5f6965a6ee1e199c8741b01818e632c602550560fd3ca558ebab9316368
all runs: OK
# git bisect good b7048d324b5ebcb99022e2e7296f03918e5f38c4
Bisecting: 58 revisions left to test after this (roughly 6 steps)
[56738f460841761abc70347c919d5c45f6f05a42] netlink: add strict parsing for future attributes
testing commit 56738f460841761abc70347c919d5c45f6f05a42 with gcc (GCC) 8.1.0
kernel signature: c5ef462f5690c8daba09f39141a5f47b7ab7d83c22192d756a68e0c2f0d6e645
all runs: OK
# git bisect good 56738f460841761abc70347c919d5c45f6f05a42
Bisecting: 28 revisions left to test after this (roughly 5 steps)
[6acda8fbbda585acc44efd0f66f34a21b4dd2d31] Merge branch 'mv88e6060-cleanups'
testing commit 6acda8fbbda585acc44efd0f66f34a21b4dd2d31 with gcc (GCC) 8.1.0
kernel signature: df18fedcd56268da86372595c069d946d45fa0429442824693c0266abb9c4479
all runs: OK
# git bisect good 6acda8fbbda585acc44efd0f66f34a21b4dd2d31
Bisecting: 14 revisions left to test after this (roughly 4 steps)
[ea106722c76f08002b69a6983ed84dc18958ba48] nbd: trace sending nbd requests
testing commit ea106722c76f08002b69a6983ed84dc18958ba48 with gcc (GCC) 8.1.0
kernel signature: 839669d28ce18d74c9d5b25ec6bfad21cd092f384b6087e463c044c25f6f0c4c
run #0: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #1: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #2: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #3: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #4: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #5: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #7: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #8: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #9: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
# git bisect bad ea106722c76f08002b69a6983ed84dc18958ba48
Bisecting: 6 revisions left to test after this (roughly 3 steps)
[ca253339af928528ceb34770b076d3230ed7d629] bpftool/docs: add btf sub-command documentation
testing commit ca253339af928528ceb34770b076d3230ed7d629 with gcc (GCC) 8.1.0
kernel signature: 429d7f0b4a1183e67d2ac70af2defdfae4f16e4d4ab81373ece4271d3ff0e56d
all runs: OK
# git bisect good ca253339af928528ceb34770b076d3230ed7d629
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[0c0cad2c2824ac38106ad0649263eca30954beb6] Merge branch 'btf-dump'
testing commit 0c0cad2c2824ac38106ad0649263eca30954beb6 with gcc (GCC) 8.1.0
kernel signature: 429d7f0b4a1183e67d2ac70af2defdfae4f16e4d4ab81373ece4271d3ff0e56d
all runs: OK
# git bisect good 0c0cad2c2824ac38106ad0649263eca30954beb6
Bisecting: 1 revision left to test after this (roughly 1 step)
[34b8ab091f9ef57a2bb3c8c8359a0a03a8abf2f9] bpf, arm64: use more scalable stadd over ldxr / stxr loop in xadd
testing commit 34b8ab091f9ef57a2bb3c8c8359a0a03a8abf2f9 with gcc (GCC) 8.1.0
kernel signature: 429d7f0b4a1183e67d2ac70af2defdfae4f16e4d4ab81373ece4271d3ff0e56d
all runs: OK
# git bisect good 34b8ab091f9ef57a2bb3c8c8359a0a03a8abf2f9
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[9df1c28bb75217b244257152ab7d788bb2a386d0] bpf: add writable context for raw tracepoints
testing commit 9df1c28bb75217b244257152ab7d788bb2a386d0 with gcc (GCC) 8.1.0
kernel signature: bfd2223d1d0888a1540a8adf933f8cf5aec742503af1034261d7f1d0f68f8e27
run #0: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #1: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #2: crashed: BUG: unable to handle kernel paging request in bpf_trace_run3
run #3: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #4: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #5: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #6: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #7: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #8: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
run #9: crashed: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
# git bisect bad 9df1c28bb75217b244257152ab7d788bb2a386d0
9df1c28bb75217b244257152ab7d788bb2a386d0 is the first bad commit
commit 9df1c28bb75217b244257152ab7d788bb2a386d0
Author: Matt Mullins <mmullins@fb.com>
Date:   Fri Apr 26 11:49:47 2019 -0700

    bpf: add writable context for raw tracepoints
    
    This is an opt-in interface that allows a tracepoint to provide a safe
    buffer that can be written from a BPF_PROG_TYPE_RAW_TRACEPOINT program.
    The size of the buffer must be a compile-time constant, and is checked
    before allowing a BPF program to attach to a tracepoint that uses this
    feature.
    
    The pointer to this buffer will be the first argument of tracepoints
    that opt in; the pointer is valid and can be bpf_probe_read() by both
    BPF_PROG_TYPE_RAW_TRACEPOINT and BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE
    programs that attach to such a tracepoint, but the buffer to which it
    points may only be written by the latter.
    
    Signed-off-by: Matt Mullins <mmullins@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

 include/linux/bpf.h             |  2 ++
 include/linux/bpf_types.h       |  1 +
 include/linux/tracepoint-defs.h |  1 +
 include/trace/bpf_probe.h       | 27 +++++++++++++++++++++++++--
 include/uapi/linux/bpf.h        |  1 +
 kernel/bpf/syscall.c            |  8 ++++++--
 kernel/bpf/verifier.c           | 31 +++++++++++++++++++++++++++++++
 kernel/trace/bpf_trace.c        | 24 ++++++++++++++++++++++++
 8 files changed, 91 insertions(+), 4 deletions(-)
culprit signature: bfd2223d1d0888a1540a8adf933f8cf5aec742503af1034261d7f1d0f68f8e27
parent  signature: 429d7f0b4a1183e67d2ac70af2defdfae4f16e4d4ab81373ece4271d3ff0e56d
revisions tested: 24, total time: 4h44m15.225960418s (build: 2h17m10.358792819s, test: 2h24m31.782081103s)
first bad commit: 9df1c28bb75217b244257152ab7d788bb2a386d0 bpf: add writable context for raw tracepoints
recipients (to): ["ast@kernel.org" "mmullins@fb.com" "yhs@fb.com"]
recipients (cc): []
crash: BUG: unable to handle kernel paging request in __bpf_trace_sched_switch
BUG: unable to handle kernel paging request at ffffffffa00c8524
#PF error: [INSTR]
PGD 9872067 P4D 9872067 PUD 9873063 PMD a086e067 PTE 0
Oops: 0010 [#1] PREEMPT SMP KASAN
CPU: 0 PID: 12 Comm: kworker/0:1 Not tainted 5.1.0-rc5-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Workqueue: events bpf_prog_free_deferred
RIP: 0010:0xffffffffa00c8524
Code: Bad RIP value.
RSP: 0018:ffff8880b5907718 EFLAGS: 00010046
RAX: dffffc0000000000 RBX: ffffc90001a13000 RCX: 0000000000000000
RDX: 1ffff92000342606 RSI: ffffc90001a13038 RDI: ffff8880b5907748
RBP: ffff8880b59077a8 R08: ffffed1017445960 R09: ffffed101744595f
R10: ffffed101744595f R11: ffff8880ba22cafb R12: 1ffff11016b20ee5
R13: dffffc0000000000 R14: ffff8880b5907788 R15: ffff88809c08b100
FS:  0000000000000000(0000) GS:ffff8880ba200000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: ffffffffa00c84fa CR3: 000000009f165000 CR4: 00000000001406f0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 __bpf_trace_sched_switch+0xd/0x10 include/trace/events/sched.h:138
 trace_sched_switch include/trace/events/sched.h:138 [inline]
 __schedule+0xd94/0x20c0 kernel/sched/core.c:3515
 preempt_schedule_common+0x1f/0xe0 kernel/sched/core.c:3642
 preempt_schedule+0x20/0x30 kernel/sched/core.c:3668
 ___preempt_schedule+0x16/0x18
 on_each_cpu+0x76/0x80 kernel/smp.c:606
 flush_tlb_kernel_range+0x87/0xe0 arch/x86/mm/tlb.c:794
 __purge_vmap_area_lazy+0xfe/0x250 mm/vmalloc.c:680
 vm_unmap_aliases+0x2b8/0x370 mm/vmalloc.c:1112
 change_page_attr_set_clr+0x1e5/0x5e0 arch/x86/mm/pageattr.c:1698
 change_page_attr_set arch/x86/mm/pageattr.c:1748 [inline]
 set_memory_rw+0x6e/0x90 arch/x86/mm/pageattr.c:1987
 bpf_jit_free+0x82/0x270
 bpf_prog_free_deferred+0x240/0x360 kernel/bpf/core.c:1989
 process_one_work+0x7b9/0x15e0 kernel/workqueue.c:2269
 worker_thread+0x85/0xb60 kernel/workqueue.c:2415
 kthread+0x324/0x3e0 kernel/kthread.c:253
 ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
Modules linked in:
CR2: ffffffffa00c8524
---[ end trace c4fe2eb43dd5f900 ]---
RIP: 0010:0xffffffffa00c8524
Code: Bad RIP value.
RSP: 0018:ffff8880b5907718 EFLAGS: 00010046
RAX: dffffc0000000000 RBX: ffffc90001a13000 RCX: 0000000000000000
RDX: 1ffff92000342606 RSI: ffffc90001a13038 RDI: ffff8880b5907748
RBP: ffff8880b59077a8 R08: ffffed1017445960 R09: ffffed101744595f
R10: ffffed101744595f R11: ffff8880ba22cafb R12: 1ffff11016b20ee5
R13: dffffc0000000000 R14: ffff8880b5907788 R15: ffff88809c08b100
FS:  0000000000000000(0000) GS:ffff8880ba200000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: ffffffffa00c84fa CR3: 000000009f165000 CR4: 00000000001406f0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400

