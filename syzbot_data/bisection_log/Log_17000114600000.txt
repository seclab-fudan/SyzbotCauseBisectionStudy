bisecting cause commit starting from a131c2bf165684315f606fdd88cf80be22ba32f3
building syzkaller on baa5258a5eddb26cc15d56ac371cb2350a3f1302
testing commit a131c2bf165684315f606fdd88cf80be22ba32f3 with gcc (GCC) 8.1.0
run #0: crashed: KASAN: use-after-free Read in class_equal
run #1: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #2: crashed: general protection fault in tls_setsockopt
run #3: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #4: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #5: crashed: KASAN: use-after-free Read in class_equal
run #6: crashed: KASAN: use-after-free Read in tick_sched_handle
run #7: crashed: KASAN: use-after-free Read in class_equal
run #8: crashed: KASAN: use-after-free Read in class_equal
run #9: crashed: KASAN: use-after-free Read in class_equal
testing release v5.2
testing commit 0ecfebd2b52404ae0c54a878c872bb93363ada36 with gcc (GCC) 8.1.0
run #0: crashed: general protection fault in tls_setsockopt
run #1: crashed: KASAN: use-after-free Read in class_equal
run #2: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #3: crashed: kernel panic: corrupted stack end in corrupted
run #4: crashed: KASAN: use-after-free Read in class_equal
run #5: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #6: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #7: crashed: kernel panic: corrupted stack end in corrupted
run #8: crashed: kernel panic: corrupted stack end in corrupted
run #9: crashed: KASAN: slab-out-of-bounds Read in class_equal
testing release v5.1
testing commit e93c9c99a629c61837d5a7fc2120cd2b6c70dbdd with gcc (GCC) 8.1.0
all runs: crashed: WARNING: ODEBUG bug in del_timer
testing release v5.0
testing commit 1c163f4c7b3f621efff9b28a47abb36f7378d783 with gcc (GCC) 8.1.0
run #0: crashed: WARNING in strp_done
run #1: crashed: WARNING in strp_done
run #2: crashed: WARNING in strp_done
run #3: crashed: WARNING in strp_done
run #4: crashed: WARNING in corrupted
run #5: crashed: WARNING in strp_done
run #6: crashed: WARNING in strp_done
run #7: crashed: WARNING in strp_done
run #8: crashed: WARNING in strp_done
run #9: crashed: WARNING in strp_done
testing release v4.20
testing commit 8fe28cb58bcb235034b64cbbb7550a8a43fd88be with gcc (GCC) 8.1.0
run #0: crashed: general protection fault in tls_setsockopt
run #1: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #2: crashed: KASAN: use-after-free Read in class_equal
run #3: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #4: crashed: KASAN: use-after-free Read in class_equal
run #5: crashed: KASAN: use-after-free Read in class_equal
run #6: crashed: kernel panic: corrupted stack end in corrupted
run #7: crashed: KASAN: use-after-free Read in class_equal
run #8: crashed: kernel panic: corrupted stack end in sys_futex
run #9: crashed: KASAN: slab-out-of-bounds Read in class_equal
testing release v4.19
testing commit 84df9525b0c27f3ebc2ebb1864fa62a97fdedb7d with gcc (GCC) 8.1.0
all runs: OK
# git bisect start v4.20 v4.19
Bisecting: 7499 revisions left to test after this (roughly 13 steps)
[ec9c166434595382be3babf266febf876327774d] Merge tag 'mips_fixes_4.20_1' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux
testing commit ec9c166434595382be3babf266febf876327774d with gcc (GCC) 8.1.0
run #0: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #1: crashed: kernel panic: corrupted stack end in corrupted
run #2: crashed: KASAN: use-after-free Read in class_equal
run #3: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #4: crashed: kernel panic: corrupted stack end in corrupted
run #5: crashed: KASAN: use-after-free Read in class_equal
run #6: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #7: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #8: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #9: crashed: KASAN: slab-out-of-bounds Read in class_equal
# git bisect bad ec9c166434595382be3babf266febf876327774d
Bisecting: 3252 revisions left to test after this (roughly 12 steps)
[50b825d7e87f4cff7070df6eb26390152bb29537] Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next
testing commit 50b825d7e87f4cff7070df6eb26390152bb29537 with gcc (GCC) 8.1.0
run #0: crashed: KASAN: use-after-free Read in class_equal
run #1: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #2: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #3: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #4: crashed: KASAN: slab-out-of-bounds Read in usage_match
run #5: crashed: KASAN: use-after-free Read in class_equal
run #6: crashed: KASAN: use-after-free Read in class_equal
run #7: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #8: crashed: KASAN: use-after-free Read in class_equal
run #9: crashed: general protection fault in tls_setsockopt
# git bisect bad 50b825d7e87f4cff7070df6eb26390152bb29537
Bisecting: 2120 revisions left to test after this (roughly 11 steps)
[99e9acd85ccbdc8f5785f9e961d4956e96bd6aa5] Merge tag 'mlx5-updates-2018-10-17' of git://git.kernel.org/pub/scm/linux/kernel/git/saeed/linux
testing commit 99e9acd85ccbdc8f5785f9e961d4956e96bd6aa5 with gcc (GCC) 8.1.0
run #0: crashed: KASAN: use-after-free Read in class_equal
run #1: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #2: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #3: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #4: crashed: general protection fault in tls_setsockopt
run #5: crashed: KASAN: use-after-free Read in class_equal
run #6: crashed: KASAN: use-after-free Read in class_equal
run #7: crashed: KASAN: use-after-free Read in sk_psock_link_pop
run #8: crashed: KASAN: slab-out-of-bounds Write in __unwind_start
run #9: crashed: general protection fault in tls_setsockopt
# git bisect bad 99e9acd85ccbdc8f5785f9e961d4956e96bd6aa5
Bisecting: 989 revisions left to test after this (roughly 10 steps)
[d793fb46822ff7408a1767313ef6b12e811baa55] Merge tag 'wireless-drivers-next-for-davem-2018-10-02' of git://git.kernel.org/pub/scm/linux/kernel/git/kvalo/wireless-drivers-next
testing commit d793fb46822ff7408a1767313ef6b12e811baa55 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good d793fb46822ff7408a1767313ef6b12e811baa55
Bisecting: 461 revisions left to test after this (roughly 9 steps)
[071a234ad744ab9a1e9c948874d5f646a2964734] Merge git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next
testing commit 071a234ad744ab9a1e9c948874d5f646a2964734 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 071a234ad744ab9a1e9c948874d5f646a2964734
Bisecting: 229 revisions left to test after this (roughly 8 steps)
[f95cd52476dee761a1a8ebe617dd01793e0eb39c] Merge ath-next from git://git.kernel.org/pub/scm/linux/kernel/git/kvalo/ath.git
testing commit f95cd52476dee761a1a8ebe617dd01793e0eb39c with gcc (GCC) 8.1.0
all runs: OK
# git bisect good f95cd52476dee761a1a8ebe617dd01793e0eb39c
Bisecting: 114 revisions left to test after this (roughly 7 steps)
[e85679511e48168b0f066b6ae585556b5e0d8f5b] Merge git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next
testing commit e85679511e48168b0f066b6ae585556b5e0d8f5b with gcc (GCC) 8.1.0
run #0: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #1: crashed: KASAN: use-after-free Read in class_equal
run #2: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #3: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #4: crashed: KASAN: use-after-free Read in class_equal
run #5: crashed: KASAN: use-after-free Read in class_equal
run #6: crashed: KASAN: slab-out-of-bounds Read in class_equal
run #7: crashed: KASAN: use-after-free Read in class_equal
run #8: crashed: KASAN: use-after-free Read in class_equal
run #9: crashed: no output from test machine
# git bisect bad e85679511e48168b0f066b6ae585556b5e0d8f5b
Bisecting: 57 revisions left to test after this (roughly 6 steps)
[23aefdd761599e42d7f1f6504ff38c558e18de2a] bnxt_en: Modify bnxt_ring_alloc_send_msg() to support 57500 chips.
testing commit 23aefdd761599e42d7f1f6504ff38c558e18de2a with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 23aefdd761599e42d7f1f6504ff38c558e18de2a
Bisecting: 28 revisions left to test after this (roughly 5 steps)
[8a615c6b0352a9ec56151b6c95d68e0a2eef5cf0] bpf: Allow sk_lookup with IPv6 module
testing commit 8a615c6b0352a9ec56151b6c95d68e0a2eef5cf0 with gcc (GCC) 8.1.0
run #0: crashed: kernel panic: corrupted stack end in corrupted
run #1: crashed: BUG: unable to handle kernel NULL pointer dereference in corrupted
run #2: crashed: general protection fault in tls_setsockopt
run #3: crashed: BUG: unable to handle kernel NULL pointer dereference in corrupted
run #4: crashed: KASAN: out-of-bounds Read in corrupted
run #5: crashed: kernel panic: corrupted stack end in corrupted
run #6: crashed: BUG: sleeping function called from invalid context in corrupted
run #7: crashed: BUG: corrupted list in account_entity_enqueue
run #8: crashed: KASAN: use-after-free Read in corrupted
run #9: crashed: no output from test machine
# git bisect bad 8a615c6b0352a9ec56151b6c95d68e0a2eef5cf0
Bisecting: 14 revisions left to test after this (roughly 4 steps)
[0ef6bf39f09832866fd581cbafafbad9b2469eb3] bpftool: Allow to add compiler flags via EXTRA_CFLAGS variable
testing commit 0ef6bf39f09832866fd581cbafafbad9b2469eb3 with gcc (GCC) 8.1.0
run #0: crashed: KASAN: use-after-free Read in psock_map_pop
run #1: OK
run #2: OK
run #3: OK
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
# git bisect bad 0ef6bf39f09832866fd581cbafafbad9b2469eb3
Bisecting: 6 revisions left to test after this (roughly 3 steps)
[7c85c448e7d74c4ddd759440a2141eab663567cf] selftests/bpf: test_verifier, check bpf_map_lookup_elem access in bpf prog
testing commit 7c85c448e7d74c4ddd759440a2141eab663567cf with gcc (GCC) 8.1.0
run #0: crashed: KASAN: use-after-free Read in psock_map_pop
run #1: crashed: KASAN: use-after-free Read in psock_map_pop
run #2: crashed: KASAN: use-after-free Read in psock_map_pop
run #3: OK
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
# git bisect bad 7c85c448e7d74c4ddd759440a2141eab663567cf
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[3b4a63f674e94795c9b76a41b36364b8aec232e1] bpf: return EOPNOTSUPP when map lookup isn't supported
testing commit 3b4a63f674e94795c9b76a41b36364b8aec232e1 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 3b4a63f674e94795c9b76a41b36364b8aec232e1
Bisecting: 1 revision left to test after this (roughly 1 step)
[8ec92dc22e0e3460cfd29263731c6214d283ea28] tools/bpf: bpftool, print strerror when map lookup error occurs
testing commit 8ec92dc22e0e3460cfd29263731c6214d283ea28 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 8ec92dc22e0e3460cfd29263731c6214d283ea28
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[908142e61b2e9c2411e8bc4e5092a6ab06eca8e4] selftests/bpf: test_verifier, change names of fixup maps
testing commit 908142e61b2e9c2411e8bc4e5092a6ab06eca8e4 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 908142e61b2e9c2411e8bc4e5092a6ab06eca8e4
7c85c448e7d74c4ddd759440a2141eab663567cf is the first bad commit
commit 7c85c448e7d74c4ddd759440a2141eab663567cf
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Tue Oct 9 10:04:54 2018 +0900

    selftests/bpf: test_verifier, check bpf_map_lookup_elem access in bpf prog
    
    map_lookup_elem isn't supported by certain map types like:
    - BPF_MAP_TYPE_PROG_ARRAY
    - BPF_MAP_TYPE_STACK_TRACE
    - BPF_MAP_TYPE_XSKMAP
    - BPF_MAP_TYPE_SOCKMAP/BPF_MAP_TYPE_SOCKHASH
    Let's add verfier tests to check whether verifier prevents
    bpf_map_lookup_elem call on above programs from bpf program.
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

:040000 040000 eb37336dc6dc036375ebb157e2bd3e9204316985 b75c710ec5f60cc394e3dd43862b69516b8d7da5 M	tools
revisions tested: 20, total time: 4h25m12.929177206s (build: 1h47m50.412267297s, test: 2h31m31.034796732s)
first bad commit: 7c85c448e7d74c4ddd759440a2141eab663567cf selftests/bpf: test_verifier, check bpf_map_lookup_elem access in bpf prog
cc: ["ast@kernel.org" "bhole_prashant_q7@lab.ntt.co.jp" "daniel@iogearbox.net" "linux-kernel@vger.kernel.org" "linux-kselftest@vger.kernel.org" "netdev@vger.kernel.org" "shuah@kernel.org" "songliubraving@fb.com"]
crash: KASAN: use-after-free Read in psock_map_pop
==================================================================
BUG: KASAN: use-after-free in debug_spin_lock_before kernel/locking/spinlock_debug.c:83 [inline]
BUG: KASAN: use-after-free in do_raw_spin_lock+0x1c0/0x200 kernel/locking/spinlock_debug.c:112
Read of size 4 at addr ffff8800a133c6f4 by task syz-executor.0/16893

CPU: 1 PID: 16893 Comm: syz-executor.0 Not tainted 4.19.0-rc6+ #1
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x109/0x15a lib/dump_stack.c:113
 print_address_description.cold.8+0x9/0x1ff mm/kasan/report.c:256
 kasan_report_error mm/kasan/report.c:354 [inline]
 kasan_report.cold.9+0x242/0x309 mm/kasan/report.c:412
 __asan_report_load4_noabort+0x14/0x20 mm/kasan/report.c:432
 debug_spin_lock_before kernel/locking/spinlock_debug.c:83 [inline]
 do_raw_spin_lock+0x1c0/0x200 kernel/locking/spinlock_debug.c:112
 __raw_spin_lock_bh include/linux/spinlock_api_smp.h:136 [inline]
 _raw_spin_lock_bh+0x39/0x40 kernel/locking/spinlock.c:168
 spin_lock_bh include/linux/spinlock.h:334 [inline]
 psock_map_pop.isra.23+0x1f/0x1b0 kernel/bpf/sockmap.c:302
 bpf_tcp_remove+0x435/0x960 kernel/bpf/sockmap.c:366
 bpf_tcp_close+0xd2/0x280 kernel/bpf/sockmap.c:403
 inet_release+0xd9/0x1c0 net/ipv4/af_inet.c:428
 inet6_release+0x46/0x60 net/ipv6/af_inet6.c:458
 __sock_release+0xc2/0x230 net/socket.c:579
 sock_close+0x10/0x20 net/socket.c:1141
 __fput+0x249/0x7f0 fs/file_table.c:278
 ____fput+0x9/0x10 fs/file_table.c:309
 task_work_run+0x108/0x180 kernel/task_work.c:113
 tracehook_notify_resume include/linux/tracehook.h:193 [inline]
 exit_to_usermode_loop+0x1a9/0x200 arch/x86/entry/common.c:166
 prepare_exit_to_usermode arch/x86/entry/common.c:197 [inline]
 syscall_return_slowpath arch/x86/entry/common.c:268 [inline]
 do_syscall_64+0x407/0x4d0 arch/x86/entry/common.c:293
 entry_SYSCALL_64_after_hwframe+0x49/0xbe
RIP: 0033:0x413501
Code: 75 14 b8 03 00 00 00 0f 05 48 3d 01 f0 ff ff 0f 83 04 1b 00 00 c3 48 83 ec 08 e8 0a fc ff ff 48 89 04 24 b8 03 00 00 00 0f 05 <48> 8b 3c 24 48 89 c2 e8 53 fc ff ff 48 89 d0 48 83 c4 08 48 3d 01
RSP: 002b:00007ffde70b7450 EFLAGS: 00000293 ORIG_RAX: 0000000000000003
RAX: 0000000000000000 RBX: 0000000000000006 RCX: 0000000000413501
RDX: 0000000000000000 RSI: 0000000000000081 RDI: 0000000000000005
RBP: 0000000000000000 R08: 00000000007613a0 R09: ffffffffffffffff
R10: 00007ffde70b7520 R11: 0000000000000293 R12: 000000000075bfc8
R13: 0000000000000005 R14: 00000000007613a8 R15: ffffffffffffffff

Allocated by task 16905:
 save_stack+0x43/0xd0 mm/kasan/kasan.c:448
 set_track mm/kasan/kasan.c:460 [inline]
 kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
 kmem_cache_alloc_node_trace+0x14c/0x730 mm/slab.c:3663
 kmalloc_node include/linux/slab.h:551 [inline]
 kzalloc_node include/linux/slab.h:718 [inline]
 smap_init_psock kernel/bpf/sockmap.c:1634 [inline]
 __sock_map_ctx_update_elem.isra.26+0x32c/0xcd0 kernel/bpf/sockmap.c:1938
 sock_hash_ctx_update_elem.isra.30+0x63a/0x1040 kernel/bpf/sockmap.c:2409
 sock_hash_update_elem+0x1b6/0x390 kernel/bpf/sockmap.c:2493
 map_update_elem+0x591/0xb50 kernel/bpf/syscall.c:807
 __do_sys_bpf kernel/bpf/syscall.c:2387 [inline]
 __se_sys_bpf kernel/bpf/syscall.c:2358 [inline]
 __x64_sys_bpf+0x208/0x380 kernel/bpf/syscall.c:2358
 do_syscall_64+0xd0/0x4d0 arch/x86/entry/common.c:290
 entry_SYSCALL_64_after_hwframe+0x49/0xbe

Freed by task 8881:
 save_stack+0x43/0xd0 mm/kasan/kasan.c:448
 set_track mm/kasan/kasan.c:460 [inline]
 __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
 kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
 __cache_free mm/slab.c:3498 [inline]
 kfree+0xcf/0x220 mm/slab.c:3813
 smap_gc_work+0x775/0xa90 kernel/bpf/sockmap.c:1627
kobject: 'loop4' (00000000b8120fa7): fill_kobj_path: path = '/devices/virtual/block/loop4'
 process_one_work+0x830/0x15c0 kernel/workqueue.c:2153
 worker_thread+0x85/0xb60 kernel/workqueue.c:2296
 kthread+0x324/0x3e0 kernel/kthread.c:246
 ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:413

The buggy address belongs to the object at ffff8800a133c4c0
 which belongs to the cache kmalloc-1024 of size 1024
The buggy address is located 564 bytes inside of
 1024-byte region [ffff8800a133c4c0, ffff8800a133c8c0)
The buggy address belongs to the page:
page:ffffea000284cf00 count:1 mapcount:0 mapping:ffff88012c35cac0 index:0xffff8800a133d240 compound_mapcount: 0
flags: 0x1fffc0000008100(slab|head)
raw: 01fffc0000008100 ffffea0002537d88 ffffea000252a988 ffff88012c35cac0
kobject: 'loop2' (00000000cfd0cfa3): kobject_uevent_env
raw: ffff8800a133d240 ffff8800a133c040 0000000100000006 0000000000000000
page dumped because: kasan: bad access detected

Memory state around the buggy address:
 ffff8800a133c580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
 ffff8800a133c600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>ffff8800a133c680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
kobject: 'loop2' (00000000cfd0cfa3): fill_kobj_path: path = '/devices/virtual/block/loop2'
                                                             ^
 ffff8800a133c700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
 ffff8800a133c780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
==================================================================

