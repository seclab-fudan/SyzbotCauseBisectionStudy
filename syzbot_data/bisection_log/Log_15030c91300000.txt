bisecting cause commit starting from e3f30ab28ac866256169153157f466d90f44f122
building syzkaller on b599f2fcc734e2183016a340d4f6fc2891d8e41f
testing commit e3f30ab28ac866256169153157f466d90f44f122
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 4533266cb99b07e8ae1ffe6c5889b2c7349d549bc05681c1b2d9556428dfb2b1
run #0: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #1: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #2: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #3: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #4: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #5: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #6: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #7: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #8: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #9: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #10: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #11: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #12: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #13: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #14: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #15: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #16: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #17: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #18: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #19: crashed: KASAN: use-after-free Write in sco_sock_timeout
testing release v5.13
testing commit 62fb9874f5da54fdb243003b386128037319b219
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 909f5b513362d755e99068620c19525cb2afd91ca8725228219fd46574a48866
all runs: OK
# git bisect start e3f30ab28ac866256169153157f466d90f44f122 62fb9874f5da54fdb243003b386128037319b219
Bisecting: 8660 revisions left to test after this (roughly 13 steps)
[9f7b640f001f9781e0803fb60e7b3e7f2f1a1757] Merge tag 'xfs-5.14-merge-6' of git://git.kernel.org/pub/scm/fs/xfs/xfs-linux

testing commit 9f7b640f001f9781e0803fb60e7b3e7f2f1a1757
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 7443be28a8398b0b57413616c11ec58accdc10292b2353a0ca89ea15d82941e9
all runs: OK
# git bisect good 9f7b640f001f9781e0803fb60e7b3e7f2f1a1757
Bisecting: 4358 revisions left to test after this (roughly 12 steps)
[b6fd9e259457b847646844ed202b830e585289dd] Merge tag 'fixes-2021-07-09' of git://git.kernel.org/pub/scm/linux/kernel/git/rppt/memblock

testing commit b6fd9e259457b847646844ed202b830e585289dd
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 1a0813b966c336b25d76c33ee9ce1a4405c1fa4d692c9956834a4307e04119c4
run #0: boot failed: kernel panic: VFS: Unable to mount root fs on unknown-block(NUM,NUM)
run #1: boot failed: BUG: sleeping function called from invalid context in stack_depot_save
run #2: boot failed: kernel panic: VFS: Unable to mount root fs on unknown-block(NUM,NUM)
run #3: boot failed: possible deadlock in fs_reclaim_acquire
run #4: boot failed: kernel panic: VFS: Unable to mount root fs on unknown-block(NUM,NUM)
run #5: boot failed: kernel panic: VFS: Unable to mount root fs on unknown-block(NUM,NUM)
run #6: boot failed: kernel panic: VFS: Unable to mount root fs on unknown-block(NUM,NUM)
run #7: boot failed: kernel panic: VFS: Unable to mount root fs on unknown-block(NUM,NUM)
run #8: boot failed: BUG: sleeping function called from invalid context in stack_depot_save
run #9: boot failed: kernel panic: VFS: Unable to mount root fs on unknown-block(NUM,NUM)
# git bisect skip b6fd9e259457b847646844ed202b830e585289dd
Bisecting: 4358 revisions left to test after this (roughly 12 steps)
[40751c6c9bea6a5cfede7c61ee5f3cb1ab857029] scripts/spdxcheck.py: Strictly read license files in utf-8

testing commit 40751c6c9bea6a5cfede7c61ee5f3cb1ab857029
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: a48ea626f3c1c735dd1f21828433397cc0c666a9f55b6aaa5720dded286f8834
run #0: basic kernel testing failed: possible deadlock in fs_reclaim_acquire
run #1: OK
run #2: OK
run #3: OK
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
# git bisect good 40751c6c9bea6a5cfede7c61ee5f3cb1ab857029
Bisecting: 1663 revisions left to test after this (roughly 11 steps)
[56aee57345825a720dfcda6ea99e550c3141762f] Merge tag 'staging-5.14-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging

testing commit 56aee57345825a720dfcda6ea99e550c3141762f
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 494140932e4d94842b51cd6eb5d6673fa31fa32f6d4a92582a602922e9da96a6
all runs: OK
# git bisect good 56aee57345825a720dfcda6ea99e550c3141762f
Bisecting: 845 revisions left to test after this (roughly 10 steps)
[4ef3960ea19c3b2bced37405b251f05fd4b35545] Merge branch 'add-frag-page-support-in-page-pool'

testing commit 4ef3960ea19c3b2bced37405b251f05fd4b35545
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 2290c65e1dbdfd5c4be503e8f5824abf2dd046253c6f6498fbafaf6235af564d
all runs: OK
# git bisect good 4ef3960ea19c3b2bced37405b251f05fd4b35545
Bisecting: 343 revisions left to test after this (roughly 9 steps)
[f444fea7896dbc267249d27f604082a51b8efca2] Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

testing commit f444fea7896dbc267249d27f604082a51b8efca2
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: ab892f86cf0b908bfb171f8e2343dd1e480e78be4f3042ad1ac543872b6d7480
all runs: OK
# git bisect good f444fea7896dbc267249d27f604082a51b8efca2
Bisecting: 171 revisions left to test after this (roughly 8 steps)
[4fd1315706444aa3ab0f9e0ee2f7b86b6f0502c7] Revert "bnxt: Search VPD with pci_vpd_find_ro_info_keyword()"

testing commit 4fd1315706444aa3ab0f9e0ee2f7b86b6f0502c7
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 946be3844def9e62ca12f7d753bd62edecad490ce20bb14aaab599762b3fa0b2
all runs: crashed: KASAN: use-after-free Write in sco_sock_timeout
# git bisect bad 4fd1315706444aa3ab0f9e0ee2f7b86b6f0502c7
Bisecting: 83 revisions left to test after this (roughly 7 steps)
[f402303ba3ecbcbd1ad1c61d33d144dfcbd0970f] Merge tag 'batadv-next-pullrequest-20210820' of git://git.open-mesh.org/linux-merge

testing commit f402303ba3ecbcbd1ad1c61d33d144dfcbd0970f
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 6b80f3f17704c8f16ba60dc4a52bfef0d8419c648158ef01c8dd6fe6ba6d4937
all runs: crashed: KASAN: use-after-free Write in sco_sock_timeout
# git bisect bad f402303ba3ecbcbd1ad1c61d33d144dfcbd0970f
Bisecting: 43 revisions left to test after this (roughly 6 steps)
[734bc5ff783115aa3164f4e9dd5967ae78e0a8ab] Bluetooth: avoid circular locks in sco_sock_connect

testing commit 734bc5ff783115aa3164f4e9dd5967ae78e0a8ab
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 00b35910522c6276aaf9c674552d67eecd2ed22cb597c982a485bd666fc1f417
all runs: OK
# git bisect good 734bc5ff783115aa3164f4e9dd5967ae78e0a8ab
Bisecting: 21 revisions left to test after this (roughly 5 steps)
[e61fbee7be4b9566f8e8fcb15aadad0f17936c31] Merge tag 'for-net-next-2021-08-19' of git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth-next

testing commit e61fbee7be4b9566f8e8fcb15aadad0f17936c31
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 6b80f3f17704c8f16ba60dc4a52bfef0d8419c648158ef01c8dd6fe6ba6d4937
run #0: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #1: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #2: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #3: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #4: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #5: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #6: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #7: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #8: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #9: crashed: KASAN: use-after-free Write in sco_sock_timeout
# git bisect bad e61fbee7be4b9566f8e8fcb15aadad0f17936c31
Bisecting: 10 revisions left to test after this (roughly 4 steps)
[a31e5a4158d03595ca4258b94397d4097be0ebe4] Bluetooth: mgmt: Pessimize compile-time bounds-check

testing commit a31e5a4158d03595ca4258b94397d4097be0ebe4
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 726fe9c7b6da2c582b9a88a65c6498db35f6f01004cb3e7a6aced49a4922ddbd
run #0: basic kernel testing failed: BUG: sleeping function called from invalid context in stack_depot_save
run #1: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #2: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #3: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #4: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #5: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #6: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #7: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #8: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #9: crashed: KASAN: use-after-free Write in sco_sock_timeout
# git bisect bad a31e5a4158d03595ca4258b94397d4097be0ebe4
Bisecting: 4 revisions left to test after this (roughly 3 steps)
[0ea53674d07fb6db2dd7a7ec2fdc85a12eb246c2] Bluetooth: Move shutdown callback before flushing tx and rx queue

testing commit 0ea53674d07fb6db2dd7a7ec2fdc85a12eb246c2
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 9de9231b28cdcd42ede58d60acc9f37ab28cbc4d24cc20f699cd2310079a9211
run #0: basic kernel testing failed: BUG: sleeping function called from invalid context in stack_depot_save
run #1: basic kernel testing failed: BUG: sleeping function called from invalid context in stack_depot_save
run #2: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #3: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #4: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #5: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #6: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #7: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #8: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #9: crashed: KASAN: use-after-free Write in sco_sock_timeout
# git bisect bad 0ea53674d07fb6db2dd7a7ec2fdc85a12eb246c2
Bisecting: 2 revisions left to test after this (roughly 2 steps)
[b7ce436a5d798bc59e71797952566608a4b4626b] Bluetooth: switch to lock_sock in RFCOMM

testing commit b7ce436a5d798bc59e71797952566608a4b4626b
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: c565a2c8fe6191ffd4d534d26c102a3c71f67b80782408894735359208406366
all runs: OK
# git bisect good b7ce436a5d798bc59e71797952566608a4b4626b
Bisecting: 0 revisions left to test after this (roughly 1 step)
[55981d3541812234e687062926ff199c83f79a39] Bluetooth: btusb: check conditions before enabling USB ALT 3 for WBS

testing commit 55981d3541812234e687062926ff199c83f79a39
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: f282a31b773d3d2ab88f32df3d17c123fa5ae3bd74d8bb60c52201ea8f40ae96
run #0: basic kernel testing failed: possible deadlock in fs_reclaim_acquire
run #1: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #2: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #3: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #4: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #5: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #6: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #7: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #8: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #9: crashed: KASAN: use-after-free Write in sco_sock_timeout
# git bisect bad 55981d3541812234e687062926ff199c83f79a39
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[e1dee2c1de2b4dd00eb44004a4bda6326ed07b59] Bluetooth: fix repeated calls to sco_sock_kill

testing commit e1dee2c1de2b4dd00eb44004a4bda6326ed07b59
compiler: gcc (GCC) 10.2.1 20210217, GNU ld (GNU Binutils for Debian) 2.35.1
kernel signature: 304b06bbd7ced6f7bc9547518df6b6e9f542bffd32f03ce88bafb5772db4592f
run #0: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #1: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #2: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #3: crashed: KASAN: slab-out-of-bounds Write in sco_sock_timeout
run #4: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #5: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #6: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #7: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #8: crashed: KASAN: use-after-free Write in sco_sock_timeout
run #9: crashed: KASAN: use-after-free Write in sco_sock_timeout
# git bisect bad e1dee2c1de2b4dd00eb44004a4bda6326ed07b59
e1dee2c1de2b4dd00eb44004a4bda6326ed07b59 is the first bad commit
commit e1dee2c1de2b4dd00eb44004a4bda6326ed07b59
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Tue Aug 10 12:14:10 2021 +0800

    Bluetooth: fix repeated calls to sco_sock_kill
    
    In commit 4e1a720d0312 ("Bluetooth: avoid killing an already killed
    socket"), a check was added to sco_sock_kill to skip killing a socket
    if the SOCK_DEAD flag was set.
    
    This was done after a trace for a use-after-free bug showed that the
    same sock pointer was being killed twice.
    
    Unfortunately, this check prevents sco_sock_kill from running on any
    socket. sco_sock_kill kills a socket only if it's zapped and orphaned,
    however sock_orphan announces that the socket is dead before detaching
    it. i.e., orphaned sockets have the SOCK_DEAD flag set.
    
    To fix this, we remove the check for SOCK_DEAD, and avoid repeated
    calls to sco_sock_kill by removing incorrect calls in:
    
    1. sco_sock_timeout. The socket should not be killed on timeout as
    further processing is expected to be done. For example,
    sco_sock_connect sets the timer then waits for the socket to be
    connected or for an error to be returned.
    
    2. sco_conn_del. This function should clean up resources for the
    connection, but the socket itself should be cleaned up in
    sco_sock_release.
    
    3. sco_sock_close. Calls to sco_sock_close in sco_sock_cleanup_listen
    and sco_sock_release are followed by sco_sock_kill. Hence the
    duplicated call should be removed.
    
    Fixes: 4e1a720d0312 ("Bluetooth: avoid killing an already killed socket")
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>

 net/bluetooth/sco.c | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

culprit signature: 304b06bbd7ced6f7bc9547518df6b6e9f542bffd32f03ce88bafb5772db4592f
parent  signature: c565a2c8fe6191ffd4d534d26c102a3c71f67b80782408894735359208406366
revisions tested: 17, total time: 3h53m4.240370336s (build: 1h59m38.773674342s, test: 1h51m39.025501103s)
first bad commit: e1dee2c1de2b4dd00eb44004a4bda6326ed07b59 Bluetooth: fix repeated calls to sco_sock_kill
recipients (to): ["davem@davemloft.net" "desmondcheongzx@gmail.com" "johan.hedberg@gmail.com" "kuba@kernel.org" "linux-bluetooth@vger.kernel.org" "luiz.dentz@gmail.com" "luiz.von.dentz@intel.com" "marcel@holtmann.org" "netdev@vger.kernel.org"]
recipients (cc): ["linux-kernel@vger.kernel.org"]
crash: KASAN: use-after-free Write in sco_sock_timeout
==================================================================
BUG: KASAN: use-after-free in instrument_atomic_read_write include/linux/instrumented.h:101 [inline]
BUG: KASAN: use-after-free in atomic_fetch_add_relaxed include/asm-generic/atomic-instrumented.h:111 [inline]
BUG: KASAN: use-after-free in __refcount_add include/linux/refcount.h:193 [inline]
BUG: KASAN: use-after-free in __refcount_inc include/linux/refcount.h:250 [inline]
BUG: KASAN: use-after-free in refcount_inc include/linux/refcount.h:267 [inline]
BUG: KASAN: use-after-free in sock_hold include/net/sock.h:701 [inline]
BUG: KASAN: use-after-free in sco_sock_timeout+0x54/0x1e0 net/bluetooth/sco.c:88
Write of size 4 at addr ffff8880208f8080 by task kworker/0:4/8782

CPU: 0 PID: 8782 Comm: kworker/0:4 Not tainted 5.14.0-rc1-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Workqueue: events sco_sock_timeout
Call Trace:
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x57/0x7d lib/dump_stack.c:105
 print_address_description.constprop.0.cold+0x6c/0x309 mm/kasan/report.c:233
 __kasan_report mm/kasan/report.c:419 [inline]
 kasan_report.cold+0x83/0xdf mm/kasan/report.c:436
 check_region_inline mm/kasan/generic.c:183 [inline]
 kasan_check_range+0x13d/0x180 mm/kasan/generic.c:189
 instrument_atomic_read_write include/linux/instrumented.h:101 [inline]
 atomic_fetch_add_relaxed include/asm-generic/atomic-instrumented.h:111 [inline]
 __refcount_add include/linux/refcount.h:193 [inline]
 __refcount_inc include/linux/refcount.h:250 [inline]
 refcount_inc include/linux/refcount.h:267 [inline]
 sock_hold include/net/sock.h:701 [inline]
 sco_sock_timeout+0x54/0x1e0 net/bluetooth/sco.c:88
 process_one_work+0x84c/0x13d0 kernel/workqueue.c:2276
 worker_thread+0x598/0x1040 kernel/workqueue.c:2422
 kthread+0x38b/0x460 kernel/kthread.c:319
 ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295

Allocated by task 17656:
 kasan_save_stack+0x1b/0x40 mm/kasan/common.c:38
 kasan_set_track mm/kasan/common.c:46 [inline]
 set_alloc_info mm/kasan/common.c:434 [inline]
 ____kasan_kmalloc mm/kasan/common.c:513 [inline]
 ____kasan_kmalloc mm/kasan/common.c:472 [inline]
 __kasan_kmalloc+0x9b/0xd0 mm/kasan/common.c:522
 kmalloc include/linux/slab.h:596 [inline]
 sk_prot_alloc+0xee/0x200 net/core/sock.c:1808
 sk_alloc+0x27/0x8c0 net/core/sock.c:1861
 sco_sock_alloc.constprop.0+0x22/0x200 net/bluetooth/sco.c:491
 sco_sock_create+0xb1/0x160 net/bluetooth/sco.c:526
 bt_sock_create+0x142/0x2e0 net/bluetooth/af_bluetooth.c:130
 __sock_create+0x23e/0x590 net/socket.c:1450
 sock_create net/socket.c:1501 [inline]
 __sys_socket+0xd6/0x1a0 net/socket.c:1543
 __do_sys_socket net/socket.c:1552 [inline]
 __se_sys_socket net/socket.c:1550 [inline]
 __x64_sys_socket+0x6a/0xb0 net/socket.c:1550
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x44/0xae

The buggy address belongs to the object at ffff8880208f8000
 which belongs to the cache kmalloc-2k of size 2048
The buggy address is located 128 bytes inside of
 2048-byte region [ffff8880208f8000, ffff8880208f8800)
The buggy address belongs to the page:
page:ffffea0000823e00 refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff8880208fd000 pfn:0x208f8
head:ffffea0000823e00 order:3 compound_mapcount:0 compound_pincount:0
flags: 0xfff00000010200(slab|head|node=0|zone=1|lastcpupid=0x7ff)
raw: 00fff00000010200 ffffea0000a25408 ffffea0000c57408 ffff88800fc42000
raw: ffff8880208fd000 0000000000080002 00000001ffffffff 0000000000000000
page dumped because: kasan: bad access detected
page_owner tracks the page as allocated
page last allocated via order 3, migratetype Unmovable, gfp_mask 0xd2a20(GFP_ATOMIC|__GFP_NOWARN|__GFP_NORETRY|__GFP_COMP|__GFP_NOMEMALLOC), pid 8951, ts 59508411700, free_ts 59459511433
 prep_new_page mm/page_alloc.c:2433 [inline]
 get_page_from_freelist+0xa6f/0x2f50 mm/page_alloc.c:4166
 __alloc_pages+0x1b2/0x500 mm/page_alloc.c:5374
 alloc_slab_page mm/slub.c:1713 [inline]
 allocate_slab+0x32b/0x4c0 mm/slub.c:1853
 new_slab mm/slub.c:1916 [inline]
 new_slab_objects mm/slub.c:2662 [inline]
 ___slab_alloc+0x4ba/0x820 mm/slub.c:2825
 __slab_alloc.constprop.0+0xa7/0xf0 mm/slub.c:2865
 slab_alloc_node mm/slub.c:2947 [inline]
 __kmalloc_node_track_caller+0x2e3/0x360 mm/slub.c:4681
 kmalloc_reserve net/core/skbuff.c:355 [inline]
 pskb_expand_head+0x11f/0xf50 net/core/skbuff.c:1685
 netlink_trim+0x18f/0x1f0 net/netlink/af_netlink.c:1296
 netlink_broadcast_filtered+0x58/0xac0 net/netlink/af_netlink.c:1501
 netlink_broadcast net/netlink/af_netlink.c:1546 [inline]
 nlmsg_multicast include/net/netlink.h:1033 [inline]
 nlmsg_notify+0x6a/0x1d0 net/netlink/af_netlink.c:2547
 __dev_notify_flags+0x18d/0x220 net/core/dev.c:8847
 dev_change_flags+0xf6/0x150 net/core/dev.c:8889
 do_setlink+0x7d7/0x2cb0 net/core/rtnetlink.c:2714
 __rtnl_newlink+0xaca/0x13b0 net/core/rtnetlink.c:3386
 rtnl_newlink+0x5a/0x90 net/core/rtnetlink.c:3501
 rtnetlink_rcv_msg+0x31d/0x8d0 net/core/rtnetlink.c:5567
page last free stack trace:
 reset_page_owner include/linux/page_owner.h:24 [inline]
 free_pages_prepare mm/page_alloc.c:1343 [inline]
 free_pcp_prepare+0x2c5/0x780 mm/page_alloc.c:1394
 free_unref_page_prepare mm/page_alloc.c:3329 [inline]
 free_unref_page+0x19/0x690 mm/page_alloc.c:3408
 unfreeze_partials+0x17c/0x1d0 mm/slub.c:2443
 put_cpu_partial+0x13d/0x230 mm/slub.c:2479
 qlink_free mm/kasan/quarantine.c:146 [inline]
 qlist_free_all+0x5a/0xc0 mm/kasan/quarantine.c:165
 kasan_quarantine_reduce+0x180/0x200 mm/kasan/quarantine.c:272
 __kasan_slab_alloc+0x8e/0xa0 mm/kasan/common.c:444
 kasan_slab_alloc include/linux/kasan.h:253 [inline]
 slab_post_alloc_hook mm/slab.h:512 [inline]
 slab_alloc_node mm/slub.c:2981 [inline]
 slab_alloc mm/slub.c:2989 [inline]
 kmem_cache_alloc_trace+0x26d/0x3c0 mm/slub.c:3006
 kmalloc include/linux/slab.h:591 [inline]
 tomoyo_print_header security/tomoyo/audit.c:156 [inline]
 tomoyo_init_log+0x183/0x1cf0 security/tomoyo/audit.c:255
 tomoyo_supervisor+0x2fc/0xc40 security/tomoyo/common.c:2097
 tomoyo_audit_path_number_log security/tomoyo/file.c:235 [inline]
 tomoyo_path_number_perm+0x38a/0x4d0 security/tomoyo/file.c:734
 security_file_ioctl+0x44/0x80 security/security.c:1539
 __do_sys_ioctl fs/ioctl.c:1063 [inline]
 __se_sys_ioctl fs/ioctl.c:1055 [inline]
 __x64_sys_ioctl+0x99/0x190 fs/ioctl.c:1055
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x44/0xae

Memory state around the buggy address:
 ffff8880208f7f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
 ffff8880208f8000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>ffff8880208f8080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                   ^
 ffff8880208f8100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
 ffff8880208f8180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
==================================================================

