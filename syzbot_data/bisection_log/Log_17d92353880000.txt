ci starts bisection 2022-11-27 17:23:00.493695217 +0000 UTC m=+218386.610278454
bisecting cause commit starting from 9e46a79967326efb03c481ddfd58902475bd920d
building syzkaller on 74a66371788c1eb22bde25c9c422c7754596d7f5
ensuring issue is reproducible on original commit 9e46a79967326efb03c481ddfd58902475bd920d

testing commit 9e46a79967326efb03c481ddfd58902475bd920d gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: c5385e0c5ab8254f6a0e9519c01152ceaecde81b105db510843ccfae18775a20
all runs: crashed: general protection fault in btrfs_ioctl_send
testing release v6.0
testing commit 4fe89d07dcc2804c8b562f6c7896a45643d34b2f gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 98621c6396ed385915cb5cd6838c4dac38ab16fc34041763c30ea572dcbe36e4
all runs: OK
# git bisect start 9e46a79967326efb03c481ddfd58902475bd920d 4fe89d07dcc2804c8b562f6c7896a45643d34b2f
Bisecting: 12638 revisions left to test after this (roughly 14 steps)
[9f63869a5682d5fa9bc5563577fe3270e7cbf4f2] ASoC: codecs: lpass-wsa-macro: parse clock-output-names

testing commit 9f63869a5682d5fa9bc5563577fe3270e7cbf4f2 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 9ca610effc44093070d6c51b632f1c93097779968098ebca92302bf2e44e2a37
all runs: boot failed: WARNING in __netif_set_xps_queue
# git bisect skip 9f63869a5682d5fa9bc5563577fe3270e7cbf4f2
Bisecting: 12638 revisions left to test after this (roughly 14 steps)
[24c52aa35a00284c66eb3bfa9ff811d440fe6c14] media: renesas: vsp1: Add support to deassert/assert reset line

testing commit 24c52aa35a00284c66eb3bfa9ff811d440fe6c14 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 7d54dbe85c8ad33deb8abdc106e7b5deeed236f0b0283310e2646c0ccf3a6d49
run #0: boot failed: general protection fault in really_probe
run #1: boot failed: BUG: unable to handle kernel paging request in kernfs_create_dir_ns
run #2: boot failed: general protection fault in rcu_core
run #3: boot failed: general protection fault in __devinet_sysctl_register
run #4: boot failed: general protection fault in rcu_core
run #5: boot failed: general protection fault in netdev_queue_update_kobjects
run #6: boot failed: WARNING in corrupted
run #7: boot failed: general protection fault in driver_register
run #8: boot failed: general protection fault in driver_register
run #9: boot failed: WARNING in copy_process
# git bisect skip 24c52aa35a00284c66eb3bfa9ff811d440fe6c14
Bisecting: 12638 revisions left to test after this (roughly 14 steps)
[5b79480ce1978864ac3f06f2134dfa3b6691fe74] power: supply: fix residue sysfs file in error handle route of __power_supply_register()

testing commit 5b79480ce1978864ac3f06f2134dfa3b6691fe74 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: caa02af63d872ae4a01ce9f157068c8b6e7a97b1d69c1c72a60431928302db45
all runs: boot failed: WARNING in __netif_set_xps_queue
# git bisect skip 5b79480ce1978864ac3f06f2134dfa3b6691fe74
Bisecting: 12638 revisions left to test after this (roughly 14 steps)
[741d1e3783d9486d76534f2f08442e1f0eb108a1] iio: magnetometer: yamaha-yas530: Use pointers as driver data

testing commit 741d1e3783d9486d76534f2f08442e1f0eb108a1 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 410fface04df64e225960976b69ab756d0ad5b42c0bb8e51854b60f2ba57d13c
run #0: boot failed: general protection fault in really_probe
run #1: boot failed: general protection fault in getname_kernel
run #2: boot failed: BUG: unable to handle kernel paging request in kernel_execve
run #3: boot failed: general protection fault in netdev_queue_update_kobjects
run #4: boot failed: kernel BUG in __phys_addr
run #5: boot failed: general protection fault in driver_register
run #6: boot failed: general protection fault in alloc_netdev_mqs
run #7: boot failed: BUG: unable to handle kernel paging request in kernel_execve
run #8: boot failed: general protection fault in blk_alloc_flush_queue
run #9: boot failed: general protection fault in driver_register
# git bisect skip 741d1e3783d9486d76534f2f08442e1f0eb108a1
Bisecting: 12638 revisions left to test after this (roughly 14 steps)
[d4ad017d634561907ecdd1e467a28612b369ee00] platform: use fwnode_irq_get_byname instead of of_irq_get_byname to get irq

testing commit d4ad017d634561907ecdd1e467a28612b369ee00 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 9a3e456eccf0789615292032342f4cb63bd55c326ed72bbe7ebdd76bd5322884
all runs: boot failed: WARNING in __netif_set_xps_queue
# git bisect skip d4ad017d634561907ecdd1e467a28612b369ee00
Bisecting: 12638 revisions left to test after this (roughly 14 steps)
[be8432e7166ef8cc5647d6d350e73897d48a9659] mm/mmap: use the maple tree in find_vma() instead of the rbtree.

testing commit be8432e7166ef8cc5647d6d350e73897d48a9659 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 5c9235921c0ec3e907d975d33ca861d4ce479f8c13d2c0f9932973b74c184c45
all runs: boot failed: general protection fault in __vma_adjust
# git bisect skip be8432e7166ef8cc5647d6d350e73897d48a9659
Bisecting: 12638 revisions left to test after this (roughly 14 steps)
[e59bf547a7dd366f93bfebb7487959580ca6c0ec] ASoC: tas2770: Fix set_tdm_slot in case of single slot

testing commit e59bf547a7dd366f93bfebb7487959580ca6c0ec gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 03e6fb6146eee2206be5a86bec6343d6714bccb351f014b590a6991b63f50771
all runs: boot failed: WARNING in __netif_set_xps_queue
# git bisect skip e59bf547a7dd366f93bfebb7487959580ca6c0ec
Bisecting: 12638 revisions left to test after this (roughly 14 steps)
[53a406803ca5b0b1f91beffacad4321fae4fa2a7] net_sched: remove impossible conditions

testing commit 53a406803ca5b0b1f91beffacad4321fae4fa2a7 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 4ed45e76c29d3ff29ffc9771eb9a0f78e5ad5abb7f6725174371a05aac37ac6c
all runs: OK
# git bisect good 53a406803ca5b0b1f91beffacad4321fae4fa2a7
Bisecting: 12446 revisions left to test after this (roughly 14 steps)
[10b5ce6743c839fa75336042c64e2479caec9430] staging: media: tegra-video: fix chan->mipi value on error

testing commit 10b5ce6743c839fa75336042c64e2479caec9430 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 241bdaa83861ffdf943e01c0f65ac2b808e5edc3821fc448c1a70cc6200070c0
all runs: OK
# git bisect good 10b5ce6743c839fa75336042c64e2479caec9430
Bisecting: 6022 revisions left to test after this (roughly 13 steps)
[8da89fad499f5d6beb99c9ad1e831287dbbf9f37] Merge branch 'master' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next.git

testing commit 8da89fad499f5d6beb99c9ad1e831287dbbf9f37 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 3250217c3b01d00cca3636a08bdfbcb4a3f2309111cc47e88288b4d92c09ba08
all runs: crashed: general protection fault in btrfs_ioctl_send
# git bisect bad 8da89fad499f5d6beb99c9ad1e831287dbbf9f37
Bisecting: 3400 revisions left to test after this (roughly 12 steps)
[3437b01006458c0407dbb8853ca945f5be505dc4] Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap.git

testing commit 3437b01006458c0407dbb8853ca945f5be505dc4 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
failed to run ["make" "-j" "64" "ARCH=x86_64" "bzImage"]: exit status 2
# git bisect skip 3437b01006458c0407dbb8853ca945f5be505dc4
Bisecting: 3400 revisions left to test after this (roughly 12 steps)
[1fa082734076fe2c34d3e4a64334f79bee4a5bf9] nfc: st21nfca: i2c: Convert to i2c's .probe_new()

testing commit 1fa082734076fe2c34d3e4a64334f79bee4a5bf9 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: ec47ad2123286c5c7ac35496ece4ba33b57556a383c780ab20c39ab6264e8689
all runs: OK
# git bisect good 1fa082734076fe2c34d3e4a64334f79bee4a5bf9
Bisecting: 1809 revisions left to test after this (roughly 11 steps)
[849f625f5f84f60a061806086ba92591fe8e9584] Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/qcom/linux.git

testing commit 849f625f5f84f60a061806086ba92591fe8e9584 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 0488261b6fc82247fead05b25276267fab07509c564ee4625326ac6b0e69f317
all runs: OK
# git bisect good 849f625f5f84f60a061806086ba92591fe8e9584
Bisecting: 887 revisions left to test after this (roughly 10 steps)
[a7194ba1d97be574d6a600bce669e9a4252bf63f] Merge branch 'master' of https://github.com/Paragon-Software-Group/linux-ntfs3.git

testing commit a7194ba1d97be574d6a600bce669e9a4252bf63f gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: c80be90d2cfbf59a7c8e86ae93a9cd66870cc38196cc5ca33c51640227378b66
all runs: crashed: general protection fault in btrfs_ioctl_send
# git bisect bad a7194ba1d97be574d6a600bce669e9a4252bf63f
Bisecting: 456 revisions left to test after this (roughly 9 steps)
[f03085e1e4ceab232e4825fa68aefd19ceada21c] Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/idmapping.git

testing commit f03085e1e4ceab232e4825fa68aefd19ceada21c gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 1ec7b55ce7d3142ebcb88e1e20d985c6cbd0a7c5a10a222b4beacf1aa8a12d84
all runs: OK
# git bisect good f03085e1e4ceab232e4825fa68aefd19ceada21c
Bisecting: 228 revisions left to test after this (roughly 8 steps)
[9c5ed2ef100376d41173cd5a6d72e1454785fcef] btrfs: introduce a bitmap based csum range search function

testing commit 9c5ed2ef100376d41173cd5a6d72e1454785fcef gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 71feef5e11befc7861c07962f6ea6338963590c3bc2783aa7b2a39bc96c553c9
all runs: crashed: general protection fault in btrfs_ioctl_send
# git bisect bad 9c5ed2ef100376d41173cd5a6d72e1454785fcef
Bisecting: 113 revisions left to test after this (roughly 7 steps)
[cdb045fccb7049494f4b598a4133b4ad036b9e4e] btrfs: move the snapshot drop related prototypes to extent-tree.h

testing commit cdb045fccb7049494f4b598a4133b4ad036b9e4e gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 95da7c583496f770b3f008d683f066c98a146fc9141912511eb834c6b4950972
all runs: OK
# git bisect good cdb045fccb7049494f4b598a4133b4ad036b9e4e
Bisecting: 56 revisions left to test after this (roughly 6 steps)
[feb69d098f1b70de3a74f428e792c100fce06b5a] btrfs: pass btrfs_inode to btrfs_wq_submit_bio

testing commit feb69d098f1b70de3a74f428e792c100fce06b5a gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 5adf3dcb638a88050362edcacf92eb16cd175c85226cda1a215be0678514cf03
all runs: crashed: general protection fault in btrfs_ioctl_send
# git bisect bad feb69d098f1b70de3a74f428e792c100fce06b5a
Bisecting: 27 revisions left to test after this (roughly 5 steps)
[18b813f1f5af8c9e34c8b4d3624ae3dc8291e0ab] btrfs: raid56: extract scrub read bio list assembly code into a helper

testing commit 18b813f1f5af8c9e34c8b4d3624ae3dc8291e0ab gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 692bdddae1054bca61b202c1f64e9132b6c07902ef7dd384dafbd1d692aae019
all runs: OK
# git bisect good 18b813f1f5af8c9e34c8b4d3624ae3dc8291e0ab
Bisecting: 13 revisions left to test after this (roughly 4 steps)
[b16407395b76af3582d55f1c45dd2a0e3840a4e3] btrfs: send: avoid double extent tree search when finding clone source

testing commit b16407395b76af3582d55f1c45dd2a0e3840a4e3 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 3daa0eced9289334d8bd740ab8e7576703848504c1bc3f371be86a050b6ea057
all runs: crashed: general protection fault in btrfs_ioctl_send
# git bisect bad b16407395b76af3582d55f1c45dd2a0e3840a4e3
Bisecting: 6 revisions left to test after this (roughly 3 steps)
[746ba779a6c5550d6ebf2c2be67ac0c504142987] btrfs: send: optimize clone detection to increase extent sharing

testing commit 746ba779a6c5550d6ebf2c2be67ac0c504142987 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 7dcfe89d55b3547846f21db016459c2e9a64587f72ce7d4e57c7f0bcbb8cfd3d
all runs: OK
# git bisect good 746ba779a6c5550d6ebf2c2be67ac0c504142987
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[6a63879a01759a8bfd5f400afdc5b2bee7c252fa] btrfs: reuse roots ulist on each leaf iteration for iterate_extent_inodes()

testing commit 6a63879a01759a8bfd5f400afdc5b2bee7c252fa gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 1bfdb42ef6ab94516210040271136d2daec92bb79c0cb60a217279e145195298
all runs: OK
# git bisect good 6a63879a01759a8bfd5f400afdc5b2bee7c252fa
Bisecting: 1 revision left to test after this (roughly 1 step)
[d14cd51f13589142902687cfacd09e373251ac6e] btrfs: send: cache leaf to roots mapping during backref walking

testing commit d14cd51f13589142902687cfacd09e373251ac6e gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: c4ce5de86c8572dda4de1bfd0a2c072a4fab4c8dc93d87003044197bc09b0d23
all runs: crashed: general protection fault in btrfs_ioctl_send
# git bisect bad d14cd51f13589142902687cfacd09e373251ac6e
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[718bf8a1288ea09b943805e9a0b77da496b844e1] btrfs: constify ulist parameter of ulist_next()

testing commit 718bf8a1288ea09b943805e9a0b77da496b844e1 gcc
compiler: gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2
kernel signature: 359224b78b3c180aca4a3753e6dbf37c3163446c0be5232365d06f97ed719b1a
all runs: OK
# git bisect good 718bf8a1288ea09b943805e9a0b77da496b844e1
d14cd51f13589142902687cfacd09e373251ac6e is the first bad commit
commit d14cd51f13589142902687cfacd09e373251ac6e
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 1 16:15:50 2022 +0000

    btrfs: send: cache leaf to roots mapping during backref walking
    
    During a send operation, when doing backref walking to determine which
    inodes/offsets/roots we can clone from, the most repetitive and expensive
    step is to map each leaf that has file extent items pointing to the target
    data extent to the IDs of the roots from which the leaves are accessible,
    which happens at iterate_extent_inodes(). That step requires finding every
    parent node of a leaf, then the parent of each parent, and so on until we
    reach a root node. So it's a naturally expensive operation, and repetitive
    because each leaf can have hundreds of file extent items (for a nodesize
    of 16K, that can be slightly over 200 file extent items). There's also
    temporal locality, as we process all file extent items from a leave before
    moving the next leaf.
    
    This change caches the mapping of leaves to root IDs, to avoid repeating
    those computations over and over again. The cache is limited to a maximum
    of 128 entries, with each entry being a struct with a size of 128 bytes,
    so the maximum cache size is 16K plus any nodes internally allocated by
    the maple tree that is used to index pointers to those structs. The cache
    is invalidated whenever we detect relocation happened since we started
    filling the cache, because if relocation happened then extent buffers for
    leaves and nodes of the trees used by a send operation may have been
    reallocated.
    
    This cache also allows for another important optimization that is
    introduced in the next patch in the series.
    
    This change is part of a patchset comprised of the following patches:
    
      01/17 btrfs: fix inode list leak during backref walking at resolve_indirect_refs()
      02/17 btrfs: fix inode list leak during backref walking at find_parent_nodes()
      03/17 btrfs: fix ulist leaks in error paths of qgroup self tests
      04/17 btrfs: remove pointless and double ulist frees in error paths of qgroup tests
      05/17 btrfs: send: avoid unnecessary path allocations when finding extent clone
      06/17 btrfs: send: update comment at find_extent_clone()
      07/17 btrfs: send: drop unnecessary backref context field initializations
      08/17 btrfs: send: avoid unnecessary backref lookups when finding clone source
      09/17 btrfs: send: optimize clone detection to increase extent sharing
      10/17 btrfs: use a single argument for extent offset in backref walking functions
      11/17 btrfs: use a structure to pass arguments to backref walking functions
      12/17 btrfs: reuse roots ulist on each leaf iteration for iterate_extent_inodes()
      13/17 btrfs: constify ulist parameter of ulist_next()
      14/17 btrfs: send: cache leaf to roots mapping during backref walking
      15/17 btrfs: send: skip unnecessary backref iterations
      16/17 btrfs: send: avoid double extent tree search when finding clone source
      17/17 btrfs: send: skip resolution of our own backref when finding clone source
    
    Performance test results are in the changelog of patch 17/17.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

 fs/btrfs/backref.c |  52 +++++++++++----
 fs/btrfs/backref.h |  11 ++++
 fs/btrfs/send.c    | 185 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 236 insertions(+), 12 deletions(-)

culprit signature: c4ce5de86c8572dda4de1bfd0a2c072a4fab4c8dc93d87003044197bc09b0d23
parent  signature: 359224b78b3c180aca4a3753e6dbf37c3163446c0be5232365d06f97ed719b1a
revisions tested: 25, total time: 7h9m37.619800972s (build: 3h53m39.914562158s, test: 3h10m4.261720395s)
first bad commit: d14cd51f13589142902687cfacd09e373251ac6e btrfs: send: cache leaf to roots mapping during backref walking
recipients (to): ["clm@fb.com" "dsterba@suse.com" "dsterba@suse.com" "fdmanana@suse.com" "josef@toxicpanda.com" "linux-btrfs@vger.kernel.org"]
recipients (cc): ["linux-kernel@vger.kernel.org"]
crash: general protection fault in btrfs_ioctl_send
BTRFS info (device loop0): using free space tree
BTRFS info (device loop0): enabling ssd optimizations
BTRFS info (device loop0): auto enabling async discard
BTRFS info (device loop0): checking UUID tree
general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP KASAN
KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
CPU: 1 PID: 4169 Comm: syz-executor.0 Not tainted 6.1.0-rc6-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
RIP: 0010:empty_backref_cache fs/btrfs/send.c:1384 [inline]
RIP: 0010:btrfs_ioctl_send+0x11ff/0x5950 fs/btrfs/send.c:8317
Code: 00 fc ff df 48 c1 ea 03 80 3c 02 00 0f 85 a8 18 00 00 48 8b bd c0 01 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 93 18 00 00 49 bd 00 00 00 00 00 fc ff df 49 39
RSP: 0018:ffffc90004cef8d8 EFLAGS: 00010246
RAX: dffffc0000000000 RBX: ffff88807a8b2940 RCX: 0000000000000001
RDX: 0000000000000000 RSI: ffffffff896b7fc0 RDI: 0000000000000000
RBP: ffff88807a8b2800 R08: 0000000000000000 R09: ffff88807db346ab
R10: ffffed100fb668d5 R11: 0000000000000000 R12: ffff88807a8b29c0
R13: ffffed100f516528 R14: 1ffff1100f516532 R15: ffff88807a8b2998
FS:  00007fdc2ae16700(0000) GS:ffff8880b9b00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00007fdc2a0db228 CR3: 0000000072a95000 CR4: 00000000003506e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 <TASK>
 _btrfs_ioctl_send+0x1ee/0x280 fs/btrfs/ioctl.c:4343
 btrfs_ioctl+0x2df1/0x5650 fs/btrfs/ioctl.c:4634
 vfs_ioctl fs/ioctl.c:51 [inline]
 __do_sys_ioctl fs/ioctl.c:870 [inline]
 __se_sys_ioctl fs/ioctl.c:856 [inline]
 __x64_sys_ioctl+0x123/0x190 fs/ioctl.c:856
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x63/0xcd
RIP: 0033:0x7fdc2a08c0d9
Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 f1 19 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fdc2ae16168 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
RAX: ffffffffffffffda RBX: 00007fdc2a1abf80 RCX: 00007fdc2a08c0d9
RDX: 0000000020000040 RSI: 0000000040489426 RDI: 0000000000000003
RBP: 00007fdc2a0e7ae9 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
R13: 00007fffde71751f R14: 00007fdc2ae16300 R15: 0000000000022000
 </TASK>
Modules linked in:
---[ end trace 0000000000000000 ]---
RIP: 0010:empty_backref_cache fs/btrfs/send.c:1384 [inline]
RIP: 0010:btrfs_ioctl_send+0x11ff/0x5950 fs/btrfs/send.c:8317
Code: 00 fc ff df 48 c1 ea 03 80 3c 02 00 0f 85 a8 18 00 00 48 8b bd c0 01 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 93 18 00 00 49 bd 00 00 00 00 00 fc ff df 49 39
RSP: 0018:ffffc90004cef8d8 EFLAGS: 00010246
RAX: dffffc0000000000 RBX: ffff88807a8b2940 RCX: 0000000000000001
RDX: 0000000000000000 RSI: ffffffff896b7fc0 RDI: 0000000000000000
RBP: ffff88807a8b2800 R08: 0000000000000000 R09: ffff88807db346ab
R10: ffffed100fb668d5 R11: 0000000000000000 R12: ffff88807a8b29c0
R13: ffffed100f516528 R14: 1ffff1100f516532 R15: ffff88807a8b2998
FS:  00007fdc2ae16700(0000) GS:ffff8880b9a00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000557e14f03120 CR3: 0000000072a95000 CR4: 00000000003506f0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
----------------
Code disassembly (best guess), 4 bytes skipped:
   0:	48 c1 ea 03          	shr    $0x3,%rdx
   4:	80 3c 02 00          	cmpb   $0x0,(%rdx,%rax,1)
   8:	0f 85 a8 18 00 00    	jne    0x18b6
   e:	48 8b bd c0 01 00 00 	mov    0x1c0(%rbp),%rdi
  15:	48 b8 00 00 00 00 00 	movabs $0xdffffc0000000000,%rax
  1c:	fc ff df
  1f:	48 89 fa             	mov    %rdi,%rdx
  22:	48 c1 ea 03          	shr    $0x3,%rdx
* 26:	80 3c 02 00          	cmpb   $0x0,(%rdx,%rax,1) <-- trapping instruction
  2a:	0f 85 93 18 00 00    	jne    0x18c3
  30:	49 bd 00 00 00 00 00 	movabs $0xdffffc0000000000,%r13
  37:	fc ff df
  3a:	49                   	rex.WB
  3b:	39                   	.byte 0x39

