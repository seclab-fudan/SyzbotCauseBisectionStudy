bisecting cause commit starting from dda2626b86c2c1813b7bfdd10d2fdd849611fc97
building syzkaller on aba2b2fb3544d9e42991237c13d8cada421deda5
testing commit dda2626b86c2c1813b7bfdd10d2fdd849611fc97 with gcc (GCC) 10.2.1 20210217
kernel signature: 252c0d26bae41f53ab4ce4c1a2b13753854516b4150f9534bfabec885d6980d1
all runs: crashed: general protection fault in hwsim_set_edge_lqi
testing release v5.12
testing commit 9f4ad9e425a1d3b6a34617b8ea226d56a119a717 with gcc (GCC) 10.2.1 20210217
kernel signature: 20a3195b0c2adea39c30d2e9f830a6fa425a34f031f28cd84a5fc4bf09ce8f4d
all runs: crashed: general protection fault in hwsim_set_edge_lqi
testing release v5.11
testing commit f40ddce88593482919761f74910f42f4b84c004b with gcc (GCC) 10.2.1 20210217
kernel signature: 22b26ae1e3be417e2ad324e47433a262e845b6471dfc09f4fa2f647b3330df8e
all runs: OK
# git bisect start 9f4ad9e425a1d3b6a34617b8ea226d56a119a717 f40ddce88593482919761f74910f42f4b84c004b
Bisecting: 6798 revisions left to test after this (roughly 13 steps)
[d99676af540c2dc829999928fb81c58c80a1dce4] Merge tag 'drm-next-2021-02-19' of git://anongit.freedesktop.org/drm/drm

testing commit d99676af540c2dc829999928fb81c58c80a1dce4 with gcc (GCC) 10.2.1 20210217
kernel signature: 7cd59bfe04b0d3e5946650143381ee5740879beddc7e6e99a0f0393131ddacb5
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: crashed: WARNING in kvm_wait
run #3: crashed: WARNING in kvm_wait
run #4: crashed: WARNING in kvm_wait
run #5: crashed: WARNING in kvm_wait
run #6: crashed: WARNING in kvm_wait
run #7: crashed: WARNING in kvm_wait
run #8: crashed: WARNING in kvm_wait
run #9: basic kernel testing failed: failed to copy test binary to VM: timedout ["scp" "-P" "22" "-F" "/dev/null" "-o" "UserKnownHostsFile=/dev/null" "-o" "BatchMode=yes" "-o" "IdentitiesOnly=yes" "-o" "StrictHostKeyChecking=no" "-o" "ConnectTimeout=10" "/tmp/syz-executor172491889" "root@10.128.0.132:./syz-executor172491889"]
# git bisect bad d99676af540c2dc829999928fb81c58c80a1dce4
Bisecting: 3717 revisions left to test after this (roughly 12 steps)
[f9d58de23152f2c16f326d7e014cfa2933b00304] Merge tag 'affs-for-5.12-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux

testing commit f9d58de23152f2c16f326d7e014cfa2933b00304 with gcc (GCC) 10.2.1 20210217
kernel signature: f117a544bd08721c24751d3c047f171fdb726cfc6568f62dfc097d4831349db5
all runs: OK
# git bisect good f9d58de23152f2c16f326d7e014cfa2933b00304
Bisecting: 1854 revisions left to test after this (roughly 11 steps)
[de1617578849acab8e16c9ffdce39b91fb50639d] Merge tag 'media/v5.12-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media

testing commit de1617578849acab8e16c9ffdce39b91fb50639d with gcc (GCC) 10.2.1 20210217
kernel signature: 6d2dd1a671ee012a042a707ca8ffae153c996dff4a168913e67bae831d498d40
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: crashed: WARNING in kvm_wait
run #3: crashed: WARNING in kvm_wait
run #4: crashed: WARNING in kvm_wait
run #5: crashed: WARNING in kvm_wait
run #6: crashed: WARNING in kvm_wait
run #7: crashed: WARNING in kvm_wait
run #8: OK
run #9: boot failed: WARNING in kvm_wait
# git bisect bad de1617578849acab8e16c9ffdce39b91fb50639d
Bisecting: 929 revisions left to test after this (roughly 10 steps)
[4a037ad5d115b2cc79a5071a7854475f365476fa] Merge tag 'for-linus-5.12-rc1-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/xen/tip

testing commit 4a037ad5d115b2cc79a5071a7854475f365476fa with gcc (GCC) 10.2.1 20210217
kernel signature: 3c1f84ac0c25185982d41075bd0fc4f960e97c8ec881b8019db82b70209e4762
all runs: crashed: WARNING in kvm_wait
# git bisect bad 4a037ad5d115b2cc79a5071a7854475f365476fa
Bisecting: 451 revisions left to test after this (roughly 9 steps)
[582cd91f69de8e44857cb610ebca661dac8656b7] Merge tag 'for-5.12/block-2021-02-17' of git://git.kernel.dk/linux-block

testing commit 582cd91f69de8e44857cb610ebca661dac8656b7 with gcc (GCC) 10.2.1 20210217
kernel signature: 23b17ebf96fbd32fe270fb39a2e2dcb5f111e16c490f23c0d6694bd3ee0e4e5d
all runs: OK
# git bisect good 582cd91f69de8e44857cb610ebca661dac8656b7
Bisecting: 247 revisions left to test after this (roughly 8 steps)
[3f6ec19f2d05d800bbc42d95dece433da7697864] Merge tag 'timers-core-2021-02-15' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip

testing commit 3f6ec19f2d05d800bbc42d95dece433da7697864 with gcc (GCC) 10.2.1 20210217
kernel signature: aac1b095b09af583e5eb36f6281fe2a1cb52f20bd24f90f298cb28da777468ab
all runs: OK
# git bisect good 3f6ec19f2d05d800bbc42d95dece433da7697864
Bisecting: 125 revisions left to test after this (roughly 7 steps)
[85e853c5ec8486117182baab10c98b321daa6d47] Merge branch 'for-mingo-rcu' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu into core/rcu

testing commit 85e853c5ec8486117182baab10c98b321daa6d47 with gcc (GCC) 10.2.1 20210217
kernel signature: 9a06f299a5768e9da75bc034fdb8abc26b00fca7624b8e2fb266a1c4f9b2881d
all runs: OK
# git bisect good 85e853c5ec8486117182baab10c98b321daa6d47
Bisecting: 73 revisions left to test after this (roughly 6 steps)
[c5e6fc08feb2b88dc5dac2f3c817e1c2a4cafda4] sched,x86: Allow !PREEMPT_DYNAMIC

testing commit c5e6fc08feb2b88dc5dac2f3c817e1c2a4cafda4 with gcc (GCC) 10.2.1 20210217
kernel signature: 5623376ae6b8f796eb5e254d084fa57c0461979b2a2a6075b76cbe7f662e54f4
all runs: OK
# git bisect good c5e6fc08feb2b88dc5dac2f3c817e1c2a4cafda4
Bisecting: 33 revisions left to test after this (roughly 5 steps)
[9eef02334505411667a7b51a8f349f8c6c4f3b66] Merge tag 'locking-core-2021-02-17' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip

testing commit 9eef02334505411667a7b51a8f349f8c6c4f3b66 with gcc (GCC) 10.2.1 20210217
kernel signature: 9288957972b89620b5caf487f7c7f4d1a7a3457805e0ee485b181d748c177cc8
all runs: crashed: WARNING in kvm_wait
# git bisect bad 9eef02334505411667a7b51a8f349f8c6c4f3b66
Bisecting: 19 revisions left to test after this (roughly 4 steps)
[62137364e3e8afcc745846c5c67cacf943149073] Merge branch 'linus' into locking/core, to pick up upstream fixes

testing commit 62137364e3e8afcc745846c5c67cacf943149073 with gcc (GCC) 10.2.1 20210217
kernel signature: a52a5b64af3ba254fd1b41ba756bac8535a605786db26c2fe12dbfe3e7a5ff76
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: crashed: WARNING in kvm_wait
run #3: crashed: WARNING in kvm_wait
run #4: crashed: WARNING in kvm_wait
run #5: crashed: WARNING in kvm_wait
run #6: crashed: WARNING in kvm_wait
run #7: crashed: WARNING in kvm_wait
run #8: crashed: WARNING in kvm_wait
run #9: OK
# git bisect bad 62137364e3e8afcc745846c5c67cacf943149073
Bisecting: 9 revisions left to test after this (roughly 3 steps)
[997acaf6b4b59c6a9c259740312a69ea549cc684] lockdep: report broken irq restoration

testing commit 997acaf6b4b59c6a9c259740312a69ea549cc684 with gcc (GCC) 10.2.1 20210217
kernel signature: 3c764aae55754616ecfd1220854b07dbbc69da416b79b00b6ca5696ebc06aea6
all runs: crashed: WARNING in kvm_wait
# git bisect bad 997acaf6b4b59c6a9c259740312a69ea549cc684
Bisecting: 4 revisions left to test after this (roughly 2 steps)
[175b1a60e8805617d74aefe17ce0d3a32eceb55c] locking/lockdep: Clean up check_redundant() a bit

testing commit 175b1a60e8805617d74aefe17ce0d3a32eceb55c with gcc (GCC) 10.2.1 20210217
kernel signature: 1ef7ffd1b7301fa2925e03a5c98a957903b23b25545a772419e9a7f7db927c61
all runs: OK
# git bisect good 175b1a60e8805617d74aefe17ce0d3a32eceb55c
Bisecting: 2 revisions left to test after this (roughly 1 step)
[7e923e6a3ceb877497dd9ee70d71fa33b94f332b] locking/selftests: Add local_lock inversion tests

testing commit 7e923e6a3ceb877497dd9ee70d71fa33b94f332b with gcc (GCC) 10.2.1 20210217
kernel signature: 7af2235953bce9cb14e48b25fcdf216bec47daaacfe8a7ac86cd535ea3907bff
all runs: OK
# git bisect good 7e923e6a3ceb877497dd9ee70d71fa33b94f332b
Bisecting: 0 revisions left to test after this (roughly 1 step)
[2f0df49c89acaa58571d509830bc481250699885] jump_label: Do not profile branch annotations

testing commit 2f0df49c89acaa58571d509830bc481250699885 with gcc (GCC) 10.2.1 20210217
kernel signature: 7af2235953bce9cb14e48b25fcdf216bec47daaacfe8a7ac86cd535ea3907bff
all runs: OK
# git bisect good 2f0df49c89acaa58571d509830bc481250699885
997acaf6b4b59c6a9c259740312a69ea549cc684 is the first bad commit
commit 997acaf6b4b59c6a9c259740312a69ea549cc684
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Jan 11 15:37:07 2021 +0000

    lockdep: report broken irq restoration
    
    We generally expect local_irq_save() and local_irq_restore() to be
    paired and sanely nested, and so local_irq_restore() expects to be
    called with irqs disabled. Thus, within local_irq_restore() we only
    trace irq flag changes when unmasking irqs.
    
    This means that a sequence such as:
    
    | local_irq_disable();
    | local_irq_save(flags);
    | local_irq_enable();
    | local_irq_restore(flags);
    
    ... is liable to break things, as the local_irq_restore() would mask
    irqs without tracing this change. Similar problems may exist for
    architectures whose arch_irq_restore() function depends on being called
    with irqs disabled.
    
    We don't consider such sequences to be a good idea, so let's define
    those as forbidden, and add tooling to detect such broken cases.
    
    This patch adds debug code to WARN() when raw_local_irq_restore() is
    called with irqs enabled. As raw_local_irq_restore() is expected to pair
    with raw_local_irq_save(), it should never be called with irqs enabled.
    
    To avoid the possibility of circular header dependencies between
    irqflags.h and bug.h, the warning is handled in a separate C file.
    
    The new code is all conditional on a new CONFIG_DEBUG_IRQFLAGS symbol
    which is independent of CONFIG_TRACE_IRQFLAGS. As noted above such cases
    will confuse lockdep, so CONFIG_DEBUG_LOCKDEP now selects
    CONFIG_DEBUG_IRQFLAGS.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210111153707.10071-1-mark.rutland@arm.com

 include/linux/irqflags.h       | 12 ++++++++++++
 kernel/locking/Makefile        |  1 +
 kernel/locking/irqflag-debug.c | 11 +++++++++++
 lib/Kconfig.debug              |  8 ++++++++
 4 files changed, 32 insertions(+)
 create mode 100644 kernel/locking/irqflag-debug.c

culprit signature: 3c764aae55754616ecfd1220854b07dbbc69da416b79b00b6ca5696ebc06aea6
parent  signature: 7af2235953bce9cb14e48b25fcdf216bec47daaacfe8a7ac86cd535ea3907bff
revisions tested: 17, total time: 4h22m19.282092261s (build: 1h56m18.894767904s, test: 2h23m52.040712544s)
first bad commit: 997acaf6b4b59c6a9c259740312a69ea549cc684 lockdep: report broken irq restoration
recipients (to): ["linux-kernel@vger.kernel.org" "mark.rutland@arm.com" "mingo@redhat.com" "peterz@infradead.org" "peterz@infradead.org" "will@kernel.org"]
recipients (cc): ["akpm@linux-foundation.org" "masahiroy@kernel.org" "rafael.j.wysocki@intel.com" "rostedt@goodmis.org" "tglx@linutronix.de" "vitor@massaru.org"]
crash: WARNING in kvm_wait
------------[ cut here ]------------
raw_local_irq_restore() called with IRQs enabled
WARNING: CPU: 1 PID: 8787 at kernel/locking/irqflag-debug.c:9 warn_bogus_irq_restore kernel/locking/irqflag-debug.c:9 [inline]
WARNING: CPU: 1 PID: 8787 at kernel/locking/irqflag-debug.c:9 warn_bogus_irq_restore+0x1d/0x20 kernel/locking/irqflag-debug.c:7
Modules linked in:
CPU: 1 PID: 8787 Comm: syz-executor.2 Not tainted 5.11.0-rc2-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
RIP: 0010:warn_bogus_irq_restore kernel/locking/irqflag-debug.c:9 [inline]
RIP: 0010:warn_bogus_irq_restore+0x1d/0x20 kernel/locking/irqflag-debug.c:7
Code: 51 00 e9 3f fe ff ff cc cc cc cc cc cc 80 3d 80 27 cf 0a 00 74 01 c3 48 c7 c7 60 f5 8a 88 c6 05 6f 27 cf 0a 01 e8 17 e1 a5 06 <0f> 0b c3 48 c7 c0 a0 16 4e 8e 53 48 89 fb 48 ba 00 00 00 00 00 fc
RSP: 0018:ffffc900017ef9f8 EFLAGS: 00010286
RAX: 0000000000000000 RBX: ffff888023354040 RCX: 0000000000000000
RDX: 0000000000000002 RSI: ffffffff88ddc880 RDI: fffff520002fdf31
RBP: 0000000000000246 R08: 0000000000000001 R09: ffff8880b9f30827
R10: ffffed10173e6104 R11: 0000000000000001 R12: 0000000000000003
R13: ffffed100466a808 R14: 0000000000000001 R15: ffff8880b9f359c0
FS:  0000000001d2b400(0000) GS:ffff8880b9f00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00007ffdde9bdbd8 CR3: 000000002975b000 CR4: 00000000001506e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 kvm_wait arch/x86/kernel/kvm.c:860 [inline]
 kvm_wait+0xc3/0xe0 arch/x86/kernel/kvm.c:837
 pv_wait arch/x86/include/asm/paravirt.h:564 [inline]
 pv_wait_head_or_lock kernel/locking/qspinlock_paravirt.h:470 [inline]
 __pv_queued_spin_lock_slowpath+0x8b8/0xb40 kernel/locking/qspinlock.c:508
 pv_queued_spin_lock_slowpath arch/x86/include/asm/paravirt.h:554 [inline]
 queued_spin_lock_slowpath arch/x86/include/asm/qspinlock.h:51 [inline]
 queued_spin_lock include/asm-generic/qspinlock.h:85 [inline]
 do_raw_spin_lock+0x200/0x2b0 kernel/locking/spinlock_debug.c:113
 spin_lock include/linux/spinlock.h:354 [inline]
 ext4_lock_group fs/ext4/ext4.h:3379 [inline]
 __ext4_new_inode+0x2da2/0x44d0 fs/ext4/ialloc.c:1187
 ext4_mkdir+0x298/0x910 fs/ext4/namei.c:2793
 vfs_mkdir+0x413/0x660 fs/namei.c:3652
 do_mkdirat+0x1eb/0x250 fs/namei.c:3675
 do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
 entry_SYSCALL_64_after_hwframe+0x44/0xa9
RIP: 0033:0x4656e7
Code: 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 b8 53 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007ffdde9bf418 EFLAGS: 00000206 ORIG_RAX: 0000000000000053
RAX: ffffffffffffffda RBX: 00007ffdde9bf4b0 RCX: 00000000004656e7
RDX: 0000000000000000 RSI: 00000000000001ff RDI: 00007ffdde9bf4b0
RBP: 00007ffdde9bf48c R08: 0000000000000000 R09: 0000000000000006
R10: 00007ffdde9bf1b4 R11: 0000000000000206 R12: 0000000000000032
R13: 00000000000660cb R14: 0000000000000002 R15: 00007ffdde9bf4f0

