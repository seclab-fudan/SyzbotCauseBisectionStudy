bisecting cause commit starting from bef7b2a7be28638770972ab2709adf11d601c11a
building syzkaller on 5ed396e666c7826bed46f06c4db1409376691fed
testing commit bef7b2a7be28638770972ab2709adf11d601c11a with gcc (GCC) 8.1.0
kernel signature: 827c7cc15a95c72869122345f35bd22c47326da0b6bc8447d2472a8eea369756
run #0: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #1: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #2: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #3: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #4: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #5: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #6: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #7: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #8: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #9: boot failed: can't ssh into the instance
testing release v5.6
testing commit 7111951b8d4973bda27ff663f2cf18b663d15b48 with gcc (GCC) 8.1.0
kernel signature: 494128a579a597676bb8b05dc45ad28c8f519d35bbdc4390a724e0d63bdb9dd0
all runs: OK
# git bisect start bef7b2a7be28638770972ab2709adf11d601c11a 7111951b8d4973bda27ff663f2cf18b663d15b48
Bisecting: 3821 revisions left to test after this (roughly 12 steps)
[29d9f30d4ce6c7a38745a54a8cddface10013490] Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next
testing commit 29d9f30d4ce6c7a38745a54a8cddface10013490 with gcc (GCC) 8.1.0
kernel signature: 07e1cd24b07eabc106fca13613a13fb5526e20aaf4e16fa340c51911e76c6878
all runs: OK
# git bisect good 29d9f30d4ce6c7a38745a54a8cddface10013490
Bisecting: 1948 revisions left to test after this (roughly 11 steps)
[50a5de895dbe5df947b3a695777db5b2c313e065] Merge tag 'for-linus-hmm' of git://git.kernel.org/pub/scm/linux/kernel/git/rdma/rdma
testing commit 50a5de895dbe5df947b3a695777db5b2c313e065 with gcc (GCC) 8.1.0
kernel signature: 981bcab7efbdde54228deaff2c22c4dde2007fcb137a9c69060d1f0dd95a5845
all runs: OK
# git bisect good 50a5de895dbe5df947b3a695777db5b2c313e065
Bisecting: 1022 revisions left to test after this (roughly 10 steps)
[bc3b3f4bfbded031a11c4284106adddbfacd05bb] Merge tag 'pinctrl-v5.7-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-pinctrl
testing commit bc3b3f4bfbded031a11c4284106adddbfacd05bb with gcc (GCC) 8.1.0
kernel signature: 15b088bab8d1a7bfeb32b94a310941f0ed909726dcd0f8b473b9cf0c437acff6
all runs: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
# git bisect bad bc3b3f4bfbded031a11c4284106adddbfacd05bb
Bisecting: 406 revisions left to test after this (roughly 9 steps)
[6cad420cc695867b4ca710bac21fde21a4102e4b] Merge branch 'akpm' (patches from Andrew)
testing commit 6cad420cc695867b4ca710bac21fde21a4102e4b with gcc (GCC) 8.1.0
kernel signature: 34d77ddc986c4843df361ac93a74e4b10b141cecaba7b0c42fa7a27ca8168068
all runs: OK
# git bisect good 6cad420cc695867b4ca710bac21fde21a4102e4b
Bisecting: 188 revisions left to test after this (roughly 8 steps)
[1c482452d5db0f52e4e8eed95bd7314eec537d78] Merge tag 'kvm-s390-next-5.7-1' of git://git.kernel.org/pub/scm/linux/kernel/git/kvms390/linux into HEAD
testing commit 1c482452d5db0f52e4e8eed95bd7314eec537d78 with gcc (GCC) 8.1.0
kernel signature: 096830ddb5f1fd1b3c49af6e53d26dacab642e9a70f166d9e6083af95c37e106
run #0: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #1: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #2: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #3: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #4: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #5: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #6: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #7: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #8: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #9: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
# git bisect bad 1c482452d5db0f52e4e8eed95bd7314eec537d78
Bisecting: 108 revisions left to test after this (roughly 7 steps)
[733deafc00df1dda5130fc14f87a1d3993913243] KVM: x86: Handle RDTSCP CPUID adjustment in VMX code
testing commit 733deafc00df1dda5130fc14f87a1d3993913243 with gcc (GCC) 8.1.0
kernel signature: 653076ff42442f36f5fd5a8eb45da1b908c9269cb991e4e06c029399ce4dafbf
run #0: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #1: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #2: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #3: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #4: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #5: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #6: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #7: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #8: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #9: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
# git bisect bad 733deafc00df1dda5130fc14f87a1d3993913243
Bisecting: 54 revisions left to test after this (roughly 6 steps)
[0be44352071dc87a4f9bf879642b1d44876971d9] KVM: x86/mmu: Reuse the current root if possible for fast switch
testing commit 0be44352071dc87a4f9bf879642b1d44876971d9 with gcc (GCC) 8.1.0
kernel signature: 19e43fa6ddc4ecc6f99571f1e3bd58bb9174b2e78d054cc394d7e9d9cc22f652
run #0: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #1: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #2: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #3: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #4: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #5: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #6: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #7: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #8: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #9: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
# git bisect bad 0be44352071dc87a4f9bf879642b1d44876971d9
Bisecting: 26 revisions left to test after this (roughly 5 steps)
[82307e676f9d885871f121e4921b12905a53397d] KVM: PPC: Move memslot memory allocation into prepare_memory_region()
testing commit 82307e676f9d885871f121e4921b12905a53397d with gcc (GCC) 8.1.0
kernel signature: 2195c9300967912430ba9bd396156a15fb3c6ae0147522e0983b40e6e5fb7e32
all runs: OK
# git bisect good 82307e676f9d885871f121e4921b12905a53397d
Bisecting: 13 revisions left to test after this (roughly 4 steps)
[0577d1abe704c315bb5cdfc71f4ca7b9b5358f59] KVM: Terminate memslot walks via used_slots
testing commit 0577d1abe704c315bb5cdfc71f4ca7b9b5358f59 with gcc (GCC) 8.1.0
kernel signature: 0776407a5cb58ef921fe04cf168d8b56a1d5cb68b2a0e1d1a41d1cebe2c2c1f6
all runs: OK
# git bisect good 0577d1abe704c315bb5cdfc71f4ca7b9b5358f59
Bisecting: 6 revisions left to test after this (roughly 3 steps)
[d18b2f43b9147c8005ae0844fb445d8cc6a87e31] KVM: x86: Gracefully handle __vmalloc() failure during VM allocation
testing commit d18b2f43b9147c8005ae0844fb445d8cc6a87e31 with gcc (GCC) 8.1.0
kernel signature: 8284e7446a8120b9d7641d606e9c626f1c52c36c725fa8d222256d8b2d86b012
run #0: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #1: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #2: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #3: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #4: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #5: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #6: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #7: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #8: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #9: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
# git bisect bad d18b2f43b9147c8005ae0844fb445d8cc6a87e31
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[b3594ffbf932c8e8b23201cdc2c173708a4472dc] KVM: x86/mmu: Move kvm_arch_flush_remote_tlbs_memslot() to mmu.c
testing commit b3594ffbf932c8e8b23201cdc2c173708a4472dc with gcc (GCC) 8.1.0
kernel signature: bead1a6003218adf80fec03cb589c7067a64fdfeec21c0afbce5db595b45ca4c
run #0: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #1: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #2: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #3: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #4: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #5: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #6: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #7: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #8: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #9: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
# git bisect bad b3594ffbf932c8e8b23201cdc2c173708a4472dc
Bisecting: 0 revisions left to test after this (roughly 1 step)
[13e48aa9429d1be05ecf8b9eefb212ac58f3f704] KVM: selftests: Add test for KVM_SET_USER_MEMORY_REGION
testing commit 13e48aa9429d1be05ecf8b9eefb212ac58f3f704 with gcc (GCC) 8.1.0
kernel signature: 64d29e2ea8b24ce4eb82e9c159cdb567d628508a857a5fb8554c752080a2d6c0
run #0: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #1: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #2: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #3: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #4: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #5: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #6: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #7: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #8: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #9: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
# git bisect bad 13e48aa9429d1be05ecf8b9eefb212ac58f3f704
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[36947254e5f981aeeedab1c7dfa35fc34d330e80] KVM: Dynamically size memslot array based on number of used slots
testing commit 36947254e5f981aeeedab1c7dfa35fc34d330e80 with gcc (GCC) 8.1.0
kernel signature: 50124283a4344e64f4acb68629bc169eff79e803f363e9795b3d3e94f10300a8
run #0: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #1: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #2: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #3: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #4: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #5: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #6: crashed: KASAN: slab-out-of-bounds Read in gfn_to_hva
run #7: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #8: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
run #9: crashed: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
# git bisect bad 36947254e5f981aeeedab1c7dfa35fc34d330e80
36947254e5f981aeeedab1c7dfa35fc34d330e80 is the first bad commit
commit 36947254e5f981aeeedab1c7dfa35fc34d330e80
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Feb 18 13:07:32 2020 -0800

    KVM: Dynamically size memslot array based on number of used slots
    
    Now that the memslot logic doesn't assume memslots are always non-NULL,
    dynamically size the array of memslots instead of unconditionally
    allocating memory for the maximum number of memslots.
    
    Note, because a to-be-deleted memslot must first be invalidated, the
    array size cannot be immediately reduced when deleting a memslot.
    However, consecutive deletions will realize the memory savings, i.e.
    a second deletion will trim the entry.
    
    Tested-by: Christoffer Dall <christoffer.dall@arm.com>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

 include/linux/kvm_host.h |  2 +-
 virt/kvm/kvm_main.c      | 31 ++++++++++++++++++++++++++++---
 2 files changed, 29 insertions(+), 4 deletions(-)
culprit signature: 50124283a4344e64f4acb68629bc169eff79e803f363e9795b3d3e94f10300a8
parent  signature: 0776407a5cb58ef921fe04cf168d8b56a1d5cb68b2a0e1d1a41d1cebe2c2c1f6
revisions tested: 15, total time: 3h11m32.006805104s (build: 1h33m35.445341666s, test: 1h36m52.462657834s)
first bad commit: 36947254e5f981aeeedab1c7dfa35fc34d330e80 KVM: Dynamically size memslot array based on number of used slots
cc: ["christoffer.dall@arm.com" "maz@kernel.org" "pbonzini@redhat.com" "peterx@redhat.com" "sean.j.christopherson@intel.com"]
crash: KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init
L1TF CPU bug present and SMT on, data leak possible. See CVE-2018-3646 and https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/l1tf.html for details.
==================================================================
BUG: KASAN: slab-out-of-bounds in search_memslots include/linux/kvm_host.h:1042 [inline]
BUG: KASAN: slab-out-of-bounds in __gfn_to_memslot include/linux/kvm_host.h:1054 [inline]
BUG: KASAN: slab-out-of-bounds in __kvm_gfn_to_hva_cache_init+0x53e/0x5f0 arch/x86/kvm/../../../virt/kvm/kvm_main.c:2456
Read of size 8 at addr ffff888094a78468 by task syz-executor.3/8412

CPU: 1 PID: 8412 Comm: syz-executor.3 Not tainted 5.6.0-rc1-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x128/0x182 lib/dump_stack.c:118
 print_address_description.constprop.8.cold.10+0x9/0x317 mm/kasan/report.c:374
 __kasan_report.cold.11+0x1c/0x34 mm/kasan/report.c:506
 kasan_report+0xe/0x20 mm/kasan/common.c:641
 search_memslots include/linux/kvm_host.h:1042 [inline]
 __gfn_to_memslot include/linux/kvm_host.h:1054 [inline]
 __kvm_gfn_to_hva_cache_init+0x53e/0x5f0 arch/x86/kvm/../../../virt/kvm/kvm_main.c:2456
 kvm_lapic_set_vapic_addr+0x72/0x140 arch/x86/kvm/lapic.c:2633
 kvm_arch_vcpu_ioctl+0x1607/0x2980 arch/x86/kvm/x86.c:4353
 kvm_vcpu_ioctl+0x1d0/0xa20 arch/x86/kvm/../../../virt/kvm/kvm_main.c:3304
 vfs_ioctl fs/ioctl.c:47 [inline]
 ksys_ioctl+0xb8/0x110 fs/ioctl.c:763
 __do_sys_ioctl fs/ioctl.c:772 [inline]
 __se_sys_ioctl fs/ioctl.c:770 [inline]
 __x64_sys_ioctl+0x6a/0xb0 fs/ioctl.c:770
 do_syscall_64+0xc6/0x5e0 arch/x86/entry/common.c:294
 entry_SYSCALL_64_after_hwframe+0x49/0xbe
RIP: 0033:0x45c849
Code: ad b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00
RSP: 002b:00007fd968201c78 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
RAX: ffffffffffffffda RBX: 00007fd9682026d4 RCX: 000000000045c849
RDX: 0000000020000000 RSI: 000000004008ae93 RDI: 0000000000000005
RBP: 000000000076bf00 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
R13: 00000000000003dc R14: 00000000004c66f7 R15: 000000000076bf0c

Allocated by task 8412:
 save_stack+0x19/0x80 mm/kasan/common.c:72
 set_track mm/kasan/common.c:80 [inline]
 __kasan_kmalloc.constprop.17+0xc1/0xd0 mm/kasan/common.c:515
 kvmalloc include/linux/mm.h:645 [inline]
 kvzalloc include/linux/mm.h:653 [inline]
 kvm_dup_memslots arch/x86/kvm/../../../virt/kvm/kvm_main.c:1100 [inline]
 kvm_set_memslot+0xd4/0x1570 arch/x86/kvm/../../../virt/kvm/kvm_main.c:1117
 __kvm_set_memory_region+0x8fb/0xca0 arch/x86/kvm/../../../virt/kvm/kvm_main.c:1296
 __x86_set_memory_region+0x1e0/0x420 arch/x86/kvm/x86.c:9756
 alloc_apic_access_page arch/x86/kvm/vmx/vmx.c:3563 [inline]
 vmx_create_vcpu+0x1234/0x2190 arch/x86/kvm/vmx/vmx.c:6790
 kvm_arch_vcpu_create+0x5f7/0x9e0 arch/x86/kvm/x86.c:9297
 kvm_vm_ioctl_create_vcpu arch/x86/kvm/../../../virt/kvm/kvm_main.c:3043 [inline]
 kvm_vm_ioctl+0x1152/0x1f80 arch/x86/kvm/../../../virt/kvm/kvm_main.c:3591
 vfs_ioctl fs/ioctl.c:47 [inline]
 ksys_ioctl+0xb8/0x110 fs/ioctl.c:763
 __do_sys_ioctl fs/ioctl.c:772 [inline]
 __se_sys_ioctl fs/ioctl.c:770 [inline]
 __x64_sys_ioctl+0x6a/0xb0 fs/ioctl.c:770
 do_syscall_64+0xc6/0x5e0 arch/x86/entry/common.c:294
 entry_SYSCALL_64_after_hwframe+0x49/0xbe

Freed by task 7013:
 save_stack+0x19/0x80 mm/kasan/common.c:72
 set_track mm/kasan/common.c:80 [inline]
 kasan_set_free_info mm/kasan/common.c:337 [inline]
 __kasan_slab_free+0xf7/0x140 mm/kasan/common.c:476
 __cache_free mm/slab.c:3426 [inline]
 kfree+0x107/0x2b0 mm/slab.c:3757
 sk_prot_free net/core/sock.c:1640 [inline]
 __sk_destruct+0x470/0x640 net/core/sock.c:1724
 sock_put include/net/sock.h:1719 [inline]
 pppoe_release+0x47f/0x590 drivers/net/ppp/pppoe.c:601
 __sock_release+0xbb/0x270 net/socket.c:605
 sock_close+0xf/0x20 net/socket.c:1283
 __fput+0x256/0x780 fs/file_table.c:280
 task_work_run+0x103/0x180 kernel/task_work.c:113
 tracehook_notify_resume include/linux/tracehook.h:188 [inline]
 exit_to_usermode_loop+0x23d/0x2d0 arch/x86/entry/common.c:164
 prepare_exit_to_usermode arch/x86/entry/common.c:195 [inline]
 syscall_return_slowpath arch/x86/entry/common.c:278 [inline]
 do_syscall_64+0x4f8/0x5e0 arch/x86/entry/common.c:304
 entry_SYSCALL_64_after_hwframe+0x49/0xbe

The buggy address belongs to the object at ffff888094a78000
 which belongs to the cache kmalloc-2k of size 2048
The buggy address is located 1128 bytes inside of
 2048-byte region [ffff888094a78000, ffff888094a78800)
The buggy address belongs to the page:
page:ffffea0002529e00 refcount:1 mapcount:0 mapping:ffff8880aa400e00 index:0x0
flags: 0xfffe0000000200(slab)
raw: 00fffe0000000200 ffffea0002a57f48 ffffea00028012c8 ffff8880aa400e00
raw: 0000000000000000 ffff888094a78000 0000000100000001 0000000000000000
page dumped because: kasan: bad access detected

Memory state around the buggy address:
 ffff888094a78300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 ffff888094a78380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>ffff888094a78400: 00 00 00 00 00 00 00 00 00 00 00 00 00 fc fc fc
                                                          ^
 ffff888094a78480: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
 ffff888094a78500: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
==================================================================

