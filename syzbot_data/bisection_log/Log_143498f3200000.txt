bisecting cause commit starting from bcb67f0fbce97425c5fae5109ffc44c5ddaf96ba
building syzkaller on c402d8f1aa5d2fdc219d2155fa467fb7f02321a5
testing commit bcb67f0fbce97425c5fae5109ffc44c5ddaf96ba with gcc (GCC) 8.1.0
all runs: crashed: WARNING in __kthread_bind_mask
testing release v5.0
testing commit 1c163f4c7b3f621efff9b28a47abb36f7378d783 with gcc (GCC) 8.1.0
all runs: OK
# git bisect start bcb67f0fbce97425c5fae5109ffc44c5ddaf96ba v5.0
Bisecting: 10177 revisions left to test after this (roughly 13 steps)
[b7a7d1c1ec688104fdc922568c26395a756f616d] Merge tag 'dma-mapping-5.1' of git://git.infradead.org/users/hch/dma-mapping
testing commit b7a7d1c1ec688104fdc922568c26395a756f616d with gcc (GCC) 8.1.0
all runs: crashed: WARNING in __kthread_bind_mask
# git bisect bad b7a7d1c1ec688104fdc922568c26395a756f616d
Bisecting: 5152 revisions left to test after this (roughly 12 steps)
[542d0e583b7b366527175b2b5fc0aad262fa33b0] Merge tag 'devprop-5.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
testing commit 542d0e583b7b366527175b2b5fc0aad262fa33b0 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 542d0e583b7b366527175b2b5fc0aad262fa33b0
Bisecting: 3089 revisions left to test after this (roughly 11 steps)
[b5dd0c658c31b469ccff1b637e5124851e7a4a1c] Merge branch 'akpm' (patches from Andrew)
testing commit b5dd0c658c31b469ccff1b637e5124851e7a4a1c with gcc (GCC) 8.1.0
all runs: OK
# git bisect good b5dd0c658c31b469ccff1b637e5124851e7a4a1c
Bisecting: 1543 revisions left to test after this (roughly 11 steps)
[cf2e8c544cd3b33e9e403b7b72404c221bf888d1] Merge tag 'mfd-next-5.1' of git://git.kernel.org/pub/scm/linux/kernel/git/lee/mfd
testing commit cf2e8c544cd3b33e9e403b7b72404c221bf888d1 with gcc (GCC) 8.1.0
run #0: basic kernel testing failed: timed out
run #1: OK
run #2: OK
run #3: OK
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
# git bisect good cf2e8c544cd3b33e9e403b7b72404c221bf888d1
Bisecting: 765 revisions left to test after this (roughly 10 steps)
[96a6de1a541c86e9e67b9c310c14db4099bd1cbc] Merge tag 'media/v5.1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media
testing commit 96a6de1a541c86e9e67b9c310c14db4099bd1cbc with gcc (GCC) 8.1.0
all runs: crashed: WARNING in __kthread_bind_mask
# git bisect bad 96a6de1a541c86e9e67b9c310c14db4099bd1cbc
Bisecting: 396 revisions left to test after this (roughly 9 steps)
[d1cae94871330cb9f5fdcea34529abf7917e682e] Merge tag 'fscrypt-for-linus' of git://git.kernel.org/pub/scm/fs/fscrypt/fscrypt
testing commit d1cae94871330cb9f5fdcea34529abf7917e682e with gcc (GCC) 8.1.0
all runs: crashed: WARNING in __kthread_bind_mask
# git bisect bad d1cae94871330cb9f5fdcea34529abf7917e682e
Bisecting: 133 revisions left to test after this (roughly 8 steps)
[80201fe175cbf7f3e372f53eba0a881a702ad926] Merge tag 'for-5.1/block-20190302' of git://git.kernel.dk/linux-block
testing commit 80201fe175cbf7f3e372f53eba0a881a702ad926 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 80201fe175cbf7f3e372f53eba0a881a702ad926
Bisecting: 66 revisions left to test after this (roughly 6 steps)
[a5f4cb4288e548ab415bbfebd1105c7b29ba9f8c] scripts/spdxcheck.py: fix C++ comment style detection
testing commit a5f4cb4288e548ab415bbfebd1105c7b29ba9f8c with gcc (GCC) 8.1.0
all runs: OK
# git bisect good a5f4cb4288e548ab415bbfebd1105c7b29ba9f8c
Bisecting: 40 revisions left to test after this (roughly 5 steps)
[2bb995405fe52dd893db57456556e8dc4fce35a7] Merge tag 'gcc-plugins-v5.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux
testing commit 2bb995405fe52dd893db57456556e8dc4fce35a7 with gcc (GCC) 8.1.0
all runs: crashed: WARNING in __kthread_bind_mask
# git bisect bad 2bb995405fe52dd893db57456556e8dc4fce35a7
Bisecting: 12 revisions left to test after this (roughly 4 steps)
[221c5eb2338232f7340386de1c43decc32682e58] io_uring: add support for IORING_OP_POLL
testing commit 221c5eb2338232f7340386de1c43decc32682e58 with gcc (GCC) 8.1.0
all runs: crashed: WARNING in __kthread_bind_mask
# git bisect bad 221c5eb2338232f7340386de1c43decc32682e58
Bisecting: 6 revisions left to test after this (roughly 3 steps)
[2579f913d41a086563bb81762c519f3d62ddee37] io_uring: batch io_kiocb allocation
testing commit 2579f913d41a086563bb81762c519f3d62ddee37 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 2579f913d41a086563bb81762c519f3d62ddee37
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[f4e65870e5cede5ca1ec0006b6c9803994e5f7b8] net: split out functions related to registering inflight socket files
testing commit f4e65870e5cede5ca1ec0006b6c9803994e5f7b8 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good f4e65870e5cede5ca1ec0006b6c9803994e5f7b8
Bisecting: 1 revision left to test after this (roughly 1 step)
[6c271ce2f1d572f7fa225700a13cfe7ced492434] io_uring: add submission polling
testing commit 6c271ce2f1d572f7fa225700a13cfe7ced492434 with gcc (GCC) 8.1.0
all runs: crashed: WARNING in __kthread_bind_mask
# git bisect bad 6c271ce2f1d572f7fa225700a13cfe7ced492434
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[6b06314c47e141031be043539900d80d2c7ba10f] io_uring: add file set registration
testing commit 6b06314c47e141031be043539900d80d2c7ba10f with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 6b06314c47e141031be043539900d80d2c7ba10f
6c271ce2f1d572f7fa225700a13cfe7ced492434 is the first bad commit
commit 6c271ce2f1d572f7fa225700a13cfe7ced492434
Author: Jens Axboe <axboe@kernel.dk>
Date:   Thu Jan 10 11:22:30 2019 -0700

    io_uring: add submission polling
    
    This enables an application to do IO, without ever entering the kernel.
    By using the SQ ring to fill in new sqes and watching for completions
    on the CQ ring, we can submit and reap IOs without doing a single system
    call. The kernel side thread will poll for new submissions, and in case
    of HIPRI/polled IO, it'll also poll for completions.
    
    By default, we allow 1 second of active spinning. This can by changed
    by passing in a different grace period at io_uring_register(2) time.
    If the thread exceeds this idle time without having any work to do, it
    will set:
    
    sq_ring->flags |= IORING_SQ_NEED_WAKEUP.
    
    The application will have to call io_uring_enter() to start things back
    up again. If IO is kept busy, that will never be needed. Basically an
    application that has this feature enabled will guard it's
    io_uring_enter(2) call with:
    
    read_barrier();
    if (*sq_ring->flags & IORING_SQ_NEED_WAKEUP)
            io_uring_enter(fd, 0, 0, IORING_ENTER_SQ_WAKEUP);
    
    instead of calling it unconditionally.
    
    It's mandatory to use fixed files with this feature. Failure to do so
    will result in the application getting an -EBADF CQ entry when
    submitting IO.
    
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

:040000 040000 ca5e05e36f61886129f91db070f217a812c4dd7b 487222729602cd9d12f91557ef31c73e4dfa4b86 M	fs
:040000 040000 2d991ecff6e14baa890629470b4bd38bd680cf8f 8c9ea07bbb5fd38b10fd5e4673bc08e0c6f2f4f6 M	include
revisions tested: 16, total time: 3h48m4.816916389s (build: 1h32m5.659935118s, test: 2h9m55.950869286s)
first bad commit: 6c271ce2f1d572f7fa225700a13cfe7ced492434 io_uring: add submission polling
cc: ["axboe@kernel.dk" "hare@suse.com" "linux-fsdevel@vger.kernel.org" "linux-kernel@vger.kernel.org" "viro@zeniv.linux.org.uk"]
crash: WARNING in __kthread_bind_mask
IPv6: ADDRCONF(NETDEV_CHANGE): hsr_slave_1: link becomes ready
IPv6: ADDRCONF(NETDEV_CHANGE): veth1_to_team: link becomes ready
IPv6: ADDRCONF(NETDEV_CHANGE): team_slave_1: link becomes ready
IPv6: ADDRCONF(NETDEV_CHANGE): veth0_to_hsr: link becomes ready
IPv6: ADDRCONF(NETDEV_CHANGE): hsr_slave_0: link becomes ready
WARNING: CPU: 0 PID: 7157 at kernel/kthread.c:391 __kthread_bind_mask+0x1e/0xa0 kernel/kthread.c:390
hsr0: Slave B (hsr_slave_1) is not up; please bring it up to get a fully working HSR network
Kernel panic - not syncing: panic_on_warn set ...
CPU: 0 PID: 7157 Comm: syz-executor.4 Not tainted 5.0.0-rc6+ #1
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x113/0x167 lib/dump_stack.c:113
 panic+0x212/0x41d kernel/panic.c:214
 __warn.cold.8+0x1b/0x36 kernel/panic.c:571
IPv6: ADDRCONF(NETDEV_CHANGE): hsr0: link becomes ready
8021q: adding VLAN 0 to HW filter on device batadv0
 report_bug+0x1a4/0x200 lib/bug.c:186
kobject: 'vlan0' (00000000bdb5a19f): kobject_add_internal: parent: 'mesh', set: '<NULL>'
 fixup_bug arch/x86/kernel/traps.c:178 [inline]
 do_error_trap+0x11b/0x200 arch/x86/kernel/traps.c:271
 do_invalid_op+0x36/0x40 arch/x86/kernel/traps.c:290
 invalid_op+0x14/0x20 arch/x86/entry/entry_64.S:973
RIP: 0010:__kthread_bind_mask+0x1e/0xa0 kernel/kthread.c:391
Code: f8 e8 56 b1 50 00 48 8b 45 f8 eb d9 55 48 89 e5 41 56 41 55 41 54 49 89 f4 48 89 d6 53 48 89 fb e8 67 b4 02 00 48 85 c0 75 0b <0f> 0b 5b 41 5c 41 5d 41 5e 5d c3 4c 8d b3 c0 07 00 00 4c 89 f7 e8
RSP: 0018:ffff8880890dfd30 EFLAGS: 00010246
RAX: 0000000000000000 RBX: ffff88808679e5c0 RCX: 0000000000000000
RDX: dffffc0000000000 RSI: 0000000000000001 RDI: ffffffff89c55aa0
RBP: ffff8880890dfd50 R08: ffffed1010cf3db1 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000000 R12: ffffffff86e8c288
R13: ffff88808679e5e0 R14: ffffffff86f53ae0 R15: ffff8880a999c820
 __kthread_bind kernel/kthread.c:404 [inline]
 kthread_unpark+0xed/0x120 kernel/kthread.c:472
 kthread_stop+0xb7/0x4d0 kernel/kthread.c:548
 io_sq_thread_stop fs/io_uring.c:1601 [inline]
 io_finish_async+0x9f/0x160 fs/io_uring.c:1608
 io_ring_ctx_free fs/io_uring.c:2076 [inline]
 io_ring_ctx_wait_and_kill+0x78/0x3b0 fs/io_uring.c:2132
 io_uring_release+0x3d/0x50 fs/io_uring.c:2140
 __fput+0x252/0x800 fs/file_table.c:278
 ____fput+0x9/0x10 fs/file_table.c:309
 task_work_run+0x10e/0x190 kernel/task_work.c:113
 tracehook_notify_resume include/linux/tracehook.h:188 [inline]
 exit_to_usermode_loop+0x1a9/0x200 arch/x86/entry/common.c:166
 prepare_exit_to_usermode arch/x86/entry/common.c:197 [inline]
 syscall_return_slowpath arch/x86/entry/common.c:268 [inline]
 do_syscall_64+0x40d/0x4e0 arch/x86/entry/common.c:293
 entry_SYSCALL_64_after_hwframe+0x49/0xbe
RIP: 0033:0x4129e1
Code: 75 14 b8 03 00 00 00 0f 05 48 3d 01 f0 ff ff 0f 83 e4 1a 00 00 c3 48 83 ec 08 e8 0a fc ff ff 48 89 04 24 b8 03 00 00 00 0f 05 <48> 8b 3c 24 48 89 c2 e8 53 fc ff ff 48 89 d0 48 83 c4 08 48 3d 01
RSP: 002b:00007fffcb2cfd20 EFLAGS: 00000293 ORIG_RAX: 0000000000000003
RAX: 0000000000000000 RBX: 0000000000000004 RCX: 00000000004129e1
RDX: 0000001b32420000 RSI: 0000000000000000 RDI: 0000000000000003
RBP: 00000000007404b0 R08: 00000000000161cd R09: 00000000000161cd
R10: 00007fffcb2cfdf0 R11: 0000000000000293 R12: 0000000000000001
R13: 00000000000161cf R14: 00000000000161fc R15: 000000000073bf0c
Kernel Offset: disabled
Rebooting in 86400 seconds..

