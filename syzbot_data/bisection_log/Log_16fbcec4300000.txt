bisecting cause commit starting from 3dbdb38e286903ec220aaf1fb29a8d94297da246
building syzkaller on 55aa55c24fe77aae07d530662f91b4d50c4990f0
testing commit 3dbdb38e286903ec220aaf1fb29a8d94297da246 with gcc (GCC) 10.2.1 20210217
kernel signature: 0c918222f21b3682499f4b3d1f1264f91dcc6592d3670d266f17e60e95528b33
run #0: basic kernel testing failed: possible deadlock in fs_reclaim_acquire
run #1: crashed: general protection fault in try_grab_compound_head
run #2: crashed: general protection fault in try_grab_compound_head
run #3: crashed: general protection fault in try_grab_compound_head
run #4: crashed: general protection fault in try_grab_compound_head
run #5: crashed: general protection fault in try_grab_compound_head
run #6: crashed: general protection fault in try_grab_compound_head
run #7: crashed: general protection fault in try_grab_compound_head
run #8: crashed: general protection fault in try_grab_compound_head
run #9: crashed: general protection fault in try_grab_compound_head
run #10: crashed: general protection fault in try_grab_compound_head
run #11: crashed: general protection fault in try_grab_compound_head
run #12: crashed: general protection fault in try_grab_compound_head
run #13: crashed: general protection fault in try_grab_compound_head
run #14: crashed: general protection fault in try_grab_compound_head
run #15: crashed: general protection fault in try_grab_compound_head
run #16: crashed: general protection fault in try_grab_compound_head
run #17: crashed: general protection fault in try_grab_compound_head
run #18: crashed: general protection fault in try_grab_compound_head
run #19: crashed: general protection fault in try_grab_compound_head
testing release v5.13
testing commit 62fb9874f5da54fdb243003b386128037319b219 with gcc (GCC) 10.2.1 20210217
kernel signature: 2da1b527de5368761b09a6f259401abd1c605ab1f94b71e4905ece00f8cea55a
all runs: crashed: general protection fault in try_grab_compound_head
testing release v5.12
testing commit 9f4ad9e425a1d3b6a34617b8ea226d56a119a717 with gcc (GCC) 10.2.1 20210217
kernel signature: 884266a5556d1a62a64c7c25251d8e0a746aa9b98e5402d4603e05f52c0f9c5e
all runs: crashed: BUG: unable to handle kernel paging request in get_pfnblock_flags_mask
testing release v5.11
testing commit f40ddce88593482919761f74910f42f4b84c004b with gcc (GCC) 10.2.1 20210217
kernel signature: faff4e02bf88b0acf1f16e5f1ab07886c83dcfac928ee4cf5de45ec3e13087b0
all runs: OK
# git bisect start 9f4ad9e425a1d3b6a34617b8ea226d56a119a717 f40ddce88593482919761f74910f42f4b84c004b
Bisecting: 6798 revisions left to test after this (roughly 13 steps)
[d99676af540c2dc829999928fb81c58c80a1dce4] Merge tag 'drm-next-2021-02-19' of git://anongit.freedesktop.org/drm/drm

testing commit d99676af540c2dc829999928fb81c58c80a1dce4 with gcc (GCC) 10.2.1 20210217
kernel signature: 3530a014f9e889df1bc920966ef85a0a5d71f7ee9a6445d76b83384e8f1240c5
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: OK
run #3: OK
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
reproducer seems to be flaky
# git bisect bad d99676af540c2dc829999928fb81c58c80a1dce4
Bisecting: 3717 revisions left to test after this (roughly 12 steps)
[f9d58de23152f2c16f326d7e014cfa2933b00304] Merge tag 'affs-for-5.12-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux

testing commit f9d58de23152f2c16f326d7e014cfa2933b00304 with gcc (GCC) 10.2.1 20210217
kernel signature: 8505708ce8704cdf15624aefd0066ea348c0124f837fac25f01f27a2293d8eec
all runs: OK
# git bisect good f9d58de23152f2c16f326d7e014cfa2933b00304
Bisecting: 1854 revisions left to test after this (roughly 11 steps)
[de1617578849acab8e16c9ffdce39b91fb50639d] Merge tag 'media/v5.12-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media

testing commit de1617578849acab8e16c9ffdce39b91fb50639d with gcc (GCC) 10.2.1 20210217
kernel signature: 95f168fa78dcc6bbbefba69042a1e5844398273f7e984e9acdf80b9c61ce0c84
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: crashed: WARNING in kvm_wait
run #3: crashed: WARNING in kvm_wait
run #4: crashed: WARNING in kvm_wait
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
run #10: OK
run #11: OK
run #12: OK
run #13: OK
run #14: OK
run #15: OK
run #16: OK
run #17: boot failed: WARNING in kvm_wait
run #18: boot failed: WARNING in kvm_wait
run #19: boot failed: WARNING in kvm_wait
# git bisect bad de1617578849acab8e16c9ffdce39b91fb50639d
Bisecting: 929 revisions left to test after this (roughly 10 steps)
[4a037ad5d115b2cc79a5071a7854475f365476fa] Merge tag 'for-linus-5.12-rc1-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/xen/tip

testing commit 4a037ad5d115b2cc79a5071a7854475f365476fa with gcc (GCC) 10.2.1 20210217
kernel signature: 22e2dc2f4cdde61aa67f08ccfeb751010726daf9f9b7b2e753d58906384dd01b
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: crashed: WARNING in kvm_wait
run #3: crashed: WARNING in kvm_wait
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
run #10: OK
run #11: OK
run #12: OK
run #13: OK
run #14: OK
run #15: OK
run #16: boot failed: WARNING in kvm_wait
run #17: boot failed: WARNING in kvm_wait
run #18: boot failed: WARNING in kvm_wait
run #19: boot failed: WARNING in kvm_wait
# git bisect bad 4a037ad5d115b2cc79a5071a7854475f365476fa
Bisecting: 451 revisions left to test after this (roughly 9 steps)
[582cd91f69de8e44857cb610ebca661dac8656b7] Merge tag 'for-5.12/block-2021-02-17' of git://git.kernel.dk/linux-block

testing commit 582cd91f69de8e44857cb610ebca661dac8656b7 with gcc (GCC) 10.2.1 20210217
kernel signature: 727596493c969dae1ab03921d30f91b7ef6349b73d31c5fc9b05e1aac2c07132
all runs: OK
# git bisect good 582cd91f69de8e44857cb610ebca661dac8656b7
Bisecting: 247 revisions left to test after this (roughly 8 steps)
[3f6ec19f2d05d800bbc42d95dece433da7697864] Merge tag 'timers-core-2021-02-15' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip

testing commit 3f6ec19f2d05d800bbc42d95dece433da7697864 with gcc (GCC) 10.2.1 20210217
kernel signature: 0a6bbe6dddff2bd8c11a8b4916165a2a105c821ecae28c534a126f3405e20e92
all runs: OK
# git bisect good 3f6ec19f2d05d800bbc42d95dece433da7697864
Bisecting: 125 revisions left to test after this (roughly 7 steps)
[85e853c5ec8486117182baab10c98b321daa6d47] Merge branch 'for-mingo-rcu' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu into core/rcu

testing commit 85e853c5ec8486117182baab10c98b321daa6d47 with gcc (GCC) 10.2.1 20210217
kernel signature: 8b8f9814c711d28a5b8d5bd592a66aca2c4d3eb3c8c6f8a327c6b4bafbeae506
all runs: OK
# git bisect good 85e853c5ec8486117182baab10c98b321daa6d47
Bisecting: 73 revisions left to test after this (roughly 6 steps)
[c5e6fc08feb2b88dc5dac2f3c817e1c2a4cafda4] sched,x86: Allow !PREEMPT_DYNAMIC

testing commit c5e6fc08feb2b88dc5dac2f3c817e1c2a4cafda4 with gcc (GCC) 10.2.1 20210217
kernel signature: 6c3ded3b40e24481484246e23595c9c0018b5b4967095b070f3fd4b4ca8fd7a7
all runs: OK
# git bisect good c5e6fc08feb2b88dc5dac2f3c817e1c2a4cafda4
Bisecting: 33 revisions left to test after this (roughly 5 steps)
[9eef02334505411667a7b51a8f349f8c6c4f3b66] Merge tag 'locking-core-2021-02-17' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip

testing commit 9eef02334505411667a7b51a8f349f8c6c4f3b66 with gcc (GCC) 10.2.1 20210217
kernel signature: ce2d6e317d214b46facdb106d76857aa81fcab0549d73a2d54829cc0c4522ae1
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: crashed: WARNING in kvm_wait
run #3: OK
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
run #10: OK
run #11: OK
run #12: OK
run #13: OK
run #14: OK
run #15: OK
run #16: OK
run #17: OK
run #18: OK
run #19: OK
# git bisect bad 9eef02334505411667a7b51a8f349f8c6c4f3b66
Bisecting: 19 revisions left to test after this (roughly 4 steps)
[62137364e3e8afcc745846c5c67cacf943149073] Merge branch 'linus' into locking/core, to pick up upstream fixes

testing commit 62137364e3e8afcc745846c5c67cacf943149073 with gcc (GCC) 10.2.1 20210217
kernel signature: 45d7ad52a3e085dbde67c942b1b41811f4148011d2d5a6ed94f93cbf1aefd767
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: crashed: WARNING in kvm_wait
run #3: crashed: WARNING in kvm_wait
run #4: crashed: WARNING in kvm_wait
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
run #10: OK
run #11: OK
run #12: OK
run #13: OK
run #14: OK
run #15: OK
run #16: OK
run #17: OK
run #18: OK
run #19: OK
# git bisect bad 62137364e3e8afcc745846c5c67cacf943149073
Bisecting: 9 revisions left to test after this (roughly 3 steps)
[997acaf6b4b59c6a9c259740312a69ea549cc684] lockdep: report broken irq restoration

testing commit 997acaf6b4b59c6a9c259740312a69ea549cc684 with gcc (GCC) 10.2.1 20210217
kernel signature: b00905e8b544e9923d83b883325d8bc1e9bb01f8008e7fa7bc63ad81adac0ed8
run #0: crashed: WARNING in kvm_wait
run #1: crashed: WARNING in kvm_wait
run #2: OK
run #3: OK
run #4: OK
run #5: OK
run #6: OK
run #7: OK
run #8: OK
run #9: OK
run #10: OK
run #11: OK
run #12: OK
run #13: OK
run #14: OK
run #15: OK
run #16: OK
run #17: OK
run #18: OK
run #19: boot failed: WARNING in kvm_wait
# git bisect bad 997acaf6b4b59c6a9c259740312a69ea549cc684
Bisecting: 4 revisions left to test after this (roughly 2 steps)
[175b1a60e8805617d74aefe17ce0d3a32eceb55c] locking/lockdep: Clean up check_redundant() a bit

testing commit 175b1a60e8805617d74aefe17ce0d3a32eceb55c with gcc (GCC) 10.2.1 20210217
kernel signature: 4d8c981a17592cd5f4f8957f09eb81fd850c3f85ca989a0da208804be0866804
all runs: OK
# git bisect good 175b1a60e8805617d74aefe17ce0d3a32eceb55c
Bisecting: 2 revisions left to test after this (roughly 1 step)
[7e923e6a3ceb877497dd9ee70d71fa33b94f332b] locking/selftests: Add local_lock inversion tests

testing commit 7e923e6a3ceb877497dd9ee70d71fa33b94f332b with gcc (GCC) 10.2.1 20210217
kernel signature: fd6afcbd5e35b6bf9c2b98170aae551d3b871667fea66930c5e0e6c2df4daecc
all runs: OK
# git bisect good 7e923e6a3ceb877497dd9ee70d71fa33b94f332b
Bisecting: 0 revisions left to test after this (roughly 1 step)
[2f0df49c89acaa58571d509830bc481250699885] jump_label: Do not profile branch annotations

testing commit 2f0df49c89acaa58571d509830bc481250699885 with gcc (GCC) 10.2.1 20210217
kernel signature: fd6afcbd5e35b6bf9c2b98170aae551d3b871667fea66930c5e0e6c2df4daecc
all runs: OK
# git bisect good 2f0df49c89acaa58571d509830bc481250699885
997acaf6b4b59c6a9c259740312a69ea549cc684 is the first bad commit
commit 997acaf6b4b59c6a9c259740312a69ea549cc684
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Jan 11 15:37:07 2021 +0000

    lockdep: report broken irq restoration
    
    We generally expect local_irq_save() and local_irq_restore() to be
    paired and sanely nested, and so local_irq_restore() expects to be
    called with irqs disabled. Thus, within local_irq_restore() we only
    trace irq flag changes when unmasking irqs.
    
    This means that a sequence such as:
    
    | local_irq_disable();
    | local_irq_save(flags);
    | local_irq_enable();
    | local_irq_restore(flags);
    
    ... is liable to break things, as the local_irq_restore() would mask
    irqs without tracing this change. Similar problems may exist for
    architectures whose arch_irq_restore() function depends on being called
    with irqs disabled.
    
    We don't consider such sequences to be a good idea, so let's define
    those as forbidden, and add tooling to detect such broken cases.
    
    This patch adds debug code to WARN() when raw_local_irq_restore() is
    called with irqs enabled. As raw_local_irq_restore() is expected to pair
    with raw_local_irq_save(), it should never be called with irqs enabled.
    
    To avoid the possibility of circular header dependencies between
    irqflags.h and bug.h, the warning is handled in a separate C file.
    
    The new code is all conditional on a new CONFIG_DEBUG_IRQFLAGS symbol
    which is independent of CONFIG_TRACE_IRQFLAGS. As noted above such cases
    will confuse lockdep, so CONFIG_DEBUG_LOCKDEP now selects
    CONFIG_DEBUG_IRQFLAGS.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210111153707.10071-1-mark.rutland@arm.com

 include/linux/irqflags.h       | 12 ++++++++++++
 kernel/locking/Makefile        |  1 +
 kernel/locking/irqflag-debug.c | 11 +++++++++++
 lib/Kconfig.debug              |  8 ++++++++
 4 files changed, 32 insertions(+)
 create mode 100644 kernel/locking/irqflag-debug.c

culprit signature: b00905e8b544e9923d83b883325d8bc1e9bb01f8008e7fa7bc63ad81adac0ed8
parent  signature: fd6afcbd5e35b6bf9c2b98170aae551d3b871667fea66930c5e0e6c2df4daecc
Reproducer flagged being flaky
revisions tested: 18, total time: 4h42m7.928602495s (build: 2h5m9.977400337s, test: 2h34m21.853512111s)
first bad commit: 997acaf6b4b59c6a9c259740312a69ea549cc684 lockdep: report broken irq restoration
recipients (to): ["linux-kernel@vger.kernel.org" "mark.rutland@arm.com" "mingo@redhat.com" "peterz@infradead.org" "peterz@infradead.org" "will@kernel.org"]
recipients (cc): ["akpm@linux-foundation.org" "masahiroy@kernel.org" "rafael.j.wysocki@intel.com" "rostedt@goodmis.org" "sedat.dilek@gmail.com" "tglx@linutronix.de" "vitor@massaru.org"]
crash: WARNING in kvm_wait
------------[ cut here ]------------
raw_local_irq_restore() called with IRQs enabled
WARNING: CPU: 0 PID: 22774 at kernel/locking/irqflag-debug.c:9 warn_bogus_irq_restore kernel/locking/irqflag-debug.c:9 [inline]
WARNING: CPU: 0 PID: 22774 at kernel/locking/irqflag-debug.c:9 warn_bogus_irq_restore+0x1d/0x20 kernel/locking/irqflag-debug.c:7
Modules linked in:
CPU: 0 PID: 22774 Comm: syz-executor.4 Not tainted 5.11.0-rc2-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
RIP: 0010:warn_bogus_irq_restore kernel/locking/irqflag-debug.c:9 [inline]
RIP: 0010:warn_bogus_irq_restore+0x1d/0x20 kernel/locking/irqflag-debug.c:7
Code: 51 00 e9 3f fe ff ff cc cc cc cc cc cc 80 3d 40 2a cf 0a 00 74 01 c3 48 c7 c7 60 f5 8a 88 c6 05 2f 2a cf 0a 01 e8 17 e1 a5 06 <0f> 0b c3 48 c7 c0 a0 16 4e 8e 53 48 89 fb 48 ba 00 00 00 00 00 fc
RSP: 0018:ffffc900088af5d8 EFLAGS: 00010286
RAX: 0000000000000000 RBX: ffffffff8a88e540 RCX: 0000000000000000
RDX: 0000000000000002 RSI: 0000000000000004 RDI: fffff52001115ead
RBP: 0000000000000246 R08: 0000000000000001 R09: ffff8880b9e2015b
R10: ffffed10173c402b R11: 0000000000000001 R12: 0000000000000003
R13: fffffbfff1511ca8 R14: 0000000000000001 R15: ffff8880b9e359c0
FS:  00007f124342a700(0000) GS:ffff8880b9e00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000000020000080 CR3: 0000000013344000 CR4: 00000000001506f0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 kvm_wait arch/x86/kernel/kvm.c:860 [inline]
 kvm_wait+0xc3/0xe0 arch/x86/kernel/kvm.c:837
 pv_wait arch/x86/include/asm/paravirt.h:564 [inline]
 pv_wait_head_or_lock kernel/locking/qspinlock_paravirt.h:470 [inline]
 __pv_queued_spin_lock_slowpath+0x8b8/0xb40 kernel/locking/qspinlock.c:508
 pv_queued_spin_lock_slowpath arch/x86/include/asm/paravirt.h:554 [inline]
 queued_spin_lock_slowpath arch/x86/include/asm/qspinlock.h:51 [inline]
 queued_spin_lock include/asm-generic/qspinlock.h:85 [inline]
 do_raw_spin_lock+0x200/0x2b0 kernel/locking/spinlock_debug.c:113
 spin_lock include/linux/spinlock.h:354 [inline]
 alloc_huge_page+0x2b0/0xda0 mm/hugetlb.c:2318
 hugetlb_no_page mm/hugetlb.c:4323 [inline]
 hugetlb_fault+0xc35/0x1cd0 mm/hugetlb.c:4523
 follow_hugetlb_page+0x317/0xda0 mm/hugetlb.c:4836
 __get_user_pages+0x3fa/0xe30 mm/gup.c:1041
 __get_user_pages_locked mm/gup.c:1256 [inline]
 __gup_longterm_locked+0x15f/0xc80 mm/gup.c:1667
 io_sqe_buffer_register fs/io_uring.c:8462 [inline]
 __io_uring_register fs/io_uring.c:9901 [inline]
 __do_sys_io_uring_register+0xeb1/0x3350 fs/io_uring.c:10000
 do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
 entry_SYSCALL_64_after_hwframe+0x44/0xa9
RIP: 0033:0x4665d9
Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007f124342a188 EFLAGS: 00000246 ORIG_RAX: 00000000000001ab
RAX: ffffffffffffffda RBX: 000000000056bf80 RCX: 00000000004665d9
RDX: 00000000200001c0 RSI: 0000000000000000 RDI: 0000000000000003
RBP: 00000000004bfcb9 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000001 R11: 0000000000000246 R12: 000000000056bf80
R13: 00007ffd3e8f435f R14: 00007f124342a300 R15: 0000000000022000

