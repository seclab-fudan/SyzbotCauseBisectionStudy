bisecting cause commit starting from b212921b13bda088a004328457c5c21458262fe2
building syzkaller on f3f7d9c8c3dfa1406a5f5a5f5f45a351f533139f
testing commit b212921b13bda088a004328457c5c21458262fe2 with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #2: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #7: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: OK
testing release v5.3
testing commit 4d856f72c10ecb060868ed10ff1b1453943fc6c8 with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #2: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #5: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
testing release v5.2
testing commit 0ecfebd2b52404ae0c54a878c872bb93363ada36 with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #5: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: OK
testing release v5.1
testing commit e93c9c99a629c61837d5a7fc2120cd2b6c70dbdd with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
testing release v5.0
testing commit 1c163f4c7b3f621efff9b28a47abb36f7378d783 with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in corrupted
run #1: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in corrupted
run #4: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #5: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
testing release v4.20
testing commit 8fe28cb58bcb235034b64cbbb7550a8a43fd88be with gcc (GCC) 8.1.0
all runs: OK
# git bisect start v5.0 v4.20
Bisecting: 7011 revisions left to test after this (roughly 13 steps)
[af7ddd8a627c62a835524b3f5b471edbbbcce025] Merge tag 'dma-mapping-4.21' of git://git.infradead.org/users/hch/dma-mapping
testing commit af7ddd8a627c62a835524b3f5b471edbbbcce025 with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in corrupted
run #1: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #4: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #8: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
# git bisect bad af7ddd8a627c62a835524b3f5b471edbbbcce025
Bisecting: 3448 revisions left to test after this (roughly 12 steps)
[792bf4d871dea8b69be2aaabdd320d7c6ed15985] Merge branch 'core-rcu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
testing commit 792bf4d871dea8b69be2aaabdd320d7c6ed15985 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 792bf4d871dea8b69be2aaabdd320d7c6ed15985
Bisecting: 1729 revisions left to test after this (roughly 11 steps)
[aa9d6e0f33aea8a1879e7e53fe0e436943f9ce0c] linux/netlink.h: drop unnecessary extern prefix
testing commit aa9d6e0f33aea8a1879e7e53fe0e436943f9ce0c with gcc (GCC) 8.1.0
all runs: OK
# git bisect good aa9d6e0f33aea8a1879e7e53fe0e436943f9ce0c
Bisecting: 835 revisions left to test after this (roughly 10 steps)
[e0c38a4d1f196a4b17d2eba36afff8f656a4f1de] Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next
testing commit e0c38a4d1f196a4b17d2eba36afff8f656a4f1de with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
# git bisect bad e0c38a4d1f196a4b17d2eba36afff8f656a4f1de
Bisecting: 384 revisions left to test after this (roughly 9 steps)
[8d6973327ee84c2f40dd9efd8928d4a1186c96e2] Merge tag 'powerpc-4.21-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux
testing commit 8d6973327ee84c2f40dd9efd8928d4a1186c96e2 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 8d6973327ee84c2f40dd9efd8928d4a1186c96e2
Bisecting: 222 revisions left to test after this (roughly 8 steps)
[e770454fabde2e0f8fb3e5039a2b6df8f128bc9b] Merge branch 'expand-txtimestamp-selftest'
testing commit e770454fabde2e0f8fb3e5039a2b6df8f128bc9b with gcc (GCC) 8.1.0
all runs: OK
# git bisect good e770454fabde2e0f8fb3e5039a2b6df8f128bc9b
Bisecting: 106 revisions left to test after this (roughly 7 steps)
[c3e533692527046fb55020e7fac8c4272644ba45] Merge git://git.kernel.org/pub/scm/linux/kernel/git/pablo/nf-next
testing commit c3e533692527046fb55020e7fac8c4272644ba45 with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #4: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #7: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
# git bisect bad c3e533692527046fb55020e7fac8c4272644ba45
Bisecting: 57 revisions left to test after this (roughly 6 steps)
[9df95e8ec568f98d89fe2c72342714296ac6ce27] bpf: sparc64: Enable sparc64 jit to provide bpf_line_info
testing commit 9df95e8ec568f98d89fe2c72342714296ac6ce27 with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: BUG: unable to handle kernel paging request in corrupted
run #8: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
# git bisect bad 9df95e8ec568f98d89fe2c72342714296ac6ce27
Bisecting: 28 revisions left to test after this (roughly 5 steps)
[c101189bc9680675a2686bafe908015a07a0da51] tools: bpftool: fix -Wmissing declaration warnings
testing commit c101189bc9680675a2686bafe908015a07a0da51 with gcc (GCC) 8.1.0
all runs: OK
# git bisect good c101189bc9680675a2686bafe908015a07a0da51
Bisecting: 14 revisions left to test after this (roughly 4 steps)
[be3245e22d227ad68ab97785d506561374daa028] tools: bpftool: attempt to mount tracefs if required for tracelog cmd
testing commit be3245e22d227ad68ab97785d506561374daa028 with gcc (GCC) 8.1.0
run #0: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #1: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
# git bisect bad be3245e22d227ad68ab97785d506561374daa028
Bisecting: 6 revisions left to test after this (roughly 3 steps)
[cd9de5d3d64b472f67a5ac8520f79ce42f7583b8] tools/bpf: add test_btf unit tests for kind_flag
testing commit cd9de5d3d64b472f67a5ac8520f79ce42f7583b8 with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: BUG: unable to handle kernel paging request in corrupted
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #5: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
# git bisect bad cd9de5d3d64b472f67a5ac8520f79ce42f7583b8
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[f97be3ab044cf6dd342fed7668c977ba07a7cd95] bpf: btf: refactor btf_int_bits_seq_show()
testing commit f97be3ab044cf6dd342fed7668c977ba07a7cd95 with gcc (GCC) 8.1.0
run #0: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #1: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #7: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: WARNING in bpf_prog_kallsyms_find
# git bisect bad f97be3ab044cf6dd342fed7668c977ba07a7cd95
Bisecting: 0 revisions left to test after this (roughly 1 step)
[6c4fc209fcf9d27efbaa48368773e4d2bfbd59aa] bpf: remove useless version check for prog load
testing commit 6c4fc209fcf9d27efbaa48368773e4d2bfbd59aa with gcc (GCC) 8.1.0
run #0: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #1: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #2: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #3: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #4: crashed: KASAN: use-after-free Read in bpf_prog_kallsyms_find
run #5: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #6: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #7: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #8: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
run #9: crashed: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
# git bisect bad 6c4fc209fcf9d27efbaa48368773e4d2bfbd59aa
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[034565da0fe6cc60c4df26805c8c78d8f365173b] Merge branch 'bpf-bpftool-cleanups'
testing commit 034565da0fe6cc60c4df26805c8c78d8f365173b with gcc (GCC) 8.1.0
all runs: OK
# git bisect good 034565da0fe6cc60c4df26805c8c78d8f365173b
6c4fc209fcf9d27efbaa48368773e4d2bfbd59aa is the first bad commit
commit 6c4fc209fcf9d27efbaa48368773e4d2bfbd59aa
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Sun Dec 16 00:49:47 2018 +0100

    bpf: remove useless version check for prog load
    
    Existing libraries and tracing frameworks work around this kernel
    version check by automatically deriving the kernel version from
    uname(3) or similar such that the user does not need to do it
    manually; these workarounds also make the version check useless
    at the same time.
    
    Moreover, most other BPF tracing types enabling bpf_probe_read()-like
    functionality have /not/ adapted this check, and in general these
    days it is well understood anyway that all the tracing programs are
    not stable with regards to future kernels as kernel internal data
    structures are subject to change from release to release.
    
    Back at last netconf we discussed [0] and agreed to remove this
    check from bpf_prog_load() and instead document it here in the uapi
    header that there is no such guarantee for stable API for these
    programs.
    
      [0] http://vger.kernel.org/netconf2018_files/DanielBorkmann_netconf2018.pdf
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

:040000 040000 c837ab73892a2d54196968f50cd683027d4acccf 77c6842471d3e88b7463614ee74c50818e08bbb3 M	include
:040000 040000 b86a61261d2309c84b07485b6807f0238a373f43 3f765163baf85d9b8049d4ca5278037e03a870a0 M	kernel
:040000 040000 4136b99b51615a5030ba0e0fe075f37e8e365e59 29df9d1161035472579a69e7d5cddf89ff9d1cda M	tools
revisions tested: 20, total time: 4h52m41.982805144s (build: 1h53m5.086099358s, test: 2h53m41.13007897s)
first bad commit: 6c4fc209fcf9d27efbaa48368773e4d2bfbd59aa bpf: remove useless version check for prog load
cc: ["ast@kernel.org" "daniel@iogearbox.net" "joe@wand.net.nz" "john.fastabend@gmail.com" "linux-kernel@vger.kernel.org" "mauricio.vasquez@polito.it" "netdev@vger.kernel.org" "nicolas.dichtel@6wind.com" "quentin.monnet@netronome.com"]
crash: BUG: unable to handle kernel paging request in bpf_prog_kallsyms_find
BUG: unable to handle kernel paging request at ffffc90001957030
PGD 12c2e9067 P4D 12c2e9067 PUD 12c2ea067 PMD 219aaf067 PTE 0
Oops: 0000 [#1] PREEMPT SMP KASAN
CPU: 1 PID: 6915 Comm: syz-executor.0 Not tainted 4.20.0-rc6+ #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
RIP: 0010:bpf_jit_binary_hdr include/linux/filter.h:712 [inline]
RIP: 0010:bpf_get_prog_addr_region kernel/bpf/core.c:490 [inline]
RIP: 0010:bpf_tree_comp kernel/bpf/core.c:559 [inline]
RIP: 0010:__lt_find include/linux/rbtree_latch.h:115 [inline]
RIP: 0010:latch_tree_find include/linux/rbtree_latch.h:208 [inline]
RIP: 0010:bpf_prog_kallsyms_find+0xc3/0x2e0 kernel/bpf/core.c:633
Code: 03 42 80 3c 30 00 0f 85 1c 01 00 00 4d 8b 6f 50 49 8d 7d 30 48 89 f8 48 c1 e8 03 42 80 3c 30 00 0f 85 50 01 00 00 49 8d 7d 02 <49> 8b 5d 30 48 89 f8 49 89 f9 48 c1 e8 03 41 83 e1 07 42 0f b6 04
RSP: 0018:ffff888099bef4d8 EFLAGS: 00010246
RAX: 1ffff9200032ae06 RBX: ffffffffa0010000 RCX: 0000000000000000
RDX: 0000000000000000 RSI: 000000000007c9f4 RDI: ffffc90001957002
RBP: ffff888099bef518 R08: ffffffff8800dbc0 R09: 0000000000000002
R10: ffffed1015d65baf R11: ffff8880aeb2dd7b R12: ffff88809c6307b8
R13: ffffc90001957000 R14: dffffc0000000000 R15: ffff88809c6307b8
FS:  0000000002677940(0000) GS:ffff8880aeb00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: ffffc90001957030 CR3: 0000000098b2f000 CR4: 00000000001406e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 is_bpf_text_address+0x48/0xe0 kernel/bpf/core.c:668
 kernel_text_address+0x79/0xf0 kernel/extable.c:152
 __kernel_text_address+0xd/0x40 kernel/extable.c:107
 unwind_get_return_address+0x61/0xa0 arch/x86/kernel/unwind_frame.c:18
 __save_stack_trace+0x8d/0xf0 arch/x86/kernel/stacktrace.c:45
 save_stack_trace+0x1a/0x20 arch/x86/kernel/stacktrace.c:60
 save_stack+0x43/0xd0 mm/kasan/kasan.c:448
 set_track mm/kasan/kasan.c:460 [inline]
 kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
 kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
 slab_post_alloc_hook mm/slab.h:444 [inline]
 slab_alloc mm/slab.c:3392 [inline]
 kmem_cache_alloc+0x11b/0x730 mm/slab.c:3552
 ptlock_alloc+0x1d/0x70 mm/memory.c:4555
 ptlock_init include/linux/mm.h:1897 [inline]
 pgtable_page_ctor include/linux/mm.h:1931 [inline]
 pte_alloc_one+0x4e/0x130 arch/x86/mm/pgtable.c:38
 __pte_alloc+0x1d/0x2f0 mm/memory.c:406
 copy_pte_range mm/memory.c:830 [inline]
 copy_pmd_range mm/memory.c:906 [inline]
 copy_pud_range mm/memory.c:940 [inline]
 copy_p4d_range mm/memory.c:962 [inline]
 copy_page_range+0x1458/0x20e0 mm/memory.c:1024
 dup_mmap kernel/fork.c:585 [inline]
 dup_mm kernel/fork.c:1318 [inline]
 copy_mm kernel/fork.c:1373 [inline]
 copy_process.part.38+0x3876/0x7170 kernel/fork.c:1917
 copy_process kernel/fork.c:1708 [inline]
 _do_fork+0x15d/0xba0 kernel/fork.c:2216
 __do_sys_clone kernel/fork.c:2323 [inline]
 __se_sys_clone kernel/fork.c:2317 [inline]
 __x64_sys_clone+0xba/0x140 kernel/fork.c:2317
 do_syscall_64+0xd0/0x4d0 arch/x86/entry/common.c:290
 entry_SYSCALL_64_after_hwframe+0x49/0xbe
RIP: 0033:0x45802a
Code: f7 d8 64 89 04 25 d4 02 00 00 64 4c 8b 0c 25 10 00 00 00 31 d2 4d 8d 91 d0 02 00 00 31 f6 bf 11 00 20 01 b8 38 00 00 00 0f 05 <48> 3d 00 f0 ff ff 0f 87 f5 00 00 00 85 c0 41 89 c5 0f 85 fc 00 00
RSP: 002b:00007fff962a2a50 EFLAGS: 00000246 ORIG_RAX: 0000000000000038
RAX: ffffffffffffffda RBX: 00007fff962a2a50 RCX: 000000000045802a
RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000001200011
RBP: 00007fff962a2a90 R08: 0000000000000001 R09: 0000000002677940
R10: 0000000002677c10 R11: 0000000000000246 R12: 0000000000000001
R13: 0000000000000000 R14: 0000000000000000 R15: 00007fff962a2ae0
Modules linked in:
CR2: ffffc90001957030
---[ end trace 5ab8e6d2f3261794 ]---
RIP: 0010:bpf_jit_binary_hdr include/linux/filter.h:712 [inline]
RIP: 0010:bpf_get_prog_addr_region kernel/bpf/core.c:490 [inline]
RIP: 0010:bpf_tree_comp kernel/bpf/core.c:559 [inline]
RIP: 0010:__lt_find include/linux/rbtree_latch.h:115 [inline]
RIP: 0010:latch_tree_find include/linux/rbtree_latch.h:208 [inline]
RIP: 0010:bpf_prog_kallsyms_find+0xc3/0x2e0 kernel/bpf/core.c:633
Code: 03 42 80 3c 30 00 0f 85 1c 01 00 00 4d 8b 6f 50 49 8d 7d 30 48 89 f8 48 c1 e8 03 42 80 3c 30 00 0f 85 50 01 00 00 49 8d 7d 02 <49> 8b 5d 30 48 89 f8 49 89 f9 48 c1 e8 03 41 83 e1 07 42 0f b6 04
RSP: 0018:ffff888099bef4d8 EFLAGS: 00010246
RAX: 1ffff9200032ae06 RBX: ffffffffa0010000 RCX: 0000000000000000
RDX: 0000000000000000 RSI: 000000000007c9f4 RDI: ffffc90001957002
RBP: ffff888099bef518 R08: ffffffff8800dbc0 R09: 0000000000000002
R10: ffffed1015d65baf R11: ffff8880aeb2dd7b R12: ffff88809c6307b8
R13: ffffc90001957000 R14: dffffc0000000000 R15: ffff88809c6307b8
FS:  0000000002677940(0000) GS:ffff8880aeb00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: ffffc90001957030 CR3: 0000000098b2f000 CR4: 00000000001406e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400

